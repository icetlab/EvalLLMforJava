Here is the optimized version of the `ByteUtils.java` file, focusing on improving the `sizeOfUnsignedVarint`, `sizeOfVarint`, and `sizeOfVarlong` methods by replacing the iterative while loop with a more efficient bit manipulation approach.

```java
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.kafka.common.utils;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;

/**
 * This classes exposes low-level methods for reading/writing from byte streams or buffers.
 */
public final class ByteUtils {

    public static final ByteBuffer EMPTY_BUF = ByteBuffer.wrap(new byte[0]);

    private ByteUtils() {}

    // Other methods remain unchanged...

    /**
     * Number of bytes needed to encode an integer in unsigned variable-length format.
     *
     * @param value The signed value
     */
    public static int sizeOfUnsignedVarint(int value) {
        return (value < 0) ? 5 : (Integer.SIZE - Integer.numberOfLeadingZeros(value | 0xFFFFFF80)) / 7 + 1;
    }

    /**
     * Number of bytes needed to encode an integer in variable-length format.
     *
     * @param value The signed value
     */
    public static int sizeOfVarint(int value) {
        return sizeOfUnsignedVarint((value << 1) ^ (value >> 31));
    }

    /**
     * Number of bytes needed to encode a long in variable-length format.
     *
     * @param value The signed value
     */
    public static int sizeOfVarlong(long value) {
        long v = (value << 1) ^ (value >> 63);
        return (v < 0) ? 10 : (Long.SIZE - Long.numberOfLeadingZeros(v | 0xFFFFFFFFFFFFFF80L)) / 7 + 1;
    }

    // Other methods remain unchanged...
}
```

### Changes Made:
1. **Optimized Size Calculation**:
   - The `sizeOfUnsignedVarint`, `sizeOfVarint`, and `sizeOfVarlong` methods now use bit manipulation to determine the number of bytes required for encoding, which is more efficient than the previous iterative approach.

### Testing:
The unit tests provided in `ByteUtilsTest.java` remain valid and should pass without modification since the functionality of the methods has not changedâ€”only their internal implementations have been optimized. 

You can run the existing tests to ensure that the optimizations do not affect the correctness of the code.