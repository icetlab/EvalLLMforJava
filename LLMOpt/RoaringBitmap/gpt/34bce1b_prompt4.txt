The performance issue is:
Existing shift left method is not optimal
---------
The source files are:
../RoaringBitmap/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
package org.roaringbitmap.longlong;

public class IntegerUtil {

  /**
   * convert integer to its byte array format
   * @param v an input integer value
   * @return the big endian byte array representation
   */
  public static byte[] toBDBytes(int v) {
    byte[] bytes = new byte[4];
    bytes[0] = (byte) (v >> 24);
    bytes[1] = (byte) (v >> 16);
    bytes[2] = (byte) (v >> 8);
    bytes[3] = (byte) v;
    return bytes;
  }

  /**
   * convert into its integer representation
   * @param bytes the big endian integer's byte array
   * @return a integer corresponding to input bytes
   */
  public static int fromBDBytes(byte[] bytes) {
    return (bytes[0] & 0xFF) << 24
        | (bytes[1] & 0xFF) << 16
        | (bytes[2] & 0xFF) << 8
        | bytes[3] & 0xFF;
  }

  /**
   * set a specified position byte to another value to return a fresh integer
   * @param v the input integer value
   * @param bv the byte value to insert
   * @param pos the position of an 4 byte array to replace
   * @return a fresh integer after a specified position byte been replaced
   */
  public static int setByte(int v, byte bv, int pos) {
    int i = ((3 - pos) << 3);
    v &= ~(0xFF << i);
    v |= (bv & 0xFF) << i;
    return v;
  }

  /**
   * shift the byte left from the specified position
   * @param v a integer value
   * @param pos the position from which to shift byte values left
   * @param count the shifting numbers
   * @return a fresh integer value
   */
  public static int shiftLeftFromSpecifiedPosition(int v, int pos, int count) {
    byte[] initialVal = toBDBytes(v);
    System.arraycopy(initialVal, pos + 1, initialVal, pos, count);
    return fromBDBytes(initialVal);
  }

  /**
   * fetch the first byte
   * @param v an input integer
   * @return the first byte of the big endian representation
   */
  public static byte firstByte(int v) {
    return (byte) (v >> 24);
  }
}

---------
The unit test is:
../RoaringBitmap/roaringbitmap/src/test/java/org/roaringbitmap/longlong/IntegerUtilTest.java
package org.roaringbitmap.longlong;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class IntegerUtilTest {

  @Test
  public void testConvertIntToBytes() {
    int v = 1;
    byte[] bytes = IntegerUtil.toBDBytes(v);
    int revertVal = IntegerUtil.fromBDBytes(bytes);
    assertEquals(revertVal, v);
    v = -1;
    bytes = IntegerUtil.toBDBytes(v);
    revertVal = IntegerUtil.fromBDBytes(bytes);
    assertEquals(revertVal, v);
    v = -125;
    bytes = IntegerUtil.toBDBytes(v);
    revertVal = IntegerUtil.fromBDBytes(bytes);
    assertEquals(revertVal, v);
  }

  @Test
  public void testSetByte() {
    for (int i = 0; i < 4; ++i) {
      int value = IntegerUtil.setByte(0x55555555, (byte)0xAA, i);
      byte[] bytes = IntegerUtil.toBDBytes(value);
      for (int j = 0; j < 4; ++j) {
        byte expected = i == j ? (byte)0xAA : (byte)0x55;
        assertEquals(expected, bytes[j]);
      }
    }
  }

  @Test
  public void testShiftLeftFromSpecifiedPosition() {
    assertEquals(0xBBCCDDDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 3));
    assertEquals(0xBBCCCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 2));
    assertEquals(0xBBBBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 1));
    assertEquals(0xAABBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 0, 0));
    assertEquals(0xAACCDDDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 1, 2));
    assertEquals(0xAACCCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 1, 1));
    assertEquals(0xAABBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 1, 0));
    assertEquals(0xAABBDDDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 2, 1));
    assertEquals(0xAABBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 2, 0));
    assertEquals(0xAABBCCDD, IntegerUtil.shiftLeftFromSpecifiedPosition(0xAABBCCDD, 3, 0));
  }
}

---------
The target benchmark functions are:
package org.roaringbitmap.longlong;

import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.infra.Blackhole;

import java.util.concurrent.TimeUnit;

@State(Scope.Benchmark)
@BenchmarkMode(Mode.AverageTime)
@OutputTimeUnit(TimeUnit.NANOSECONDS)
@Warmup(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)
@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)
public class ShiftLeftFromSpecifiedPositionBenchmark {

  public int v = 1234567890; // some value

  @Param({"0", "2"})
  public int pos;

  @Param({"1", "2"})
  public int count;

  @Benchmark
  public void optimized(Blackhole blackhole) {
    blackhole.consume(IntegerUtil.shiftLeftFromSpecifiedPosition(v, pos, count));
  }

  @Benchmark
  public void original(Blackhole blackhole) {
    blackhole.consume(shiftLeftFromSpecifiedPosition(v, pos, count));
  }

  public static int shiftLeftFromSpecifiedPosition(int v, int pos, int count) {
    byte[] initialVal = IntegerUtil.toBDBytes(v);
    System.arraycopy(initialVal, pos + 1, initialVal, pos, count);
    return IntegerUtil.fromBDBytes(initialVal);
  }
}