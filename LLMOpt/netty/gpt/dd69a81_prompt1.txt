The source files are:
../netty/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java
/*
 * Copyright 2012 The Netty Project
 *
 * The Netty Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
package io.netty.handler.codec.http;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufUtil;
import io.netty.util.CharsetUtil;

import static io.netty.handler.codec.http.HttpConstants.SP;

/**
 * Encodes an {@link HttpRequest} or an {@link HttpContent} into
 * a {@link ByteBuf}.
 */
public class HttpRequestEncoder extends HttpObjectEncoder<HttpRequest> {
    private static final char SLASH = '/';
    private static final char QUESTION_MARK = '?';

    @Override
    public boolean acceptOutboundMessage(Object msg) throws Exception {
        return super.acceptOutboundMessage(msg) && !(msg instanceof HttpResponse);
    }

    @Override
    protected void encodeInitialLine(ByteBuf buf, HttpRequest request) throws Exception {
        ByteBufUtil.copy(request.method().asciiName(), buf);
        buf.writeByte(SP);

        // Add / as absolute path if no is present.
        // See http://tools.ietf.org/html/rfc2616#section-5.1.2
        String uri = request.uri();

        if (uri.isEmpty()) {
            uri += SLASH;
        } else {
            int start = uri.indexOf("://");
            if (start != -1 && uri.charAt(0) != SLASH) {
                int startIndex = start + 3;
                // Correctly handle query params.
                // See https://github.com/netty/netty/issues/2732
                int index = uri.indexOf(QUESTION_MARK, startIndex);
                if (index == -1) {
                    if (uri.lastIndexOf(SLASH) <= startIndex) {
                        uri += SLASH;
                    }
                } else {
                    if (uri.lastIndexOf(SLASH, index) <= startIndex) {
                        int len = uri.length();
                        StringBuilder sb = new StringBuilder(len + 1);
                        sb.append(uri, 0, index)
                          .append(SLASH)
                          .append(uri, index, len);
                        uri = sb.toString();
                    }
                }
            }
        }

        buf.writeCharSequence(uri, CharsetUtil.UTF_8);

        buf.writeByte(SP);
        request.protocolVersion().encode(buf);
        buf.writeBytes(CRLF);
    }
}

---------
The unit test is:
../netty/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestEncoderTest.java
/*
 * Copyright 2012 The Netty Project
 *
 * The Netty Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
package io.netty.handler.codec.http;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import org.junit.Test;

import java.nio.charset.Charset;

import static org.junit.Assert.*;

/**
 */
public class HttpRequestEncoderTest {

    @Test
    public void testUriWithoutPath() throws Exception {
        HttpRequestEncoder encoder = new HttpRequestEncoder();
        ByteBuf buffer = Unpooled.buffer(64);
        encoder.encodeInitialLine(buffer, new DefaultHttpRequest(HttpVersion.HTTP_1_1,
                HttpMethod.GET, "http://localhost"));
        String req = buffer.toString(Charset.forName("US-ASCII"));
        assertEquals("GET http://localhost/ HTTP/1.1\r\n", req);
        buffer.release();
    }

    @Test
    public void testUriWithoutPath2() throws Exception {
        HttpRequestEncoder encoder = new HttpRequestEncoder();
        ByteBuf buffer = Unpooled.buffer(64);
        encoder.encodeInitialLine(buffer, new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET,
                "http://localhost:9999?p1=v1"));
        String req = buffer.toString(Charset.forName("US-ASCII"));
        assertEquals("GET http://localhost:9999/?p1=v1 HTTP/1.1\r\n", req);
        buffer.release();
    }

    @Test
    public void testUriWithEmptyPath() throws Exception {
        HttpRequestEncoder encoder = new HttpRequestEncoder();
        ByteBuf buffer = Unpooled.buffer(64);
        encoder.encodeInitialLine(buffer, new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET,
                "http://localhost:9999/?p1=v1"));
        String req = buffer.toString(Charset.forName("US-ASCII"));
        assertEquals("GET http://localhost:9999/?p1=v1 HTTP/1.1\r\n", req);
        buffer.release();
    }

    @Test
    public void testUriWithPath() throws Exception {
        HttpRequestEncoder encoder = new HttpRequestEncoder();
        ByteBuf buffer = Unpooled.buffer(64);
        encoder.encodeInitialLine(buffer, new DefaultHttpRequest(HttpVersion.HTTP_1_1,
                HttpMethod.GET, "http://localhost/"));
        String req = buffer.toString(Charset.forName("US-ASCII"));
        assertEquals("GET http://localhost/ HTTP/1.1\r\n", req);
        buffer.release();
    }

    @Test
    public void testAbsPath() throws Exception {
        HttpRequestEncoder encoder = new HttpRequestEncoder();
        ByteBuf buffer = Unpooled.buffer(64);
        encoder.encodeInitialLine(buffer, new DefaultHttpRequest(HttpVersion.HTTP_1_1,
                HttpMethod.GET, "/"));
        String req = buffer.toString(Charset.forName("US-ASCII"));
        assertEquals("GET / HTTP/1.1\r\n", req);
        buffer.release();
    }

    @Test
    public void testEmptyAbsPath() throws Exception {
        HttpRequestEncoder encoder = new HttpRequestEncoder();
        ByteBuf buffer = Unpooled.buffer(64);
        encoder.encodeInitialLine(buffer, new DefaultHttpRequest(HttpVersion.HTTP_1_1,
                HttpMethod.GET, ""));
        String req = buffer.toString(Charset.forName("US-ASCII"));
        assertEquals("GET / HTTP/1.1\r\n", req);
        buffer.release();
    }

    @Test
    public void testQueryStringPath() throws Exception {
        HttpRequestEncoder encoder = new HttpRequestEncoder();
        ByteBuf buffer = Unpooled.buffer(64);
        encoder.encodeInitialLine(buffer, new DefaultHttpRequest(HttpVersion.HTTP_1_1,
                HttpMethod.GET, "/?url=http://example.com"));
        String req = buffer.toString(Charset.forName("US-ASCII"));
        assertEquals("GET /?url=http://example.com HTTP/1.1\r\n", req);
        buffer.release();
    }
}
