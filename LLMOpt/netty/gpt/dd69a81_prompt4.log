Here is the optimized version of the `HttpRequestEncoder.java` file. The changes focus on improving the efficiency of the URI handling logic, particularly around the insertion of slashes.

```java
/*
 * Copyright 2012 The Netty Project
 *
 * The Netty Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.netty.handler.codec.http;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufUtil;
import io.netty.util.CharsetUtil;

import static io.netty.handler.codec.http.HttpConstants.SP;

/**
 * Encodes an {@link HttpRequest} or an {@link HttpContent} into
 * a {@link ByteBuf}.
 */
public class HttpRequestEncoder extends HttpObjectEncoder<HttpRequest> {
    private static final char SLASH = '/';
    private static final char QUESTION_MARK = '?';

    @Override
    public boolean acceptOutboundMessage(Object msg) throws Exception {
        return super.acceptOutboundMessage(msg) && !(msg instanceof HttpResponse);
    }

    @Override
    protected void encodeInitialLine(ByteBuf buf, HttpRequest request) throws Exception {
        ByteBufUtil.copy(request.method().asciiName(), buf);
        buf.writeByte(SP);

        String uri = request.uri();
        if (uri.isEmpty()) {
            uri = SLASH + ""; // Ensure it becomes "/"
        } else {
            int start = uri.indexOf("://");
            if (start != -1 && uri.charAt(0) != SLASH) {
                int startIndex = start + 3;
                int index = uri.indexOf(QUESTION_MARK, startIndex);
                boolean needsSlash = (index == -1 && uri.lastIndexOf(SLASH) <= startIndex) ||
                                     (index != -1 && uri.lastIndexOf(SLASH, index) <= startIndex);
                
                if (needsSlash) {
                    uri = insertSlash(uri, index, startIndex);
                }
            }
        }

        buf.writeCharSequence(uri, CharsetUtil.UTF_8);
        buf.writeByte(SP);
        request.protocolVersion().encode(buf);
        buf.writeBytes(CRLF);
    }

    private String insertSlash(String uri, int index, int startIndex) {
        if (index == -1) {
            return uri + SLASH;
        } else {
            return uri.substring(0, index) + SLASH + uri.substring(index);
        }
    }
}
```

### Key Changes Made:
1. **Simplified Logic for Slash Insertion**:
   - The logic for determining whether a slash needs to be added has been simplified by using a boolean flag `needsSlash`.
   - The `insertSlash` method is introduced to handle the actual insertion of the slash, which makes the code cleaner and more readable.

2. **String Manipulation**:
   - Instead of using `StringBuilder`, the code now uses `String` methods directly to concatenate the necessary parts of the URI. This reduces overhead and improves performance.

These changes should enhance the performance of the `HttpRequestEncoder` while maintaining the original functionality and ensuring that the unit tests remain valid.