The source files are:
../kafka/clients/src/main/java/org/apache/kafka/common/header/internals/RecordHeaders.java
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.kafka.common.header.internals;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.apache.kafka.common.header.Header;
import org.apache.kafka.common.header.Headers;
import org.apache.kafka.common.record.Record;
import org.apache.kafka.common.utils.AbstractIterator;

public class RecordHeaders implements Headers {
    
    private final List<Header> headers;
    private volatile boolean isReadOnly = false;

    public RecordHeaders() {
        this((Iterable<Header>) null);
    }

    public RecordHeaders(Header[] headers) {
        if (headers == null) {
            this.headers = new ArrayList<>();
        } else {
            this.headers = new ArrayList<>(Arrays.asList(headers));
        }
    }
    
    public RecordHeaders(Iterable<Header> headers) {
        //Use efficient copy constructor if possible, fallback to iteration otherwise
        if (headers == null) {
            this.headers = new ArrayList<>();
        } else if (headers instanceof RecordHeaders) {
            this.headers = new ArrayList<>(((RecordHeaders) headers).headers);
        } else if (headers instanceof Collection) {
            this.headers = new ArrayList<>((Collection<Header>) headers);
        } else {
            this.headers = new ArrayList<>();
            for (Header header : headers)
                this.headers.add(header);
        }
    }

    @Override
    public Headers add(Header header) throws IllegalStateException {
        canWrite();
        headers.add(header);
        return this;
    }

    @Override
    public Headers add(String key, byte[] value) throws IllegalStateException {
        return add(new RecordHeader(key, value));
    }

    @Override
    public Headers remove(String key) throws IllegalStateException {
        canWrite();
        checkKey(key);
        Iterator<Header> iterator = iterator();
        while (iterator.hasNext()) {
            if (iterator.next().key().equals(key)) {
                iterator.remove();
            }
        }
        return this;
    }

    @Override
    public Header lastHeader(String key) {
        checkKey(key);
        for (int i = headers.size() - 1; i >= 0; i--) {
            Header header = headers.get(i);
            if (header.key().equals(key)) {
                return header;
            }
        }
        return null;
    }

    @Override
    public Iterable<Header> headers(final String key) {
        checkKey(key);
        return new Iterable<Header>() {
            @Override
            public Iterator<Header> iterator() {
                return new FilterByKeyIterator(headers.iterator(), key);
            }
        };
    }

    @Override
    public Iterator<Header> iterator() {
        return closeAware(headers.iterator());
    }

    public void setReadOnly() {
        this.isReadOnly = true;
    }

    public Header[] toArray() {
        return headers.isEmpty() ? Record.EMPTY_HEADERS : headers.toArray(new Header[headers.size()]);
    }
    
    private void checkKey(String key) {
        if (key == null) {
            throw new IllegalArgumentException("key cannot be null.");
        }
    }
    
    private void canWrite() {
        if (isReadOnly) {
            throw new IllegalStateException("RecordHeaders has been closed.");
        }
    }

    private Iterator<Header> closeAware(final Iterator<Header> original) {
        return new Iterator<Header>() {
            @Override
            public boolean hasNext() {
                return original.hasNext();
            }

            public Header next() {
                return original.next();
            }

            @Override
            public void remove() {
                canWrite();
                original.remove();
            }
        };
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        RecordHeaders headers1 = (RecordHeaders) o;

        return headers != null ? headers.equals(headers1.headers) : headers1.headers == null;
    }

    @Override
    public int hashCode() {
        return headers != null ? headers.hashCode() : 0;
    }

    @Override
    public String toString() {
        return "RecordHeaders(" +
               "headers = " + headers +
               ", isReadOnly = " + isReadOnly +
               ')';
    }
    
    private static final class FilterByKeyIterator extends AbstractIterator<Header> {

        private final Iterator<Header> original;
        private final String key;

        private FilterByKeyIterator(Iterator<Header> original, String key) {
            this.original = original;
            this.key = key;
        }
        
        protected Header makeNext() {
            while (true) {
                if (original.hasNext()) {
                    Header header = original.next();
                    if (!header.key().equals(key)) {
                        continue;
                    }

                    return header;
                }
                return this.allDone();
            }
        }
    }
}

---------
The unit test is:
../kafka/clients/src/test/java/org/apache/kafka/common/header/internals/RecordHeadersTest.java
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.kafka.common.header.internals;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.IOException;
import java.util.Arrays;
import java.util.Iterator;

import org.apache.kafka.common.header.Header;
import org.apache.kafka.common.header.Headers;
import org.junit.Test;

public class RecordHeadersTest {

    @Test
    public void testAdd() {
        Headers headers = new RecordHeaders();
        headers.add(new RecordHeader("key", "value".getBytes()));

        Header header = headers.iterator().next();
        assertHeader("key", "value", header);

        headers.add(new RecordHeader("key2", "value2".getBytes()));

        assertHeader("key2", "value2", headers.lastHeader("key2"));
        assertEquals(2, getCount(headers));
    }

    @Test
    public void testRemove() {
        Headers headers = new RecordHeaders();
        headers.add(new RecordHeader("key", "value".getBytes()));

        assertTrue(headers.iterator().hasNext());

        headers.remove("key");

        assertFalse(headers.iterator().hasNext());
    }

    @Test
    public void testAddRemoveInterleaved() {
        Headers headers = new RecordHeaders();
        headers.add(new RecordHeader("key", "value".getBytes()));
        headers.add(new RecordHeader("key2", "value2".getBytes()));

        assertTrue(headers.iterator().hasNext());

        headers.remove("key");

        assertEquals(1, getCount(headers));

        headers.add(new RecordHeader("key3", "value3".getBytes()));
        
        assertNull(headers.lastHeader("key"));

        assertHeader("key2", "value2", headers.lastHeader("key2"));

        assertHeader("key3", "value3", headers.lastHeader("key3"));

        assertEquals(2, getCount(headers));

        headers.remove("key2");

        assertNull(headers.lastHeader("key"));

        assertNull(headers.lastHeader("key2"));

        assertHeader("key3", "value3", headers.lastHeader("key3"));

        assertEquals(1, getCount(headers));

        headers.add(new RecordHeader("key3", "value4".getBytes()));

        assertHeader("key3", "value4", headers.lastHeader("key3"));

        assertEquals(2, getCount(headers));

        headers.add(new RecordHeader("key", "valueNew".getBytes()));

        assertEquals(3, getCount(headers));


        assertHeader("key", "valueNew", headers.lastHeader("key"));

        headers.remove("key3");

        assertEquals(1, getCount(headers));

        assertNull(headers.lastHeader("key2"));

        headers.remove("key");

        assertFalse(headers.iterator().hasNext());
    }

    @Test
    public void testLastHeader() {
        Headers headers = new RecordHeaders();
        headers.add(new RecordHeader("key", "value".getBytes()));
        headers.add(new RecordHeader("key", "value2".getBytes()));
        headers.add(new RecordHeader("key", "value3".getBytes()));

        assertHeader("key", "value3", headers.lastHeader("key"));
        assertEquals(3, getCount(headers));

    }

    @Test
    public void testReadOnly() throws IOException {
        RecordHeaders headers = new RecordHeaders();
        headers.add(new RecordHeader("key", "value".getBytes()));
        Iterator<Header> headerIteratorBeforeClose = headers.iterator();
        headers.setReadOnly();
        try {
            headers.add(new RecordHeader("key", "value".getBytes()));
            fail("IllegalStateException expected as headers are closed");
        } catch (IllegalStateException ise) {
            //expected  
        }

        try {
            headers.remove("key");
            fail("IllegalStateException expected as headers are closed");
        } catch (IllegalStateException ise) {
            //expected  
        }

        try {
            Iterator<Header> headerIterator = headers.iterator();
            headerIterator.next();
            headerIterator.remove();
            fail("IllegalStateException expected as headers are closed");
        } catch (IllegalStateException ise) {
            //expected  
        }
        
        try {
            headerIteratorBeforeClose.next();
            headerIteratorBeforeClose.remove();
            fail("IllegalStateException expected as headers are closed");
        } catch (IllegalStateException ise) {
            //expected  
        }
    }

    @Test
    public void testHeaders() throws IOException {
        RecordHeaders headers = new RecordHeaders();
        headers.add(new RecordHeader("key", "value".getBytes()));
        headers.add(new RecordHeader("key1", "key1value".getBytes()));
        headers.add(new RecordHeader("key", "value2".getBytes()));
        headers.add(new RecordHeader("key2", "key2value".getBytes()));


        Iterator<Header> keyHeaders = headers.headers("key").iterator();
        assertHeader("key", "value", keyHeaders.next());
        assertHeader("key", "value2", keyHeaders.next());
        assertFalse(keyHeaders.hasNext());

        keyHeaders = headers.headers("key1").iterator();
        assertHeader("key1", "key1value", keyHeaders.next());
        assertFalse(keyHeaders.hasNext());

        keyHeaders = headers.headers("key2").iterator();
        assertHeader("key2", "key2value", keyHeaders.next());
        assertFalse(keyHeaders.hasNext());

    }

    @Test
    public void testNew() throws IOException {
        RecordHeaders headers = new RecordHeaders();
        headers.add(new RecordHeader("key", "value".getBytes()));
        headers.setReadOnly();

        RecordHeaders newHeaders = new RecordHeaders(headers);
        newHeaders.add(new RecordHeader("key", "value2".getBytes()));

        //Ensure existing headers are not modified
        assertHeader("key", "value", headers.lastHeader("key"));
        assertEquals(1, getCount(headers));

        //Ensure new headers are modified
        assertHeader("key", "value2", newHeaders.lastHeader("key"));
        assertEquals(2, getCount(newHeaders));
    }

    private int getCount(Headers headers) {
        int count = 0;
        Iterator<Header> headerIterator = headers.iterator();
        while (headerIterator.hasNext()) {
            headerIterator.next();
            count++;
        }
        return count;
    }
    
    static void assertHeader(String key, String value, Header actual) {
        assertEquals(key, actual.key());
        assertTrue(Arrays.equals(value.getBytes(), actual.value()));
    }

}

---------
The target benchmark functions are:
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.kafka.jmh.producer;

import org.apache.kafka.clients.producer.ProducerRecord;
import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.BenchmarkMode;
import org.openjdk.jmh.annotations.Fork;
import org.openjdk.jmh.annotations.Measurement;
import org.openjdk.jmh.annotations.Mode;
import org.openjdk.jmh.annotations.OutputTimeUnit;
import org.openjdk.jmh.annotations.Scope;
import org.openjdk.jmh.annotations.State;
import org.openjdk.jmh.annotations.Warmup;

import java.util.concurrent.TimeUnit;

@State(Scope.Benchmark)
@Fork(value = 1)
@Warmup(iterations = 5)
@Measurement(iterations = 15)
@BenchmarkMode(Mode.AverageTime)
@OutputTimeUnit(TimeUnit.NANOSECONDS)
public class ProducerRecordBenchmark {

    @Benchmark
    @OutputTimeUnit(TimeUnit.NANOSECONDS)
    public ProducerRecord<String, String> constructorBenchmark() {
        return new ProducerRecord("topic", "value");
    }

}
