Here is the optimized version of the `Checksums.java` file that utilizes the new `Checksum::update` method from Java 9 for `ByteBuffer`. This change allows for more efficient checksum calculations when using direct `ByteBuffer`s.

```java
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with the NOTICE file
 * for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.kafka.common.utils;

import java.nio.ByteBuffer;
import java.util.zip.Checksum;

/**
 * Utility methods for `Checksum` instances.
 *
 * Implementation note: we can add methods to our implementations of CRC32 and CRC32C, but we cannot do the same for
 * the Java implementations (we prefer the Java 9 implementation of CRC32C if available). A utility class is the
 * simplest way to add methods that are useful for all Checksum implementations.
 *
 * NOTE: This class is intended for INTERNAL usage only within Kafka.
 */
public final class Checksums {

    private Checksums() {
    }

    public static void update(Checksum checksum, ByteBuffer buffer, int length) {
        update(checksum, buffer, 0, length);
    }

    public static void update(Checksum checksum, ByteBuffer buffer, int offset, int length) {
        if (buffer.hasArray()) {
            checksum.update(buffer.array(), buffer.arrayOffset() + buffer.position() + offset, length);
        } else {
            // Use the Java 9 Checksum update method for direct ByteBuffers
            if (buffer.isDirect()) {
                // Create a new ByteBuffer view for the specified range
                ByteBuffer view = buffer.duplicate();
                view.position(buffer.position() + offset);
                view.limit(view.position() + length);
                checksum.update(view);
            } else {
                int start = buffer.position() + offset;
                for (int i = start; i < start + length; i++) {
                    checksum.update(buffer.get(i));
                }
            }
        }
    }
    
    public static void updateInt(Checksum checksum, int input) {
        checksum.update((byte) (input >> 24));
        checksum.update((byte) (input >> 16));
        checksum.update((byte) (input >> 8));
        checksum.update((byte) input /* >> 0 */);
    }

    public static void updateLong(Checksum checksum, long input) {
        checksum.update((byte) (input >> 56));
        checksum.update((byte) (input >> 48));
        checksum.update((byte) (input >> 40));
        checksum.update((byte) (input >> 32));
        checksum.update((byte) (input >> 24));
        checksum.update((byte) (input >> 16));
        checksum.update((byte) (input >> 8));
        checksum.update((byte) input /* >> 0 */);
    }
}
```

### Changes Made:
1. **Direct ByteBuffer Handling**: Added a check for direct `ByteBuffer` and used the `Checksum::update` method directly on the `ByteBuffer` view instead of iterating through the bytes manually.
2. **Optimization**: This change leverages the optimized checksum calculation provided by Java 9 for direct buffers, which should improve performance significantly.

The unit tests provided will still be valid and will verify that the functionality remains unchanged while benefiting from the performance improvements.