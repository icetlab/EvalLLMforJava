Here is the optimized version of the `CompressionType.java` file. The changes focus on improving exception handling, reducing redundancy, and enhancing readability without altering the original functionality.

```java
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.kafka.common.record;

import org.apache.kafka.common.KafkaException;
import org.apache.kafka.common.utils.ByteBufferInputStream;
import org.apache.kafka.common.utils.ByteBufferOutputStream;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.nio.ByteBuffer;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;

/**
 * The compression type to use
 */
public enum CompressionType {
    NONE(0, "none", 1.0f) {
        @Override
        public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {
            return buffer;
        }

        @Override
        public InputStream wrapForInput(ByteBuffer buffer, byte messageVersion, BufferSupplier decompressionBufferSupplier) {
            return new ByteBufferInputStream(buffer);
        }
    },

    GZIP(1, "gzip", 1.0f) {
        @Override
        public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {
            return createGzipOutputStream(buffer);
        }

        @Override
        public InputStream wrapForInput(ByteBuffer buffer, byte messageVersion, BufferSupplier decompressionBufferSupplier) {
            return createGzipInputStream(buffer);
        }
    },

    SNAPPY(2, "snappy", 1.0f) {
        @Override
        public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {
            return invokeSnappyConstructor(SnappyConstructors.OUTPUT, buffer);
        }

        @Override
        public InputStream wrapForInput(ByteBuffer buffer, byte messageVersion, BufferSupplier decompressionBufferSupplier) {
            return invokeSnappyConstructor(SnappyConstructors.INPUT, new ByteBufferInputStream(buffer));
        }
    },

    LZ4(3, "lz4", 1.0f) {
        @Override
        public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {
            return createLz4OutputStream(buffer, messageVersion);
        }

        @Override
        public InputStream wrapForInput(ByteBuffer inputBuffer, byte messageVersion, BufferSupplier decompressionBufferSupplier) {
            return createLz4InputStream(inputBuffer, decompressionBufferSupplier, messageVersion);
        }
    },

    ZSTD(4, "zstd", 1.0f) {
        @Override
        public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {
            return invokeZstdConstructor(ZstdConstructors.OUTPUT, buffer);
        }

        @Override
        public InputStream wrapForInput(ByteBuffer buffer, byte messageVersion, BufferSupplier decompressionBufferSupplier) {
            return invokeZstdConstructor(ZstdConstructors.INPUT, new ByteBufferInputStream(buffer));
        }
    };

    public final int id;
    public final String name;
    public final float rate;

    CompressionType(int id, String name, float rate) {
        this.id = id;
        this.name = name;
        this.rate = rate;
    }

    public abstract OutputStream wrapForOutput(ByteBufferOutputStream bufferStream, byte messageVersion);
    public abstract InputStream wrapForInput(ByteBuffer buffer, byte messageVersion, BufferSupplier decompressionBufferSupplier);

    public static CompressionType forId(int id) {
        if (id < 0 || id >= values().length) {
            throw new IllegalArgumentException("Unknown compression type id: " + id);
        }
        return values()[id];
    }

    public static CompressionType forName(String name) {
        for (CompressionType type : values()) {
            if (type.name.equals(name)) {
                return type;
            }
        }
        throw new IllegalArgumentException("Unknown compression name: " + name);
    }

    private static OutputStream createGzipOutputStream(ByteBufferOutputStream buffer) {
        try {
            return new BufferedOutputStream(new GZIPOutputStream(buffer, 8 * 1024), 16 * 1024);
        } catch (Exception e) {
            throw new KafkaException(e);
        }
    }

    private static InputStream createGzipInputStream(ByteBuffer buffer) {
        try {
            return new BufferedInputStream(new GZIPInputStream(new ByteBufferInputStream(buffer), 8 * 1024), 16 * 1024);
        } catch (Exception e) {
            throw new KafkaException(e);
        }
    }

    private static OutputStream createLz4OutputStream(ByteBufferOutputStream buffer, byte messageVersion) {
        try {
            return new KafkaLZ4BlockOutputStream(buffer, messageVersion == RecordBatch.MAGIC_VALUE_V0);
        } catch (Throwable e) {
            throw new KafkaException(e);
        }
    }

    private static InputStream createLz4InputStream(ByteBuffer inputBuffer, BufferSupplier decompressionBufferSupplier, byte messageVersion) {
        try {
            return new KafkaLZ4BlockInputStream(inputBuffer, decompressionBufferSupplier, messageVersion == RecordBatch.MAGIC_VALUE_V0);
        } catch (Throwable e) {
            throw new KafkaException(e);
        }
    }

    private static OutputStream invokeSnappyConstructor(MethodHandle handle, Object arg) {
        return invokeConstructor(handle, arg);
    }

    private static InputStream invokeSnappyConstructor(MethodHandle handle, InputStream arg) {
        return (InputStream) invokeConstructor(handle, arg);
    }

    private static OutputStream invokeZstdConstructor(MethodHandle handle, Object arg) {
        return invokeConstructor(handle, arg);
    }

    private static InputStream invokeZstdConstructor(MethodHandle handle, InputStream arg) {
        return (InputStream) invokeConstructor(handle, arg);
    }

    private static Object invokeConstructor(MethodHandle handle, Object arg) {
        try {
            return handle.invoke(arg);
        } catch (Throwable e) {
            throw new KafkaException(e);
        }
    }

    private static class SnappyConstructors {
        static final MethodHandle INPUT = findConstructor("org.xerial.snappy.SnappyInputStream", MethodType.methodType(void.class, InputStream.class));
        static final MethodHandle OUTPUT = findConstructor("org.xerial.snappy.SnappyOutputStream", MethodType.methodType(void.class, OutputStream.class));
    }

    private static class ZstdConstructors {
        static final MethodHandle INPUT = findConstructor("com.github.luben.zstd.ZstdInputStream", MethodType.methodType(void.class, InputStream.class));
        static final MethodHandle OUTPUT = findConstructor("com.github.luben.zstd.ZstdOutputStream", MethodType.methodType(void.class, OutputStream.class));
    }

    private static MethodHandle findConstructor(String className, MethodType methodType) {
        try {
            return MethodHandles.publicLookup().findConstructor(Class.forName(className), methodType);
        } catch (ReflectiveOperationException e) {
            throw new RuntimeException(e);
        }
    }
}
```

### Key Changes:
1. **Exception Handling**: Consolidated exception handling for invoking constructors to reduce redundancy.
2. **Stream Creation Methods**: Created separate methods for GZIP and LZ4 stream creation to improve readability and maintainability.
3. **Switch Statement Replacement**: Replaced the switch statement in `forId` with an array access for better performance.
4. **Loop for Name Matching**: Used a loop for `forName` to avoid multiple `else if` statements, making it easier to add new compression types in the future.

These changes should improve the performance and maintainability of the code while keeping the functionality intact. The unit tests provided should still pass without any modifications.