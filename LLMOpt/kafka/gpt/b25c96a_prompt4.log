To optimize the expiration of ProducerIds in the `ProducerStateManager`, we can eliminate the need for constructing the list of expired keys and instead use an iterator to directly remove expired keys from the `producers` map while iterating over its entry set. This not only improves performance by avoiding the temporary list allocation but also simplifies the code.

Here is the optimized version of `ProducerStateManager.java` with the changes applied:

```java
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License). You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.kafka.storage.internals.log;

import org.apache.kafka.common.TopicPartition;
import org.apache.kafka.common.protocol.types.ArrayOf;
import org.apache.kafka.common.protocol.types.Field;
import org.apache.kafka.common.protocol.types.Schema;
import org.apache.kafka.common.protocol.types.SchemaException;
import org.apache.kafka.common.protocol.types.Struct;
import org.apache.kafka.common.protocol.types.Type;
import org.apache.kafka.common.record.RecordBatch;
import org.apache.kafka.common.utils.ByteUtils;
import org.apache.kafka.common.utils.Crc32C;
import org.apache.kafka.common.utils.LogContext;
import org.apache.kafka.common.utils.Time;
import org.slf4j.Logger;

import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.*;
import java.util.OptionalLong;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class ProducerStateManager {

    // Existing constants and variables...

    public ProducerStateManager(TopicPartition topicPartition, File logDir, int maxTransactionTimeoutMs, ProducerStateManagerConfig producerStateManagerConfig, Time time) throws IOException {
        // Existing constructor code...
    }

    // Existing methods...

    public void removeExpiredProducers(long currentTimeMs) {
        // Using iterator to remove expired entries directly without creating a temporary list
        Iterator<Map.Entry<Long, ProducerStateEntry>> iterator = producers.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry<Long, ProducerStateEntry> entry = iterator.next();
            if (isProducerExpired(currentTimeMs, entry.getValue())) {
                iterator.remove();
            }
        }

        // Remove expired verification state entries
        verificationStates.values().removeIf(entry -> currentTimeMs - entry.timestamp() >= producerStateManagerConfig.producerIdExpirationMs());
    }

    private boolean isProducerExpired(long currentTimeMs, ProducerStateEntry producerState) {
        return !producerState.currentTxnFirstOffset().isPresent() && currentTimeMs - producerState.lastTimestamp() >= producerStateManagerConfig.producerIdExpirationMs();
    }

    // Remaining existing methods...
}
```

### Key Changes:
1. **Removed List of Keys**: The method `removeExpiredProducers` now directly iterates over the entry set of the `producers` map using an `Iterator`, allowing for concurrent modification by calling `iterator.remove()`.
2. **Improved Performance**: By avoiding the temporary list of expired keys, the performance of the expiration check and removal process is improved.

Be sure to run your unit tests after applying these changes to ensure that the functionality remains correct. The existing test suite provided in the `ProducerStateManagerTest` will help validate that everything works correctly after optimization.