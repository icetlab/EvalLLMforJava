Here is the optimized version of the `Checksums.java` file. The optimizations focus on improving the performance of the `update` methods by minimizing the number of method calls and leveraging the `ByteBuffer` more effectively.

```java
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.kafka.common.utils;

import java.nio.ByteBuffer;
import java.util.zip.Checksum;

/**
 * Utility methods for `Checksum` instances.
 *
 * Implementation note: we can add methods to our implementations of CRC32 and CRC32C, but we cannot do the same for
 * the Java implementations (we prefer the Java 9 implementation of CRC32C if available). A utility class is the
 * simplest way to add methods that are useful for all Checksum implementations.
 *
 * NOTE: This class is intended for INTERNAL usage only within Kafka.
 */
public final class Checksums {

    private Checksums() {
    }

    public static void update(Checksum checksum, ByteBuffer buffer, int length) {
        update(checksum, buffer, 0, length);
    }

    public static void update(Checksum checksum, ByteBuffer buffer, int offset, int length) {
        if (buffer.hasArray()) {
            int start = buffer.position() + buffer.arrayOffset() + offset;
            checksum.update(buffer.array(), start, length);
        } else {
            int start = buffer.position() + offset;
            for (int i = 0; i < length; i++) {
                checksum.update(buffer.get(start + i));
            }
        }
    }
    
    public static void updateInt(Checksum checksum, int input) {
        checksum.update(new byte[]{
            (byte) (input >> 24),
            (byte) (input >> 16),
            (byte) (input >> 8),
            (byte) input
        }, 0, 4);
    }

    public static void updateLong(Checksum checksum, long input) {
        checksum.update(new byte[]{
            (byte) (input >> 56),
            (byte) (input >> 48),
            (byte) (input >> 40),
            (byte) (input >> 32),
            (byte) (input >> 24),
            (byte) (input >> 16),
            (byte) (input >> 8),
            (byte) input
        }, 0, 8);
    }
}
```

### Changes Made:
1. **Batch Update for Bytes**: In the `updateInt` and `updateLong` methods, instead of calling `checksum.update` multiple times for each byte, I created a byte array and called `checksum.update` once with that array. This reduces the overhead of multiple method calls.

2. **Simplified Loop in `update` Method**: The loop in the `update` method that processes the `ByteBuffer` when it does not have an array has been simplified to directly use the calculated start index.

These changes should improve the performance of the `Checksums` utility methods while maintaining the original functionality. The unit tests provided will still be valid and should pass without modification.