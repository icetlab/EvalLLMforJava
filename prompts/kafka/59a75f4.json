{
  "id": "59a75f4",
  "repository": "apache/kafka",
  "commit_hash": "59a75f4422a68d2e1edc661264058f040139fde5",
  "source_code": "clients/src/main/java/org/apache/kafka/common/internals/PartitionStates.java core/src/main/scala/kafka/server/AbstractFetcherThread.scala",
  "jmh_case": "ReplicaFetcherThreadBenchmark.testFetcher",
  "unittest": "clients/src/test/java/org/apache/kafka/common/internals/PartitionStatesTest.java",
  "persona": "You are a software performance assistant. Your task is to improve the performance of the source code.",
  "description": "The use of FetchSessionHandler means that we maintain a partitionStates hashmap in the replica fetcher, and a sessionPartitions hashmap in the FetchSessionHandler. On each incremental fetch session pass, we need to reconcile these two hashmaps to determine which partitions were added/updated and which partitions were removed. This reconciliation process is especially expensive, requiring multiple passes over the fetching partitions, and hashmap remove and puts for most partitions. The replica fetcher could be smarter by maintaining the fetch session updated hashmap containing FetchRequest.PartitionData(s) directly, as well as removed partitions list so that these do not need to be generated by reconciled on each fetch pass. Remove Unnecessary lookup in Fetch Building. Get rid of partitionStates that creates a new PartitionState for each state since all the callers do not require it to be a Seq."
}