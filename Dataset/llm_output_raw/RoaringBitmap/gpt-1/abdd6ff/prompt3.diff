diff --git a/bsi/src/main/java/org/roaringbitmap/bsi/buffer/BitSliceIndexBase.java b/bsi/src/main/java/org/roaringbitmap/bsi/buffer/BitSliceIndexBase.java
index c40c836b..6b5dfce4 100644
--- a/bsi/src/main/java/org/roaringbitmap/bsi/buffer/BitSliceIndexBase.java
+++ b/bsi/src/main/java/org/roaringbitmap/bsi/buffer/BitSliceIndexBase.java
@@ -22,6 +22,7 @@ import java.util.function.Function;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
+import java.util.Arrays;
 
 /**
  * ParallelAggregationBase
@@ -318,12 +319,21 @@ public class BitSliceIndexBase {
     MutableRoaringBitmap F = ImmutableRoaringBitmap.or(G, E);
     long n = F.getLongCardinality() - k;
     if (n > 0) {
-      // TODO: make faster
-      IntIterator i = F.getIntIterator();
       MutableRoaringBitmap turnoff = new MutableRoaringBitmap();
-      while (i.hasNext() && n > 0) {
-        turnoff.add(i.next());
-        --n;
+      BatchIterator batchIterator = F.getBatchIterator();
+      long remaining = n;
+      while (batchIterator.hasNext() && remaining > 0) {
+        int batchSize = (int) Math.min(remaining, 1024);
+        int[] buffer = new int[batchSize];
+        int count = batchIterator.nextBatch(buffer);
+        if (count > 0) {
+          if (count < buffer.length) {
+            turnoff.add(Arrays.copyOf(buffer, count));
+          } else {
+            turnoff.add(buffer);
+          }
+          remaining -= count;
+        }
       }
       F.andNot(turnoff);
     }
