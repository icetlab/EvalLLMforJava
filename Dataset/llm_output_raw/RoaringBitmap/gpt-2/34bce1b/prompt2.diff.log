I refactored `shiftLeftFromSpecifiedPosition` to eliminate the temporary byte array and use direct bitwise operations and a small fixed‚Äêcount loop, avoiding allocations and reducing overhead while preserving existing behavior.

```json
[
  {
    "filepath": "../RoaringBitmap/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java",
    "search": "public static int shiftLeftFromSpecifiedPosition(int v, int pos, int count) {\n    byte[] initialVal = toBDBytes(v);\n    System.arraycopy(initialVal, pos + 1, initialVal, pos, count);\n    return fromBDBytes(initialVal);\n  }",
    "replace": "public static int shiftLeftFromSpecifiedPosition(int v, int pos, int count) {\n    if (count <= 0) {\n      return v;\n    }\n    int original = v;\n    int result = v;\n    for (int i = 0; i < count; i++) {\n      int destPos = pos + i;\n      int srcPos = destPos + 1;\n      int destShift = (3 - destPos) << 3;\n      int srcShift = (3 - srcPos) << 3;\n      // clear destination byte\n      result &= ~(0xFF << destShift);\n      // set destination byte from original value\n      int srcByte = (original >>> srcShift) & 0xFF;\n      result |= (srcByte << destShift);\n    }\n    return result;\n  }"
  }
]
```