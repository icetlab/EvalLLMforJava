The performance issue is that `getCardinality()` can be expensive for `RunContainer` instances. The `checkedAdd` method in both `RoaringBitmap` and `MutableRoaringBitmap` calls `getCardinality()` before and after an addition to determine if a new value was added. This is inefficient for run-length encoded containers.

My improvement avoids these expensive `getCardinality()` calls for `RunContainer` and `MappeableRunContainer`. Instead, I first use the `contains()` method, which is much faster for these container types as it only requires a search over the runs, not a full summation of run lengths.

If `contains()` returns true, no value is added, and the method can return `false` immediately. If `contains()` returns false, we know a new value will be added, so we can perform the `add` operation and return `true` without needing to re-compute and compare cardinalities. This optimization is specifically targeted at run containers, while the logic for other container types remains unchanged.

```json
[
  {
    "filepath": "../RoaringBitmap/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java",
    "search": "      Container c = highLowContainer.getContainerAtIndex(i);\n      int oldCard = c.getCardinality();\n      // we need to keep the newContainer if a switch between containers type\n      // occur, in order to get the new cardinality\n      Container newCont = c.add(Util.lowbits(x));\n      highLowContainer.setContainerAtIndex(i, newCont);\n      if (newCont.getCardinality() > oldCard) {\n        return true;\n      }",
    "replace": "      Container c = highLowContainer.getContainerAtIndex(i);\n      if (c instanceof RunContainer) {\n        if (c.contains(Util.lowbits(x))) {\n          return false;\n        }\n        highLowContainer.setContainerAtIndex(i, c.add(Util.lowbits(x)));\n        return true;\n      }\n      int oldCard = c.getCardinality();\n      // we need to keep the newContainer if a switch between containers type\n      // occur, in order to get the new cardinality\n      Container newCont = c.add(Util.lowbits(x));\n      highLowContainer.setContainerAtIndex(i, newCont);\n      if (newCont.getCardinality() > oldCard) {\n        return true;\n      }"
  },
  {
    "filepath": "../RoaringBitmap/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java",
    "search": "      MappeableContainer C = highLowContainer.getContainerAtIndex(i);\n      int oldcard = C.getCardinality();\n      C = C.add(BufferUtil.lowbits(x));\n      getMappeableRoaringArray().setContainerAtIndex(i, C);\n      return C.getCardinality() > oldcard;",
    "replace": "      MappeableContainer C = highLowContainer.getContainerAtIndex(i);\n      if (C instanceof MappeableRunContainer) {\n        if (C.contains(BufferUtil.lowbits(x))) {\n          return false;\n        }\n        getMappeableRoaringArray().setContainerAtIndex(i, C.add(BufferUtil.lowbits(x)));\n        return true;\n      }\n      int oldcard = C.getCardinality();\n      C = C.add(BufferUtil.lowbits(x));\n      getMappeableRoaringArray().setContainerAtIndex(i, C);\n      return C.getCardinality() > oldcard;"
  }
]
```