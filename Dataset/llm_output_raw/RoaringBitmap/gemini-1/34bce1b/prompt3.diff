diff --git a/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java b/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
index ed36adf0..32934234 100644
--- a/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
+++ b/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
@@ -50,9 +50,22 @@ public class IntegerUtil {
    * @return a fresh integer value
    */
   public static int shiftLeftFromSpecifiedPosition(int v, int pos, int count) {
-    byte[] initialVal = toBDBytes(v);
-    System.arraycopy(initialVal, pos + 1, initialVal, pos, count);
-    return fromBDBytes(initialVal);
+    if (count == 0) {
+      return v;
+    }
+    // Replicate System.arraycopy bounds checks to preserve original behavior for invalid arguments.
+    if (pos < 0 || count < 0 || pos + 1 + count > 4) {
+      throw new ArrayIndexOutOfBoundsException();
+    }
+
+    // Mask for bytes that are preserved (high and low parts).
+    int preservedMask = (pos == 0 ? 0 : (-1 << (32 - pos * 8))) | (-1 >>> ((pos + count) * 8));
+
+    // The new middle part is constructed from v's bytes shifted left by one byte,
+    // masked to the area of replaced bytes.
+    int middlePart = (v << 8) & ~preservedMask;
+
+    return (v & preservedMask) | middlePart;
   }
 
   /**
