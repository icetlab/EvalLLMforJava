I have introduced an “initial scheduling” flag into `ScheduledFutureTask` so that the task itself can be used to schedule its insertion into the priority queue when submitted from another thread, eliminating the per-task `Runnable` wrapper allocation. The executor now provides a `scheduleTask(...)` method to handle id assignment and queue insertion. 

```json
[
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java",
    "search": "    final void removeScheduled(final ScheduledFutureTask<?> task) {\n        if (inEventLoop()) {\n            scheduledTaskQueue().removeTyped(task);\n        } else {\n            lazyExecute(new Runnable() {\n                @Override\n                public void run() {\n                    scheduledTaskQueue().removeTyped(task);\n                }\n            });\n        }\n    }",
    "replace": "    final void removeScheduled(final ScheduledFutureTask<?> task) {\n        if (inEventLoop()) {\n            scheduledTaskQueue().removeTyped(task);\n        } else {\n            lazyExecute(new Runnable() {\n                @Override\n                public void run() {\n                    scheduledTaskQueue().removeTyped(task);\n                }\n            });\n        }\n    }\n\n    /**\n     * Internal scheduling action used to add a task to the scheduled task queue in the event loop.\n     */\n    void scheduleTask(final ScheduledFutureTask<?> task) {\n        scheduledTaskQueue().add(task.setId(nextTaskId++));\n    }"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java",
    "search": "if (inEventLoop()) {\n            scheduledTaskQueue().add(task.setId(nextTaskId++));\n        } else {\n            final long deadlineNanos = task.deadlineNanos();\n            final Runnable addToQueue = new Runnable() {\n                @Override\n                public void run() {\n                    scheduledTaskQueue().add(task.setId(nextTaskId++));\n                }\n            };\n            if (beforeScheduledTaskSubmitted(deadlineNanos)) {\n                execute(addToQueue);\n            } else {\n                lazyExecute(addToQueue);\n                // Second hook after scheduling to facilitate race-avoidance\n                if (afterScheduledTaskSubmitted(deadlineNanos)) {\n                    execute(WAKEUP_TASK);\n                }\n            }\n        }",
    "replace": "if (inEventLoop()) {\n            scheduledTaskQueue().add(task.setId(nextTaskId++));\n        } else {\n            final long deadlineNanos = task.deadlineNanos();\n            // Use task itself to schedule without extra allocation\n            task.setScheduleTask(true);\n            if (beforeScheduledTaskSubmitted(deadlineNanos)) {\n                execute(task);\n            } else {\n                lazyExecute(task);\n                // Second hook after scheduling to facilitate race-avoidance\n                if (afterScheduledTaskSubmitted(deadlineNanos)) {\n                    execute(WAKEUP_TASK);\n                }\n            }\n        }"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java",
    "search": "import io.netty.util.internal.PriorityQueueNode;",
    "replace": "import io.netty.util.internal.PriorityQueueNode;\nimport io.netty.util.concurrent.AbstractScheduledEventExecutor;"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java",
    "search": "    private static final long START_TIME = System.nanoTime();",
    "replace": "    private static final long START_TIME = System.nanoTime();\n    // Flag indicating this run() invocation is for initial scheduling\n    private boolean initialScheduled;"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java",
    "search": "    private static long validatePeriod(long period) {\n        if (period == 0) {\n            throw new IllegalArgumentException(\"period: 0 (expected: != 0)\");\n        }\n        return period;\n    }",
    "replace": "    private static long validatePeriod(long period) {\n        if (period == 0) {\n            throw new IllegalArgumentException(\"period: 0 (expected: != 0)\");\n        }\n        return period;\n    }\n\n    /**\n     * Setter for initial scheduling flag.\n     */\n    ScheduledFutureTask<V> setScheduleTask(boolean initial) {\n        this.initialScheduled = initial;\n        return this;\n    }"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java",
    "search": "@Override\n    public void run() {\n        assert executor().inEventLoop();",
    "replace": "@Override\n    public void run() {\n        if (initialScheduled) {\n            initialScheduled = false;\n            AbstractScheduledEventExecutor exec = (AbstractScheduledEventExecutor) executor();\n            exec.scheduleTask(this);\n            return;\n        }\n        assert executor().inEventLoop();"
  }
]
```