I’ve added a fast-path in both `copyMemory` methods so that small copies (≤ UNSAFE_COPY_THRESHOLD) bypass the loop and call `Unsafe.copyMemory` directly, reducing overhead on the common small-copy case.

```json
[
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/internal/PlatformDependent0.java",
    "search": "static void copyMemory(long srcAddr, long dstAddr, long length) {\n        //UNSAFE.copyMemory(srcAddr, dstAddr, length);\n        while (length > 0) {\n            long size = Math.min(length, UNSAFE_COPY_THRESHOLD);\n            UNSAFE.copyMemory(srcAddr, dstAddr, size);\n            length -= size;\n            srcAddr += size;\n            dstAddr += size;\n        }\n    }",
    "replace": "static void copyMemory(long srcAddr, long dstAddr, long length) {\n        if (length <= UNSAFE_COPY_THRESHOLD) {\n            UNSAFE.copyMemory(srcAddr, dstAddr, length);\n            return;\n        }\n        while (length > 0) {\n            long size = Math.min(length, UNSAFE_COPY_THRESHOLD);\n            UNSAFE.copyMemory(srcAddr, dstAddr, size);\n            length -= size;\n            srcAddr += size;\n            dstAddr += size;\n        }\n    }"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/internal/PlatformDependent0.java",
    "search": "static void copyMemory(Object src, long srcOffset, Object dst, long dstOffset, long length) {\n        //UNSAFE.copyMemory(src, srcOffset, dst, dstOffset, length);\n        while (length > 0) {\n            long size = Math.min(length, UNSAFE_COPY_THRESHOLD);\n            UNSAFE.copyMemory(src, srcOffset, dst, dstOffset, size);\n            length -= size;\n            srcOffset += size;\n            dstOffset += size;\n        }\n    }",
    "replace": "static void copyMemory(Object src, long srcOffset, Object dst, long dstOffset, long length) {\n        if (length <= UNSAFE_COPY_THRESHOLD) {\n            UNSAFE.copyMemory(src, srcOffset, dst, dstOffset, length);\n            return;\n        }\n        while (length > 0) {\n            long size = Math.min(length, UNSAFE_COPY_THRESHOLD);\n            UNSAFE.copyMemory(src, srcOffset, dst, dstOffset, size);\n            length -= size;\n            srcOffset += size;\n            dstOffset += size;\n        }\n    }"
  }
]
```