The changes below replace the per-byte System.arraycopy calls in HexUtil.hexDump with direct table lookups and assignments. This eliminates the overhead of arraycopy and should improve throughput for hex dumping both ByteBufs and byte arrays.

```json
[
  {
    "filepath": "../netty/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java",
    "search": "for (; srcIdx < endIndex; srcIdx ++, dstIdx += 2) {\n              System.arraycopy(\n                  HEXDUMP_TABLE, buffer.getUnsignedByte(srcIdx) << 1,\n                  buf, dstIdx, 2);\n            }",
    "replace": "for (; srcIdx < endIndex; srcIdx ++, dstIdx += 2) {\n    int v = buffer.getUnsignedByte(srcIdx) & 0xFF;\n    int tableIndex = v << 1;\n    buf[dstIdx]     = HEXDUMP_TABLE[tableIndex];\n    buf[dstIdx + 1] = HEXDUMP_TABLE[tableIndex + 1];\n}"
  },
  {
    "filepath": "../netty/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java",
    "search": "for (; srcIdx < endIndex; srcIdx ++, dstIdx += 2) {\n                System.arraycopy(\n                    HEXDUMP_TABLE, (array[srcIdx] & 0xFF) << 1,\n                    buf, dstIdx, 2);\n            }",
    "replace": "for (; srcIdx < endIndex; srcIdx ++, dstIdx += 2) {\n    int v = array[srcIdx] & 0xFF;\n    int tableIndex = v << 1;\n    buf[dstIdx]     = HEXDUMP_TABLE[tableIndex];\n    buf[dstIdx + 1] = HEXDUMP_TABLE[tableIndex + 1];\n}"
  }
]
```