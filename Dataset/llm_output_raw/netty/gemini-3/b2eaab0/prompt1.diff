diff --git a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
index df45d1614a..0d01b843f6 100644
--- a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
@@ -635,18 +635,29 @@ final class PlatformDependent0 {
             }
         }
 
-        if (remainingBytes >= 4) {
-            remainingBytes -= 4;
-            if (UNSAFE.getInt(bytes1, baseOffset1 + remainingBytes) !=
-                UNSAFE.getInt(bytes2, baseOffset2 + remainingBytes)) {
-                return false;
-            }
-        }
-        if (remainingBytes >= 2) {
+        switch (remainingBytes) {
+        case 7:
+            return UNSAFE.getInt(bytes1, baseOffset1) == UNSAFE.getInt(bytes2, baseOffset2) &&
+                   UNSAFE.getChar(bytes1, baseOffset1 + 4) == UNSAFE.getChar(bytes2, baseOffset2 + 4) &&
+                   UNSAFE.getByte(bytes1, baseOffset1 + 6) == UNSAFE.getByte(bytes2, baseOffset2 + 6);
+        case 6:
+            return UNSAFE.getInt(bytes1, baseOffset1) == UNSAFE.getInt(bytes2, baseOffset2) &&
+                   UNSAFE.getChar(bytes1, baseOffset1 + 4) == UNSAFE.getChar(bytes2, baseOffset2 + 4);
+        case 5:
+            return UNSAFE.getInt(bytes1, baseOffset1) == UNSAFE.getInt(bytes2, baseOffset2) &&
+                   UNSAFE.getByte(bytes1, baseOffset1 + 4) == UNSAFE.getByte(bytes2, baseOffset2 + 4);
+        case 4:
+            return UNSAFE.getInt(bytes1, baseOffset1) == UNSAFE.getInt(bytes2, baseOffset2);
+        case 3:
             return UNSAFE.getChar(bytes1, baseOffset1) == UNSAFE.getChar(bytes2, baseOffset2) &&
-                   (remainingBytes == 2 || bytes1[startPos1 + 2] == bytes2[startPos2 + 2]);
+                   UNSAFE.getByte(bytes1, baseOffset1 + 2) == UNSAFE.getByte(bytes2, baseOffset2 + 2);
+        case 2:
+            return UNSAFE.getChar(bytes1, baseOffset1) == UNSAFE.getChar(bytes2, baseOffset2);
+        case 1:
+            return UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
+        default:
+            return true;
         }
-        return bytes1[startPos1] == bytes2[startPos2];
     }
 
     static int equalsConstantTime(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {
@@ -703,17 +714,29 @@ final class PlatformDependent0 {
             }
         }
 
-        if (remainingBytes >= 4) {
-            remainingBytes -= 4;
-            if (UNSAFE.getInt(bytes, baseOffset + remainingBytes) != 0) {
-                return false;
-            }
-        }
-        if (remainingBytes >= 2) {
+        switch (remainingBytes) {
+        case 7:
+            return UNSAFE.getInt(bytes, baseOffset) == 0 &&
+                   UNSAFE.getChar(bytes, baseOffset + 4) == 0 &&
+                   UNSAFE.getByte(bytes, baseOffset + 6) == 0;
+        case 6:
+            return UNSAFE.getInt(bytes, baseOffset) == 0 &&
+                   UNSAFE.getChar(bytes, baseOffset + 4) == 0;
+        case 5:
+            return UNSAFE.getInt(bytes, baseOffset) == 0 &&
+                   UNSAFE.getByte(bytes, baseOffset + 4) == 0;
+        case 4:
+            return UNSAFE.getInt(bytes, baseOffset) == 0;
+        case 3:
             return UNSAFE.getChar(bytes, baseOffset) == 0 &&
-                    (remainingBytes == 2 || bytes[startPos + 2] == 0);
+                   UNSAFE.getByte(bytes, baseOffset + 2) == 0;
+        case 2:
+            return UNSAFE.getChar(bytes, baseOffset) == 0;
+        case 1:
+            return UNSAFE.getByte(bytes, baseOffset) == 0;
+        default:
+            return true;
         }
-        return bytes[startPos] == 0;
     }
 
     static int hashCodeAscii(byte[] bytes, int startPos, int length) {
