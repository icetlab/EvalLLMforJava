diff --git a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
index df45d1614a..3a0e7cf276 100644
--- a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
@@ -627,7 +627,7 @@ final class PlatformDependent0 {
         }
         final long baseOffset1 = BYTE_ARRAY_BASE_OFFSET + startPos1;
         final long baseOffset2 = BYTE_ARRAY_BASE_OFFSET + startPos2;
-        int remainingBytes = length & 7;
+        final int remainingBytes = length & 7;
         final long end = baseOffset1 + remainingBytes;
         for (long i = baseOffset1 - 8 + length, j = baseOffset2 - 8 + length; i >= end; i -= 8, j -= 8) {
             if (UNSAFE.getLong(bytes1, i) != UNSAFE.getLong(bytes2, j)) {
@@ -635,18 +635,29 @@ final class PlatformDependent0 {
             }
         }
 
-        if (remainingBytes >= 4) {
-            remainingBytes -= 4;
-            if (UNSAFE.getInt(bytes1, baseOffset1 + remainingBytes) !=
-                UNSAFE.getInt(bytes2, baseOffset2 + remainingBytes)) {
-                return false;
-            }
-        }
-        if (remainingBytes >= 2) {
-            return UNSAFE.getChar(bytes1, baseOffset1) == UNSAFE.getChar(bytes2, baseOffset2) &&
-                   (remainingBytes == 2 || bytes1[startPos1 + 2] == bytes2[startPos2 + 2]);
+        switch (remainingBytes) {
+            case 7:
+                return UNSAFE.getInt(bytes1, baseOffset1) == UNSAFE.getInt(bytes2, baseOffset2) &&
+                        UNSAFE.getShort(bytes1, baseOffset1 + 4) == UNSAFE.getShort(bytes2, baseOffset2 + 4) &&
+                        UNSAFE.getByte(bytes1, baseOffset1 + 6) == UNSAFE.getByte(bytes2, baseOffset2 + 6);
+            case 6:
+                return UNSAFE.getInt(bytes1, baseOffset1) == UNSAFE.getInt(bytes2, baseOffset2) &&
+                        UNSAFE.getShort(bytes1, baseOffset1 + 4) == UNSAFE.getShort(bytes2, baseOffset2 + 4);
+            case 5:
+                return UNSAFE.getInt(bytes1, baseOffset1) == UNSAFE.getInt(bytes2, baseOffset2) &&
+                        UNSAFE.getByte(bytes1, baseOffset1 + 4) == UNSAFE.getByte(bytes2, baseOffset2 + 4);
+            case 4:
+                return UNSAFE.getInt(bytes1, baseOffset1) == UNSAFE.getInt(bytes2, baseOffset2);
+            case 3:
+                return UNSAFE.getShort(bytes1, baseOffset1) == UNSAFE.getShort(bytes2, baseOffset2) &&
+                        UNSAFE.getByte(bytes1, baseOffset1 + 2) == UNSAFE.getByte(bytes2, baseOffset2 + 2);
+            case 2:
+                return UNSAFE.getShort(bytes1, baseOffset1) == UNSAFE.getShort(bytes2, baseOffset2);
+            case 1:
+                return UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
+            default:
+                return true;
         }
-        return bytes1[startPos1] == bytes2[startPos2];
     }
 
     static int equalsConstantTime(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {
@@ -660,34 +671,33 @@ final class PlatformDependent0 {
         }
         switch (remainingBytes) {
             case 7:
-                return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getInt(bytes1, baseOffset1 + 3) ^ UNSAFE.getInt(bytes2, baseOffset2 + 3)) |
-                        (UNSAFE.getChar(bytes1, baseOffset1 + 1) ^ UNSAFE.getChar(bytes2, baseOffset2 + 1)) |
-                        (UNSAFE.getByte(bytes1, baseOffset1) ^ UNSAFE.getByte(bytes2, baseOffset2)), 0);
+                result |= (UNSAFE.getInt(bytes1, baseOffset1) ^ UNSAFE.getInt(bytes2, baseOffset2)) |
+                        (UNSAFE.getShort(bytes1, baseOffset1 + 4) ^ UNSAFE.getShort(bytes2, baseOffset2 + 4)) |
+                        (UNSAFE.getByte(bytes1, baseOffset1 + 6) ^ UNSAFE.getByte(bytes2, baseOffset2 + 6));
+                break;
             case 6:
-                return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getInt(bytes1, baseOffset1 + 2) ^ UNSAFE.getInt(bytes2, baseOffset2 + 2)) |
-                        (UNSAFE.getChar(bytes1, baseOffset1) ^ UNSAFE.getChar(bytes2, baseOffset2)), 0);
+                result |= (UNSAFE.getInt(bytes1, baseOffset1) ^ UNSAFE.getInt(bytes2, baseOffset2)) |
+                        (UNSAFE.getShort(bytes1, baseOffset1 + 4) ^ UNSAFE.getShort(bytes2, baseOffset2 + 4));
+                break;
             case 5:
-                return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getInt(bytes1, baseOffset1 + 1) ^ UNSAFE.getInt(bytes2, baseOffset2 + 1)) |
-                        (UNSAFE.getByte(bytes1, baseOffset1) ^ UNSAFE.getByte(bytes2, baseOffset2)), 0);
+                result |= (UNSAFE.getInt(bytes1, baseOffset1) ^ UNSAFE.getInt(bytes2, baseOffset2)) |
+                        (UNSAFE.getByte(bytes1, baseOffset1 + 4) ^ UNSAFE.getByte(bytes2, baseOffset2 + 4));
+                break;
             case 4:
-                return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getInt(bytes1, baseOffset1) ^ UNSAFE.getInt(bytes2, baseOffset2)), 0);
+                result |= UNSAFE.getInt(bytes1, baseOffset1) ^ UNSAFE.getInt(bytes2, baseOffset2);
+                break;
             case 3:
-                return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getChar(bytes1, baseOffset1 + 1) ^ UNSAFE.getChar(bytes2, baseOffset2 + 1)) |
-                        (UNSAFE.getByte(bytes1, baseOffset1) ^ UNSAFE.getByte(bytes2, baseOffset2)), 0);
+                result |= (UNSAFE.getShort(bytes1, baseOffset1) ^ UNSAFE.getShort(bytes2, baseOffset2)) |
+                        (UNSAFE.getByte(bytes1, baseOffset1 + 2) ^ UNSAFE.getByte(bytes2, baseOffset2 + 2));
+                break;
             case 2:
-                return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getChar(bytes1, baseOffset1) ^ UNSAFE.getChar(bytes2, baseOffset2)), 0);
+                result |= UNSAFE.getShort(bytes1, baseOffset1) ^ UNSAFE.getShort(bytes2, baseOffset2);
+                break;
             case 1:
-                return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getByte(bytes1, baseOffset1) ^ UNSAFE.getByte(bytes2, baseOffset2)), 0);
-            default:
-                return ConstantTimeUtils.equalsConstantTime(result, 0);
+                result |= UNSAFE.getByte(bytes1, baseOffset1) ^ UNSAFE.getByte(bytes2, baseOffset2);
+                break;
         }
+        return ConstantTimeUtils.equalsConstantTime(result, 0);
     }
 
     static boolean isZero(byte[] bytes, int startPos, int length) {
@@ -695,7 +705,7 @@ final class PlatformDependent0 {
             return true;
         }
         final long baseOffset = BYTE_ARRAY_BASE_OFFSET + startPos;
-        int remainingBytes = length & 7;
+        final int remainingBytes = length & 7;
         final long end = baseOffset + remainingBytes;
         for (long i = baseOffset - 8 + length; i >= end; i -= 8) {
             if (UNSAFE.getLong(bytes, i) != 0) {
@@ -703,17 +713,29 @@ final class PlatformDependent0 {
             }
         }
 
-        if (remainingBytes >= 4) {
-            remainingBytes -= 4;
-            if (UNSAFE.getInt(bytes, baseOffset + remainingBytes) != 0) {
-                return false;
-            }
-        }
-        if (remainingBytes >= 2) {
-            return UNSAFE.getChar(bytes, baseOffset) == 0 &&
-                    (remainingBytes == 2 || bytes[startPos + 2] == 0);
+        switch (remainingBytes) {
+            case 7:
+                return UNSAFE.getInt(bytes, baseOffset) == 0 &&
+                        UNSAFE.getShort(bytes, baseOffset + 4) == 0 &&
+                        UNSAFE.getByte(bytes, baseOffset + 6) == 0;
+            case 6:
+                return UNSAFE.getInt(bytes, baseOffset) == 0 &&
+                        UNSAFE.getShort(bytes, baseOffset + 4) == 0;
+            case 5:
+                return UNSAFE.getInt(bytes, baseOffset) == 0 &&
+                        UNSAFE.getByte(bytes, baseOffset + 4) == 0;
+            case 4:
+                return UNSAFE.getInt(bytes, baseOffset) == 0;
+            case 3:
+                return UNSAFE.getShort(bytes, baseOffset) == 0 &&
+                        UNSAFE.getByte(bytes, baseOffset + 2) == 0;
+            case 2:
+                return UNSAFE.getShort(bytes, baseOffset) == 0;
+            case 1:
+                return UNSAFE.getByte(bytes, baseOffset) == 0;
+            default:
+                return true;
         }
-        return bytes[startPos] == 0;
     }
 
     static int hashCodeAscii(byte[] bytes, int startPos, int length) {
