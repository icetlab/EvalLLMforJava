diff --git a/common/src/main/java/io/netty/util/Recycler.java b/common/src/main/java/io/netty/util/Recycler.java
index dd7b2d73be..87d4b6be80 100644
--- a/common/src/main/java/io/netty/util/Recycler.java
+++ b/common/src/main/java/io/netty/util/Recycler.java
@@ -166,21 +166,18 @@ public abstract class Recycler<T> {
         }
         LocalPool<T> localPool = threadLocal.get();
         DefaultHandle<T> handle = localPool.claim();
-        T obj;
-        if (handle == null) {
-            handle = localPool.newHandle();
         if (handle != null) {
-                obj = newObject(handle);
-                handle.set(obj);
-            } else {
-                obj = newObject((Handle<T>) NOOP_HANDLE);
-            }
-        } else {
-            obj = handle.get();
+            return handle.get();
         }
 
+        handle = localPool.newHandle();
+        if (handle != null) {
+            T obj = newObject(handle);
+            handle.set(obj);
             return obj;
         }
+        return newObject((Handle<T>) NOOP_HANDLE);
+    }
 
     /**
      * @deprecated use {@link Handle#recycle(Object)}.
@@ -248,10 +245,10 @@ public abstract class Recycler<T> {
         }
 
         void toAvailable() {
-            int prev = STATE_UPDATER.getAndSet(this, STATE_AVAILABLE);
-            if (prev == STATE_AVAILABLE) {
-                throw new IllegalStateException("Object has been recycled already.");
+            if (STATE_UPDATER.compareAndSet(this, STATE_CLAIMED, STATE_AVAILABLE)) {
+                return;
             }
+            throw new IllegalStateException("Object has been recycled already.");
         }
     }
 
