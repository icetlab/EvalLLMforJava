diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackStaticTable.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackStaticTable.java
index 389d8ef150..c474e225f4 100644
--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackStaticTable.java
+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackStaticTable.java
@@ -34,7 +34,6 @@ package io.netty.handler.codec.http2;
 import io.netty.handler.codec.UnsupportedValueConverter;
 import io.netty.util.AsciiString;
 
-import java.util.Arrays;
 import java.util.List;
 
 import static io.netty.handler.codec.http2.HpackUtil.equalsVariableTime;
@@ -45,7 +44,7 @@ final class HpackStaticTable {
 
     // Appendix A: Static Table
     // https://tools.ietf.org/html/rfc7541#appendix-A
-    private static final List<HpackHeaderField> STATIC_TABLE = Arrays.asList(
+    private static final HpackHeaderField[] STATIC_TABLE = {
     /*  1 */ newEmptyHeaderField(":authority"),
     /*  2 */ newHeaderField(":method", "GET"),
     /*  3 */ newHeaderField(":method", "POST"),
@@ -107,7 +106,7 @@ final class HpackStaticTable {
     /* 59 */ newEmptyHeaderField("vary"),
     /* 60 */ newEmptyHeaderField("via"),
     /* 61 */ newEmptyHeaderField("www-authenticate")
-    );
+    };
 
     private static HpackHeaderField newEmptyHeaderField(String name) {
         return new HpackHeaderField(AsciiString.cached(name), AsciiString.EMPTY_STRING);
@@ -124,13 +123,13 @@ final class HpackStaticTable {
     /**
      * The number of header fields in the static table.
      */
-    static final int length = STATIC_TABLE.size();
+    static final int length = STATIC_TABLE.length;
 
     /**
      * Return the header field at the given index value.
      */
     static HpackHeaderField getEntry(int index) {
-        return STATIC_TABLE.get(index - 1);
+        return STATIC_TABLE[index - 1];
     }
 
     /**
@@ -182,7 +181,7 @@ final class HpackStaticTable {
 
     // create a map CharSequenceMap header name to index value to allow quick lookup
     private static CharSequenceMap<Integer> createMap() {
-        int length = STATIC_TABLE.size();
+        int length = STATIC_TABLE.length;
         @SuppressWarnings("unchecked")
         CharSequenceMap<Integer> ret = new CharSequenceMap<Integer>(true,
                 UnsupportedValueConverter.<Integer>instance(), length);
@@ -203,7 +202,7 @@ final class HpackStaticTable {
      * assumes all entries for a given header field are sequential
      */
     private static int maxSameNameFieldIndex() {
-        final int length = STATIC_TABLE.size();
+        final int length = STATIC_TABLE.length;
         HpackHeaderField cursor = getEntry(length);
         for (int index = length - 1; index > 0; index--) {
             HpackHeaderField entry = getEntry(index);
