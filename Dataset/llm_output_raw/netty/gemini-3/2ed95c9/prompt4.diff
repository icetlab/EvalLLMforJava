diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackStaticTable.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackStaticTable.java
index 389d8ef150..55293a82f5 100644
--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackStaticTable.java
+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackStaticTable.java
@@ -117,7 +117,7 @@ final class HpackStaticTable {
         return new HpackHeaderField(AsciiString.cached(name), AsciiString.cached(value));
     }
 
-    private static final CharSequenceMap<Integer> STATIC_INDEX_BY_NAME = createMap();
+
 
     private static final int MAX_SAME_NAME_FIELD_INDEX = maxSameNameFieldIndex();
 
@@ -138,11 +138,321 @@ final class HpackStaticTable {
      * -1 if the header field name is not in the static table.
      */
     static int getIndex(CharSequence name) {
-        Integer index = STATIC_INDEX_BY_NAME.get(name);
-        if (index == null) {
-            return NOT_FOUND;
+        switch (name.length()) {
+            case 3:
+                if (name.charAt(0) == 'a') {
+                    if (equalsVariableTime(name, "age")) {
+                        return 21;
                     }
-        return index;
+                } else if (name.charAt(0) == 'v') {
+                    if (equalsVariableTime(name, "via")) {
+                        return 60;
+                    }
+                }
+                break;
+            case 4:
+                switch (name.charAt(0)) {
+                    case 'd':
+                        if (equalsVariableTime(name, "date")) {
+                            return 33;
+                        }
+                        break;
+                    case 'e':
+                        if (equalsVariableTime(name, "etag")) {
+                            return 34;
+                        }
+                        break;
+                    case 'f':
+                        if (equalsVariableTime(name, "from")) {
+                            return 37;
+                        }
+                        break;
+                    case 'h':
+                        if (equalsVariableTime(name, "host")) {
+                            return 38;
+                        }
+                        break;
+                    case 'l':
+                        if (equalsVariableTime(name, "link")) {
+                            return 45;
+                        }
+                        break;
+                    case 'v':
+                        if (equalsVariableTime(name, "vary")) {
+                            return 59;
+                        }
+                        break;
+                }
+                break;
+            case 5:
+                switch (name.charAt(0)) {
+                    case ':':
+                        if (equalsVariableTime(name, ":path")) {
+                            return 4;
+                        }
+                        break;
+                    case 'a':
+                        if (equalsVariableTime(name, "allow")) {
+                            return 22;
+                        }
+                        break;
+                    case 'r':
+                        if (equalsVariableTime(name, "range")) {
+                            return 50;
+                        }
+                        break;
+                }
+                break;
+            case 6:
+                switch (name.charAt(0)) {
+                    case 'a':
+                        if (equalsVariableTime(name, "accept")) {
+                            return 19;
+                        }
+                        break;
+                    case 'c':
+                        if (equalsVariableTime(name, "cookie")) {
+                            return 32;
+                        }
+                        break;
+                    case 'e':
+                        if (equalsVariableTime(name, "expect")) {
+                            return 35;
+                        }
+                        break;
+                    case 's':
+                        if (equalsVariableTime(name, "server")) {
+                            return 54;
+                        }
+                        break;
+                }
+                break;
+            case 7:
+                switch (name.charAt(0)) {
+                    case ':':
+                        switch (name.charAt(1)) {
+                            case 'm':
+                                if (equalsVariableTime(name, ":method")) {
+                                    return 2;
+                                }
+                                break;
+                            case 's':
+                                if (name.charAt(2) == 'c') {
+                                    if (equalsVariableTime(name, ":scheme")) {
+                                        return 6;
+                                    }
+                                } else if (name.charAt(2) == 't') {
+                                    if (equalsVariableTime(name, ":status")) {
+                                        return 8;
+                                    }
+                                }
+                                break;
+                        }
+                        break;
+                    case 'e':
+                        if (equalsVariableTime(name, "expires")) {
+                            return 36;
+                        }
+                        break;
+                    case 'r':
+                        if (name.charAt(3) == 'e') {
+                            if (equalsVariableTime(name, "referer")) {
+                                return 51;
+                            }
+                        } else if (name.charAt(3) == 'r') {
+                            if (equalsVariableTime(name, "refresh")) {
+                                return 52;
+                            }
+                        }
+                        break;
+                }
+                break;
+            case 8:
+                switch (name.charAt(0)) {
+                    case 'i':
+                        if (name.charAt(3) == 'm') {
+                            if (equalsVariableTime(name, "if-match")) {
+                                return 39;
+                            }
+                        } else if (name.charAt(3) == 'r') {
+                            if (equalsVariableTime(name, "if-range")) {
+                                return 42;
+                            }
+                        }
+                        break;
+                    case 'l':
+                        if (equalsVariableTime(name, "location")) {
+                            return 46;
+                        }
+                        break;
+                }
+                break;
+            case 10:
+                switch (name.charAt(0)) {
+                    case ':':
+                        if (equalsVariableTime(name, ":authority")) {
+                            return 1;
+                        }
+                        break;
+                    case 's':
+                        if (equalsVariableTime(name, "set-cookie")) {
+                            return 55;
+                        }
+                        break;
+                    case 'u':
+                        if (equalsVariableTime(name, "user-agent")) {
+                            return 58;
+                        }
+                        break;
+                }
+                break;
+            case 11:
+                if (name.charAt(0) == 'm') {
+                    if (equalsVariableTime(name, "max-forwards")) {
+                        return 47;
+                    }
+                } else if (name.charAt(0) == 'r') {
+                    if (equalsVariableTime(name, "retry-after")) {
+                        return 53;
+                    }
+                }
+                break;
+            case 12:
+                if (equalsVariableTime(name, "content-type")) {
+                    return 31;
+                }
+                break;
+            case 13:
+                switch (name.charAt(0)) {
+                    case 'a':
+                        if (name.charAt(1) == 'c') {
+                            if (equalsVariableTime(name, "accept-ranges")) {
+                                return 18;
+                            }
+                        } else if (name.charAt(1) == 'u') {
+                            if (equalsVariableTime(name, "authorization")) {
+                                return 23;
+                            }
+                        }
+                        break;
+                    case 'c':
+                        if (name.charAt(1) == 'a') {
+                            if (equalsVariableTime(name, "cache-control")) {
+                                return 24;
+                            }
+                        } else if (name.charAt(1) == 'o') {
+                            if (equalsVariableTime(name, "content-range")) {
+                                return 30;
+                            }
+                        }
+                        break;
+                    case 'i':
+                        if (equalsVariableTime(name, "if-none-match")) {
+                            return 41;
+                        }
+                        break;
+                    case 'l':
+                        if (equalsVariableTime(name, "last-modified")) {
+                            return 44;
+                        }
+                        break;
+                }
+                break;
+            case 14:
+                if (name.charAt(0) == 'a') {
+                    if (equalsVariableTime(name, "accept-charset")) {
+                        return 15;
+                    }
+                } else if (name.charAt(0) == 'c') {
+                    if (equalsVariableTime(name, "content-length")) {
+                        return 28;
+                    }
+                }
+                break;
+            case 15:
+                if (name.charAt(7) == 'e') {
+                    if (equalsVariableTime(name, "accept-encoding")) {
+                        return 16;
+                    }
+                } else if (name.charAt(7) == 'l') {
+                    if (equalsVariableTime(name, "accept-language")) {
+                        return 17;
+                    }
+                }
+                break;
+            case 16:
+                switch (name.charAt(0)) {
+                    case 'c':
+                        if (name.charAt(8) == 'e') {
+                            if (equalsVariableTime(name, "content-encoding")) {
+                                return 26;
+                            }
+                        } else if (name.charAt(8) == 'l') {
+                            if (name.charAt(9) == 'a') {
+                                if (equalsVariableTime(name, "content-language")) {
+                                    return 27;
+                                }
+                            } else if (name.charAt(9) == 'o') {
+                                if (equalsVariableTime(name, "content-location")) {
+                                    return 29;
+                                }
+                            }
+                        }
+                        break;
+                    case 'w':
+                        if (equalsVariableTime(name, "www-authenticate")) {
+                            return 61;
+                        }
+                        break;
+                }
+                break;
+            case 17:
+                if (name.charAt(0) == 'i') {
+                    if (equalsVariableTime(name, "if-modified-since")) {
+                        return 40;
+                    }
+                } else if (name.charAt(0) == 't') {
+                    if (equalsVariableTime(name, "transfer-encoding")) {
+                        return 57;
+                    }
+                }
+                break;
+            case 18:
+                if (equalsVariableTime(name, "proxy-authenticate")) {
+                    return 48;
+                }
+                break;
+            case 19:
+                switch (name.charAt(0)) {
+                    case 'c':
+                        if (equalsVariableTime(name, "content-disposition")) {
+                            return 25;
+                        }
+                        break;
+                    case 'i':
+                        if (equalsVariableTime(name, "if-unmodified-since")) {
+                            return 43;
+                        }
+                        break;
+                    case 'p':
+                        if (equalsVariableTime(name, "proxy-authorization")) {
+                            return 49;
+                        }
+                        break;
+                }
+                break;
+            case 25:
+                if (equalsVariableTime(name, "strict-transport-security")) {
+                    return 56;
+                }
+                break;
+            case 27:
+                if (equalsVariableTime(name, "access-control-allow-origin")) {
+                    return 20;
+                }
+                break;
+        }
+        return NOT_FOUND;
     }
 
     /**
@@ -180,21 +490,7 @@ final class HpackStaticTable {
         return NOT_FOUND;
     }
 
-    // create a map CharSequenceMap header name to index value to allow quick lookup
-    private static CharSequenceMap<Integer> createMap() {
-        int length = STATIC_TABLE.size();
-        @SuppressWarnings("unchecked")
-        CharSequenceMap<Integer> ret = new CharSequenceMap<Integer>(true,
-                UnsupportedValueConverter.<Integer>instance(), length);
-        // Iterate through the static table in reverse order to
-        // save the smallest index for a given name in the map.
-        for (int index = length; index > 0; index--) {
-            HpackHeaderField entry = getEntry(index);
-            CharSequence name = entry.name;
-            ret.set(name, index);
-        }
-        return ret;
-    }
+
 
     /**
      * Returns the last position in the array that contains multiple
