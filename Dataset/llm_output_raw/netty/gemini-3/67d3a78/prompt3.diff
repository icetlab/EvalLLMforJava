diff --git a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
index 3c6012601f..989af53480 100644
--- a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
@@ -437,74 +437,86 @@ final class PlatformDependent0 {
     static boolean equals(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {
         final long baseOffset1 = BYTE_ARRAY_BASE_OFFSET + startPos1;
         final long baseOffset2 = BYTE_ARRAY_BASE_OFFSET + startPos2;
-        final int remainingBytes = length & 7;
-        final long end = baseOffset1 + remainingBytes;
-        for (long i = baseOffset1 - 8 + length, j = baseOffset2 - 8 + length; i >= end; i -= 8, j -= 8) {
-            if (UNSAFE.getLong(bytes1, i) != UNSAFE.getLong(bytes2, j)) {
+        final int longCount = length >>> 3;
+        final int byteCount = length & 7;
+
+        for (int i = 0; i < longCount; i++) {
+            if (UNSAFE.getLong(bytes1, baseOffset1 + (i << 3)) != UNSAFE.getLong(bytes2, baseOffset2 + (i << 3))) {
                 return false;
             }
         }
-        switch (remainingBytes) {
+
+        if (byteCount == 0) {
+            return true;
+        }
+        final long tailOffset1 = baseOffset1 + (longCount << 3);
+        final long tailOffset2 = baseOffset2 + (longCount << 3);
+
+        switch (byteCount) {
             case 7:
-            return UNSAFE.getInt(bytes1, baseOffset1 + 3) == UNSAFE.getInt(bytes2, baseOffset2 + 3) &&
-                   UNSAFE.getChar(bytes1, baseOffset1 + 1) == UNSAFE.getChar(bytes2, baseOffset2 + 1) &&
-                   UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
+                return UNSAFE.getInt(bytes1, tailOffset1 + 3) == UNSAFE.getInt(bytes2, tailOffset2 + 3) &&
+                       UNSAFE.getChar(bytes1, tailOffset1 + 1) == UNSAFE.getChar(bytes2, tailOffset2 + 1) &&
+                       UNSAFE.getByte(bytes1, tailOffset1) == UNSAFE.getByte(bytes2, tailOffset2);
             case 6:
-            return UNSAFE.getInt(bytes1, baseOffset1 + 2) == UNSAFE.getInt(bytes2, baseOffset2 + 2) &&
-                   UNSAFE.getChar(bytes1, baseOffset1) == UNSAFE.getChar(bytes2, baseOffset2);
+                return UNSAFE.getInt(bytes1, tailOffset1 + 2) == UNSAFE.getInt(bytes2, tailOffset2 + 2) &&
+                       UNSAFE.getChar(bytes1, tailOffset1) == UNSAFE.getChar(bytes2, tailOffset2);
             case 5:
-            return UNSAFE.getInt(bytes1, baseOffset1 + 1) == UNSAFE.getInt(bytes2, baseOffset2 + 1) &&
-                   UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
+                return UNSAFE.getInt(bytes1, tailOffset1 + 1) == UNSAFE.getInt(bytes2, tailOffset2 + 1) &&
+                       UNSAFE.getByte(bytes1, tailOffset1) == UNSAFE.getByte(bytes2, tailOffset2);
             case 4:
-            return UNSAFE.getInt(bytes1, baseOffset1) == UNSAFE.getInt(bytes2, baseOffset2);
+                return UNSAFE.getInt(bytes1, tailOffset1) == UNSAFE.getInt(bytes2, tailOffset2);
             case 3:
-            return UNSAFE.getChar(bytes1, baseOffset1 + 1) == UNSAFE.getChar(bytes2, baseOffset2 + 1) &&
-                   UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
+                return UNSAFE.getChar(bytes1, tailOffset1 + 1) == UNSAFE.getChar(bytes2, tailOffset2 + 1) &&
+                       UNSAFE.getByte(bytes1, tailOffset1) == UNSAFE.getByte(bytes2, tailOffset2);
             case 2:
-            return UNSAFE.getChar(bytes1, baseOffset1) == UNSAFE.getChar(bytes2, baseOffset2);
+                return UNSAFE.getChar(bytes1, tailOffset1) == UNSAFE.getChar(bytes2, tailOffset2);
             case 1:
-            return UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
-        default:
-            return true;
+                return UNSAFE.getByte(bytes1, tailOffset1) == UNSAFE.getByte(bytes2, tailOffset2);
         }
+        return true;
     }
 
     static int equalsConstantTime(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {
         long result = 0;
         final long baseOffset1 = BYTE_ARRAY_BASE_OFFSET + startPos1;
         final long baseOffset2 = BYTE_ARRAY_BASE_OFFSET + startPos2;
-        final int remainingBytes = length & 7;
-        final long end = baseOffset1 + remainingBytes;
-        for (long i = baseOffset1 - 8 + length, j = baseOffset2 - 8 + length; i >= end; i -= 8, j -= 8) {
-            result |= UNSAFE.getLong(bytes1, i) ^ UNSAFE.getLong(bytes2, j);
+        final int longCount = length >>> 3;
+        final int byteCount = length & 7;
+
+        for (int i = 0; i < longCount; i++) {
+            result |= UNSAFE.getLong(bytes1, baseOffset1 + (i << 3)) ^ UNSAFE.getLong(bytes2, baseOffset2 + (i << 3));
         }
-        switch (remainingBytes) {
+
+        final long tailOffset1 = baseOffset1 + (longCount << 3);
+        final long tailOffset2 = baseOffset2 + (longCount << 3);
+
+        switch (byteCount) {
             case 7:
                 return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getInt(bytes1, baseOffset1 + 3) ^ UNSAFE.getInt(bytes2, baseOffset2 + 3)) |
-                        (UNSAFE.getChar(bytes1, baseOffset1 + 1) ^ UNSAFE.getChar(bytes2, baseOffset2 + 1)) |
-                        (UNSAFE.getByte(bytes1, baseOffset1) ^ UNSAFE.getByte(bytes2, baseOffset2)), 0);
+                        (UNSAFE.getInt(bytes1, tailOffset1 + 3) ^ UNSAFE.getInt(bytes2, tailOffset2 + 3)) |
+                        (UNSAFE.getChar(bytes1, tailOffset1 + 1) ^ UNSAFE.getChar(bytes2, tailOffset2 + 1)) |
+                        (UNSAFE.getByte(bytes1, tailOffset1) ^ UNSAFE.getByte(bytes2, tailOffset2)), 0);
             case 6:
                 return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getInt(bytes1, baseOffset1 + 2) ^ UNSAFE.getInt(bytes2, baseOffset2 + 2)) |
-                        (UNSAFE.getChar(bytes1, baseOffset1) ^ UNSAFE.getChar(bytes2, baseOffset2)), 0);
+                        (UNSAFE.getInt(bytes1, tailOffset1 + 2) ^ UNSAFE.getInt(bytes2, tailOffset2 + 2)) |
+                        (UNSAFE.getChar(bytes1, tailOffset1) ^ UNSAFE.getChar(bytes2, tailOffset2)), 0);
             case 5:
                 return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getInt(bytes1, baseOffset1 + 1) ^ UNSAFE.getInt(bytes2, baseOffset2 + 1)) |
-                        (UNSAFE.getByte(bytes1, baseOffset1) ^ UNSAFE.getByte(bytes2, baseOffset2)), 0);
+                        (UNSAFE.getInt(bytes1, tailOffset1 + 1) ^ UNSAFE.getInt(bytes2, tailOffset2 + 1)) |
+                        (UNSAFE.getByte(bytes1, tailOffset1) ^ UNSAFE.getByte(bytes2, tailOffset2)), 0);
             case 4:
                 return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getInt(bytes1, baseOffset1) ^ UNSAFE.getInt(bytes2, baseOffset2)), 0);
+                        (UNSAFE.getInt(bytes1, tailOffset1) ^ UNSAFE.getInt(bytes2, tailOffset2)), 0);
             case 3:
                 return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getChar(bytes1, baseOffset1 + 1) ^ UNSAFE.getChar(bytes2, baseOffset2 + 1)) |
-                        (UNSAFE.getByte(bytes1, baseOffset1) ^ UNSAFE.getByte(bytes2, baseOffset2)), 0);
+                        (UNSAFE.getChar(bytes1, tailOffset1 + 1) ^ UNSAFE.getChar(bytes2, tailOffset2 + 1)) |
+                        (UNSAFE.getByte(bytes1, tailOffset1) ^ UNSAFE.getByte(bytes2, tailOffset2)), 0);
             case 2:
                 return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getChar(bytes1, baseOffset1) ^ UNSAFE.getChar(bytes2, baseOffset2)), 0);
+                        (UNSAFE.getChar(bytes1, tailOffset1) ^ UNSAFE.getChar(bytes2, tailOffset2)), 0);
             case 1:
                 return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getByte(bytes1, baseOffset1) ^ UNSAFE.getByte(bytes2, baseOffset2)), 0);
+                        (UNSAFE.getByte(bytes1, tailOffset1) ^ UNSAFE.getByte(bytes2, tailOffset2)), 0);
             default:
                 return ConstantTimeUtils.equalsConstantTime(result, 0);
         }
