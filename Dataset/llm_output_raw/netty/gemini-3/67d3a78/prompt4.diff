diff --git a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
index 3c6012601f..4c97b12d86 100644
--- a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
@@ -444,29 +444,26 @@ final class PlatformDependent0 {
                 return false;
             }
         }
-        switch (remainingBytes) {
-        case 7:
-            return UNSAFE.getInt(bytes1, baseOffset1 + 3) == UNSAFE.getInt(bytes2, baseOffset2 + 3) &&
-                   UNSAFE.getChar(bytes1, baseOffset1 + 1) == UNSAFE.getChar(bytes2, baseOffset2 + 1) &&
-                   UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
-        case 6:
-            return UNSAFE.getInt(bytes1, baseOffset1 + 2) == UNSAFE.getInt(bytes2, baseOffset2 + 2) &&
-                   UNSAFE.getChar(bytes1, baseOffset1) == UNSAFE.getChar(bytes2, baseOffset2);
-        case 5:
-            return UNSAFE.getInt(bytes1, baseOffset1 + 1) == UNSAFE.getInt(bytes2, baseOffset2 + 1) &&
-                   UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
-        case 4:
-            return UNSAFE.getInt(bytes1, baseOffset1) == UNSAFE.getInt(bytes2, baseOffset2);
-        case 3:
-            return UNSAFE.getChar(bytes1, baseOffset1 + 1) == UNSAFE.getChar(bytes2, baseOffset2 + 1) &&
-                   UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
-        case 2:
-            return UNSAFE.getChar(bytes1, baseOffset1) == UNSAFE.getChar(bytes2, baseOffset2);
-        case 1:
-            return UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
-        default:
+        if (remainingBytes >= 4) {
+            if (UNSAFE.getInt(bytes1, baseOffset1) != UNSAFE.getInt(bytes2, baseOffset2)) {
+                return false;
+            }
+            if (remainingBytes >= 6) {
+                return UNSAFE.getShort(bytes1, baseOffset1 + 4) == UNSAFE.getShort(bytes2, baseOffset2 + 4) &&
+                        (remainingBytes == 6 ||
+                                UNSAFE.getByte(bytes1, baseOffset1 + 6) == UNSAFE.getByte(bytes2, baseOffset2 + 6));
+            } else if (remainingBytes == 5) {
+                return UNSAFE.getByte(bytes1, baseOffset1 + 4) == UNSAFE.getByte(bytes2, baseOffset2 + 4);
+            }
             return true;
+        } else if (remainingBytes >= 2) {
+            return UNSAFE.getShort(bytes1, baseOffset1) == UNSAFE.getShort(bytes2, baseOffset2) &&
+                    (remainingBytes == 2 ||
+                            UNSAFE.getByte(bytes1, baseOffset1 + 2) == UNSAFE.getByte(bytes2, baseOffset2 + 2));
+        } else if (remainingBytes == 1) {
+            return UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
         }
+        return true;
     }
 
     static int equalsConstantTime(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {
