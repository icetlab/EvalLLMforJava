diff --git a/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
index c132aa5b20..ae17470cd6 100644
--- a/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
+++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
@@ -31,12 +31,7 @@ import java.util.concurrent.TimeUnit;
  */
 public abstract class AbstractScheduledEventExecutor extends AbstractEventExecutor {
     private static final Comparator<ScheduledFutureTask<?>> SCHEDULED_FUTURE_TASK_COMPARATOR =
-            new Comparator<ScheduledFutureTask<?>>() {
-                @Override
-                public int compare(ScheduledFutureTask<?> o1, ScheduledFutureTask<?> o2) {
-                    return o1.compareTo(o2);
-                }
-            };
+            ScheduledFutureTask::compareTo;
 
    static final Runnable WAKEUP_TASK = new Runnable() {
        @Override
@@ -102,10 +97,7 @@ public abstract class AbstractScheduledEventExecutor extends AbstractEventExecut
             return;
         }
 
-        final ScheduledFutureTask<?>[] scheduledTasks =
-                scheduledTaskQueue.toArray(new ScheduledFutureTask<?>[0]);
-
-        for (ScheduledFutureTask<?> task: scheduledTasks) {
+        for (ScheduledFutureTask<?> task: scheduledTaskQueue) {
             task.cancelWithoutRemove(false);
         }
 
@@ -252,8 +244,10 @@ public abstract class AbstractScheduledEventExecutor extends AbstractEventExecut
             final Runnable addToQueue = new Runnable() {
                 @Override
                 public void run() {
+                    if (!task.isCancelled()) {
                         scheduledTaskQueue().add(task.setId(nextTaskId++));
                     }
+                }
             };
             if (beforeScheduledTaskSubmitted(deadlineNanos)) {
                 execute(addToQueue);
