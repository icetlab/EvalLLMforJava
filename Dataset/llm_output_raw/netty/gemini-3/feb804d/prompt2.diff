diff --git a/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
index c132aa5b20..70fcf0df1e 100644
--- a/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
+++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
@@ -248,17 +248,12 @@ public abstract class AbstractScheduledEventExecutor extends AbstractEventExecut
         if (inEventLoop()) {
             scheduledTaskQueue().add(task.setId(nextTaskId++));
         } else {
+            task.setScheduling();
             final long deadlineNanos = task.deadlineNanos();
-            final Runnable addToQueue = new Runnable() {
-                @Override
-                public void run() {
-                    scheduledTaskQueue().add(task.setId(nextTaskId++));
-                }
-            };
             if (beforeScheduledTaskSubmitted(deadlineNanos)) {
-                execute(addToQueue);
+                execute(task);
             } else {
-                lazyExecute(addToQueue);
+                lazyExecute(task);
                 // Second hook after scheduling to facilitate race-avoidance
                 if (afterScheduledTaskSubmitted(deadlineNanos)) {
                     execute(WAKEUP_TASK);
diff --git a/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
index 5ffe824119..348e5c889e 100644
--- a/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
+++ b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
@@ -50,6 +50,7 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
     private final long periodNanos;
 
     private int queueIndex = INDEX_NOT_IN_QUEUE;
+    private boolean scheduling;
 
     ScheduledFutureTask(AbstractScheduledEventExecutor executor,
             Runnable runnable, long nanoTime) {
@@ -90,6 +91,10 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
         return period;
     }
 
+    void setScheduling() {
+        scheduling = true;
+    }
+
     ScheduledFutureTask<V> setId(long id) {
         this.id = id;
         return this;
@@ -143,6 +148,12 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
 
     @Override
     public void run() {
+        if (scheduling) {
+            AbstractScheduledEventExecutor parent = (AbstractScheduledEventExecutor) executor();
+            parent.scheduledTaskQueue().add(setId(parent.nextTaskId++));
+            scheduling = false;
+            return;
+        }
         assert executor().inEventLoop();
         try {
             if (periodNanos == 0) {
