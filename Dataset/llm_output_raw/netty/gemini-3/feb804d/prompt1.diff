diff --git a/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
index c132aa5b20..089e6bbd6f 100644
--- a/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
+++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
@@ -31,17 +31,9 @@ import java.util.concurrent.TimeUnit;
  */
 public abstract class AbstractScheduledEventExecutor extends AbstractEventExecutor {
     private static final Comparator<ScheduledFutureTask<?>> SCHEDULED_FUTURE_TASK_COMPARATOR =
-            new Comparator<ScheduledFutureTask<?>>() {
-                @Override
-                public int compare(ScheduledFutureTask<?> o1, ScheduledFutureTask<?> o2) {
-                    return o1.compareTo(o2);
-                }
-            };
+            ScheduledFutureTask::compareTo;
 
-   static final Runnable WAKEUP_TASK = new Runnable() {
-       @Override
-       public void run() { } // Do nothing
-    };
+      static final Runnable WAKEUP_TASK = () -> { }; // Do nothing
 
     PriorityQueue<ScheduledFutureTask<?>> scheduledTaskQueue;
 
@@ -249,12 +241,7 @@ public abstract class AbstractScheduledEventExecutor extends AbstractEventExecut
             scheduledTaskQueue().add(task.setId(nextTaskId++));
         } else {
             final long deadlineNanos = task.deadlineNanos();
-            final Runnable addToQueue = new Runnable() {
-                @Override
-                public void run() {
-                    scheduledTaskQueue().add(task.setId(nextTaskId++));
-                }
-            };
+            final Runnable addToQueue = () -> scheduledTaskQueue().add(task.setId(nextTaskId++));
             if (beforeScheduledTaskSubmitted(deadlineNanos)) {
                 execute(addToQueue);
             } else {
@@ -273,12 +260,7 @@ public abstract class AbstractScheduledEventExecutor extends AbstractEventExecut
         if (inEventLoop()) {
             scheduledTaskQueue().removeTyped(task);
         } else {
-            lazyExecute(new Runnable() {
-                @Override
-                public void run() {
-                    scheduledTaskQueue().removeTyped(task);
-                }
-            });
+            lazyExecute(() -> scheduledTaskQueue().removeTyped(task));
         }
     }
 
diff --git a/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
index 5ffe824119..9061e72ae2 100644
--- a/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
+++ b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
@@ -51,10 +51,13 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
 
     private int queueIndex = INDEX_NOT_IN_QUEUE;
 
+    private final AbstractScheduledEventExecutor scheduledExecutor;
+
     ScheduledFutureTask(AbstractScheduledEventExecutor executor,
             Runnable runnable, long nanoTime) {
 
         super(executor, runnable);
+        this.scheduledExecutor = executor;
         deadlineNanos = nanoTime;
         periodNanos = 0;
     }
@@ -63,6 +66,7 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
             Runnable runnable, long nanoTime, long period) {
 
         super(executor, runnable);
+        this.scheduledExecutor = executor;
         deadlineNanos = nanoTime;
         periodNanos = validatePeriod(period);
     }
@@ -71,6 +75,7 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
             Callable<V> callable, long nanoTime, long period) {
 
         super(executor, callable);
+        this.scheduledExecutor = executor;
         deadlineNanos = nanoTime;
         periodNanos = validatePeriod(period);
     }
@@ -79,6 +84,7 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
             Callable<V> callable, long nanoTime) {
 
         super(executor, callable);
+        this.scheduledExecutor = executor;
         deadlineNanos = nanoTime;
         periodNanos = 0;
     }
@@ -162,8 +168,7 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
                         }
                         if (!isCancelled()) {
                             // scheduledTaskQueue can never be null as we lazy init it before submit the task!
-                            Queue<ScheduledFutureTask<?>> scheduledTaskQueue =
-                                    ((AbstractScheduledEventExecutor) executor()).scheduledTaskQueue;
+                            Queue<ScheduledFutureTask<?>> scheduledTaskQueue = scheduledExecutor.scheduledTaskQueue;
                             assert scheduledTaskQueue != null;
                             scheduledTaskQueue.add(this);
                         }
@@ -184,7 +189,7 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
     public boolean cancel(boolean mayInterruptIfRunning) {
         boolean canceled = super.cancel(mayInterruptIfRunning);
         if (canceled) {
-            ((AbstractScheduledEventExecutor) executor()).removeScheduled(this);
+            scheduledExecutor.removeScheduled(this);
         }
         return canceled;
     }
