diff --git a/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
index c132aa5b20..5f425e9f82 100644
--- a/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
+++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
@@ -248,17 +248,11 @@ public abstract class AbstractScheduledEventExecutor extends AbstractEventExecut
         if (inEventLoop()) {
             scheduledTaskQueue().add(task.setId(nextTaskId++));
         } else {
-            final long deadlineNanos = task.deadlineNanos();
-            final Runnable addToQueue = new Runnable() {
-                @Override
-                public void run() {
-                    scheduledTaskQueue().add(task.setId(nextTaskId++));
-                }
-            };
+            long deadlineNanos = task.deadlineNanos();
             if (beforeScheduledTaskSubmitted(deadlineNanos)) {
-                execute(addToQueue);
+                execute(task);
             } else {
-                lazyExecute(addToQueue);
+                lazyExecute(task);
                 // Second hook after scheduling to facilitate race-avoidance
                 if (afterScheduledTaskSubmitted(deadlineNanos)) {
                     execute(WAKEUP_TASK);
diff --git a/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
index 5ffe824119..0c7bdc02b2 100644
--- a/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
+++ b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
@@ -42,6 +42,11 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
         return START_TIME;
     }
 
+    // SFT_SCHEDULED is used to ensure that the task is only ever submitted to the queue once.
+    private static final byte SFT_SCHEDULED = 1;
+
+    private byte SFT_state;
+
     // set once when added to priority queue
     private long id;
 
@@ -144,21 +149,31 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
     @Override
     public void run() {
         assert executor().inEventLoop();
-        try {
-            if (periodNanos == 0) {
-                if (setUncancellableInternal()) {
-                    V result = runTask();
-                    setSuccessInternal(result);
-                }
+        if ((SFT_state & SFT_SCHEDULED) == 0) {
+            SFT_state |= SFT_SCHEDULED;
+            AbstractScheduledEventExecutor exec = (AbstractScheduledEventExecutor) executor();
+            exec.scheduledTaskQueue().add(setId(exec.nextTaskId++));
+            return;
+        }
+        if (isPeriodic()) {
+            runPeriodic();
         } else {
+            super.run();
+        }
+    }
+
+    private void runPeriodic() {
+        assert executor().inEventLoop();
+        try {
             // check if is done as it may was cancelled
             if (!isCancelled()) {
                 runTask();
                 if (!executor().isShutdown()) {
-                        if (periodNanos > 0) {
-                            deadlineNanos += periodNanos;
+                    long p = periodNanos;
+                    if (p > 0) {
+                        deadlineNanos += p;
                     } else {
-                            deadlineNanos = nanoTime() - periodNanos;
+                        deadlineNanos = nanoTime() - p;
                     }
                     if (!isCancelled()) {
                         // scheduledTaskQueue can never be null as we lazy init it before submit the task!
@@ -169,12 +184,15 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
                     }
                 }
             }
-            }
         } catch (Throwable cause) {
             setFailureInternal(cause);
         }
     }
 
+    private boolean isPeriodic() {
+        return periodNanos != 0;
+    }
+
     /**
      * {@inheritDoc}
      *
