diff --git a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
index 3c6012601f..0e81185f47 100644
--- a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
@@ -435,35 +435,36 @@ final class PlatformDependent0 {
     }
 
     static boolean equals(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {
-        final long baseOffset1 = BYTE_ARRAY_BASE_OFFSET + startPos1;
-        final long baseOffset2 = BYTE_ARRAY_BASE_OFFSET + startPos2;
-        final int remainingBytes = length & 7;
-        final long end = baseOffset1 + remainingBytes;
-        for (long i = baseOffset1 - 8 + length, j = baseOffset2 - 8 + length; i >= end; i -= 8, j -= 8) {
-            if (UNSAFE.getLong(bytes1, i) != UNSAFE.getLong(bytes2, j)) {
+        long offset1 = BYTE_ARRAY_BASE_OFFSET + startPos1;
+        long offset2 = BYTE_ARRAY_BASE_OFFSET + startPos2;
+        final long endOffset1 = offset1 + (length & ~7);
+        for (; offset1 < endOffset1; offset1 += 8, offset2 += 8) {
+            if (UNSAFE.getLong(bytes1, offset1) != UNSAFE.getLong(bytes2, offset2)) {
                 return false;
             }
         }
+
+        final int remainingBytes = length & 7;
         switch (remainingBytes) {
         case 7:
-            return UNSAFE.getInt(bytes1, baseOffset1 + 3) == UNSAFE.getInt(bytes2, baseOffset2 + 3) &&
-                   UNSAFE.getChar(bytes1, baseOffset1 + 1) == UNSAFE.getChar(bytes2, baseOffset2 + 1) &&
-                   UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
+            return UNSAFE.getInt(bytes1, offset1 + 3) == UNSAFE.getInt(bytes2, offset2 + 3) &&
+                   UNSAFE.getChar(bytes1, offset1 + 1) == UNSAFE.getChar(bytes2, offset2 + 1) &&
+                   UNSAFE.getByte(bytes1, offset1) == UNSAFE.getByte(bytes2, offset2);
         case 6:
-            return UNSAFE.getInt(bytes1, baseOffset1 + 2) == UNSAFE.getInt(bytes2, baseOffset2 + 2) &&
-                   UNSAFE.getChar(bytes1, baseOffset1) == UNSAFE.getChar(bytes2, baseOffset2);
+            return UNSAFE.getInt(bytes1, offset1 + 2) == UNSAFE.getInt(bytes2, offset2 + 2) &&
+                   UNSAFE.getChar(bytes1, offset1) == UNSAFE.getChar(bytes2, offset2);
         case 5:
-            return UNSAFE.getInt(bytes1, baseOffset1 + 1) == UNSAFE.getInt(bytes2, baseOffset2 + 1) &&
-                   UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
+            return UNSAFE.getInt(bytes1, offset1 + 1) == UNSAFE.getInt(bytes2, offset2 + 1) &&
+                   UNSAFE.getByte(bytes1, offset1) == UNSAFE.getByte(bytes2, offset2);
         case 4:
-            return UNSAFE.getInt(bytes1, baseOffset1) == UNSAFE.getInt(bytes2, baseOffset2);
+            return UNSAFE.getInt(bytes1, offset1) == UNSAFE.getInt(bytes2, offset2);
         case 3:
-            return UNSAFE.getChar(bytes1, baseOffset1 + 1) == UNSAFE.getChar(bytes2, baseOffset2 + 1) &&
-                   UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
+            return UNSAFE.getChar(bytes1, offset1 + 1) == UNSAFE.getChar(bytes2, offset2 + 1) &&
+                   UNSAFE.getByte(bytes1, offset1) == UNSAFE.getByte(bytes2, offset2);
         case 2:
-            return UNSAFE.getChar(bytes1, baseOffset1) == UNSAFE.getChar(bytes2, baseOffset2);
+            return UNSAFE.getChar(bytes1, offset1) == UNSAFE.getChar(bytes2, offset2);
         case 1:
-            return UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
+            return UNSAFE.getByte(bytes1, offset1) == UNSAFE.getByte(bytes2, offset2);
         default:
             return true;
         }
@@ -471,40 +472,41 @@ final class PlatformDependent0 {
 
     static int equalsConstantTime(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {
         long result = 0;
-        final long baseOffset1 = BYTE_ARRAY_BASE_OFFSET + startPos1;
-        final long baseOffset2 = BYTE_ARRAY_BASE_OFFSET + startPos2;
-        final int remainingBytes = length & 7;
-        final long end = baseOffset1 + remainingBytes;
-        for (long i = baseOffset1 - 8 + length, j = baseOffset2 - 8 + length; i >= end; i -= 8, j -= 8) {
-            result |= UNSAFE.getLong(bytes1, i) ^ UNSAFE.getLong(bytes2, j);
+        long offset1 = BYTE_ARRAY_BASE_OFFSET + startPos1;
+        long offset2 = BYTE_ARRAY_BASE_OFFSET + startPos2;
+        final long endOffset1 = offset1 + (length & ~7);
+        for (; offset1 < endOffset1; offset1 += 8, offset2 += 8) {
+            result |= UNSAFE.getLong(bytes1, offset1) ^ UNSAFE.getLong(bytes2, offset2);
         }
+
+        final int remainingBytes = length & 7;
         switch (remainingBytes) {
             case 7:
                 return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getInt(bytes1, baseOffset1 + 3) ^ UNSAFE.getInt(bytes2, baseOffset2 + 3)) |
-                        (UNSAFE.getChar(bytes1, baseOffset1 + 1) ^ UNSAFE.getChar(bytes2, baseOffset2 + 1)) |
-                        (UNSAFE.getByte(bytes1, baseOffset1) ^ UNSAFE.getByte(bytes2, baseOffset2)), 0);
+                        (UNSAFE.getInt(bytes1, offset1 + 3) ^ UNSAFE.getInt(bytes2, offset2 + 3)) |
+                        (UNSAFE.getChar(bytes1, offset1 + 1) ^ UNSAFE.getChar(bytes2, offset2 + 1)) |
+                        (UNSAFE.getByte(bytes1, offset1) ^ UNSAFE.getByte(bytes2, offset2)), 0);
             case 6:
                 return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getInt(bytes1, baseOffset1 + 2) ^ UNSAFE.getInt(bytes2, baseOffset2 + 2)) |
-                        (UNSAFE.getChar(bytes1, baseOffset1) ^ UNSAFE.getChar(bytes2, baseOffset2)), 0);
+                        (UNSAFE.getInt(bytes1, offset1 + 2) ^ UNSAFE.getInt(bytes2, offset2 + 2)) |
+                        (UNSAFE.getChar(bytes1, offset1) ^ UNSAFE.getChar(bytes2, offset2)), 0);
             case 5:
                 return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getInt(bytes1, baseOffset1 + 1) ^ UNSAFE.getInt(bytes2, baseOffset2 + 1)) |
-                        (UNSAFE.getByte(bytes1, baseOffset1) ^ UNSAFE.getByte(bytes2, baseOffset2)), 0);
+                        (UNSAFE.getInt(bytes1, offset1 + 1) ^ UNSAFE.getInt(bytes2, offset2 + 1)) |
+                        (UNSAFE.getByte(bytes1, offset1) ^ UNSAFE.getByte(bytes2, offset2)), 0);
             case 4:
                 return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getInt(bytes1, baseOffset1) ^ UNSAFE.getInt(bytes2, baseOffset2)), 0);
+                        (UNSAFE.getInt(bytes1, offset1) ^ UNSAFE.getInt(bytes2, offset2)), 0);
             case 3:
                 return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getChar(bytes1, baseOffset1 + 1) ^ UNSAFE.getChar(bytes2, baseOffset2 + 1)) |
-                        (UNSAFE.getByte(bytes1, baseOffset1) ^ UNSAFE.getByte(bytes2, baseOffset2)), 0);
+                        (UNSAFE.getChar(bytes1, offset1 + 1) ^ UNSAFE.getChar(bytes2, offset2 + 1)) |
+                        (UNSAFE.getByte(bytes1, offset1) ^ UNSAFE.getByte(bytes2, offset2)), 0);
             case 2:
                 return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getChar(bytes1, baseOffset1) ^ UNSAFE.getChar(bytes2, baseOffset2)), 0);
+                        (UNSAFE.getChar(bytes1, offset1) ^ UNSAFE.getChar(bytes2, offset2)), 0);
             case 1:
                 return ConstantTimeUtils.equalsConstantTime(result |
-                        (UNSAFE.getByte(bytes1, baseOffset1) ^ UNSAFE.getByte(bytes2, baseOffset2)), 0);
+                        (UNSAFE.getByte(bytes1, offset1) ^ UNSAFE.getByte(bytes2, offset2)), 0);
             default:
                 return ConstantTimeUtils.equalsConstantTime(result, 0);
         }
