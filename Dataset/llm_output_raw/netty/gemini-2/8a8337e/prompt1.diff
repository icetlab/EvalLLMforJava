diff --git a/common/src/main/java/io/netty/util/Recycler.java b/common/src/main/java/io/netty/util/Recycler.java
index dd7b2d73be..6af9235a9f 100644
--- a/common/src/main/java/io/netty/util/Recycler.java
+++ b/common/src/main/java/io/netty/util/Recycler.java
@@ -167,7 +167,9 @@ public abstract class Recycler<T> {
         LocalPool<T> localPool = threadLocal.get();
         DefaultHandle<T> handle = localPool.claim();
         T obj;
-        if (handle == null) {
+        if (handle != null) {
+            obj = handle.get();
+        } else {
             handle = localPool.newHandle();
             if (handle != null) {
                 obj = newObject(handle);
@@ -175,8 +177,6 @@ public abstract class Recycler<T> {
             } else {
                 obj = newObject((Handle<T>) NOOP_HANDLE);
             }
-        } else {
-            obj = handle.get();
         }
 
         return obj;
@@ -244,12 +244,11 @@ public abstract class Recycler<T> {
 
         void toClaimed() {
             assert state == STATE_AVAILABLE;
-            state = STATE_CLAIMED;
+            STATE_UPDATER.lazySet(this, STATE_CLAIMED);
         }
 
         void toAvailable() {
-            int prev = STATE_UPDATER.getAndSet(this, STATE_AVAILABLE);
-            if (prev == STATE_AVAILABLE) {
+            if (!STATE_UPDATER.compareAndSet(this, STATE_CLAIMED, STATE_AVAILABLE)) {
                 throw new IllegalStateException("Object has been recycled already.");
             }
         }
