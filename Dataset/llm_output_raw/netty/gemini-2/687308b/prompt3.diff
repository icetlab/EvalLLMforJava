diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringEncoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringEncoder.java
index da5080ff85..265416d352 100644
--- a/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringEncoder.java
+++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringEncoder.java
@@ -126,8 +126,12 @@ public class QueryStringEncoder {
         for (int i = 0, len = s.length(); i < len;) {
             char c = s.charAt(i);
             if (dontNeedEncoding(c)) {
-                uriBuilder.append(c);
+                int start = i;
                 i++;
+                while (i < len && dontNeedEncoding(s.charAt(i))) {
+                    i++;
+                }
+                uriBuilder.append(s, start, i);
             } else {
                 int index = 0;
                 if (buf == null) {
@@ -155,12 +159,17 @@ public class QueryStringEncoder {
     private void encodeUtf8Component(CharSequence s) {
         for (int i = 0, len = s.length(); i < len; i++) {
             char c = s.charAt(i);
-            if (c < 0x80) {
             if (dontNeedEncoding(c)) {
-                    uriBuilder.append(c);
+                int start = i;
+                i++;
+                while (i < len && dontNeedEncoding(s.charAt(i))) {
+                    i++;
+                }
+                uriBuilder.append(s, start, i);
+                i--;
             } else {
+                if (c < 0x80) {
                     appendEncoded(c);
-                }
                 } else if (c < 0x800) {
                     appendEncoded(0xc0 | (c >> 6));
                     appendEncoded(0x80 | (c & 0x3f));
@@ -183,6 +192,7 @@ public class QueryStringEncoder {
                 }
             }
         }
+    }
 
     private void writeUtf8Surrogate(char c, char c2) {
         if (!Character.isLowSurrogate(c2)) {
@@ -213,6 +223,24 @@ public class QueryStringEncoder {
         return CHAR_MAP[digit & 0xF];
     }
 
+    private static final boolean[] DONT_NEED_ENCODING_TABLE = new boolean[128];
+
+    static {
+        for (int i = '0'; i <= '9'; i++) {
+            DONT_NEED_ENCODING_TABLE[i] = true;
+        }
+        for (int i = 'A'; i <= 'Z'; i++) {
+            DONT_NEED_ENCODING_TABLE[i] = true;
+        }
+        for (int i = 'a'; i <= 'z'; i++) {
+            DONT_NEED_ENCODING_TABLE[i] = true;
+        }
+        DONT_NEED_ENCODING_TABLE['-'] = true;
+        DONT_NEED_ENCODING_TABLE['_'] = true;
+        DONT_NEED_ENCODING_TABLE['.'] = true;
+        DONT_NEED_ENCODING_TABLE['*'] = true;
+    }
+
     /**
      * Determines whether the given character is a unreserved character.
      * <p>
@@ -225,7 +253,6 @@ public class QueryStringEncoder {
      * @return true or false
      */
     private static boolean dontNeedEncoding(char ch) {
-        return ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch >= '0' && ch <= '9'
-                || ch == '-' || ch == '_' || ch == '.' || ch == '*';
+        return ch < DONT_NEED_ENCODING_TABLE.length && DONT_NEED_ENCODING_TABLE[ch];
     }
 }
