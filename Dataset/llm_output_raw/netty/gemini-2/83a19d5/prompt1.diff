diff --git a/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
index e657ad86f8..f5a0667f05 100644
--- a/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
+++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
@@ -59,19 +59,12 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
         return retain0(checkPositive(increment, "increment"));
     }
 
-    private ByteBuf retain0(int increment) {
-        for (;;) {
-            int refCnt = this.refCnt;
-            final int nextCnt = refCnt + increment;
-
-            // Ensure we not resurrect (which means the refCnt was 0) and also that we encountered an overflow.
-            if (nextCnt <= increment) {
+    private ByteBuf retain0(final int increment) {
+        int refCnt = refCntUpdater.getAndAdd(this, increment);
+        if (refCnt <= 0 || refCnt + increment < refCnt) {
+            refCntUpdater.getAndAdd(this, -increment);
             throw new IllegalReferenceCountException(refCnt, increment);
         }
-            if (refCntUpdater.compareAndSet(this, refCnt, nextCnt)) {
-                break;
-            }
-        }
         return this;
     }
 
@@ -95,22 +88,18 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
         return release0(checkPositive(decrement, "decrement"));
     }
 
-    private boolean release0(int decrement) {
-        for (;;) {
-            int refCnt = this.refCnt;
+    private boolean release0(final int decrement) {
+        int refCnt = refCntUpdater.getAndAdd(this, -decrement);
         if (refCnt < decrement) {
+            refCntUpdater.getAndAdd(this, decrement);
             throw new IllegalReferenceCountException(refCnt, -decrement);
         }
-
-            if (refCntUpdater.compareAndSet(this, refCnt, refCnt - decrement)) {
         if (refCnt == decrement) {
             deallocate();
             return true;
         }
         return false;
     }
-        }
-    }
     /**
      * Called once {@link #refCnt()} is equals 0.
      */
diff --git a/common/src/main/java/io/netty/util/AbstractReferenceCounted.java b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
index 493bcc1872..8d6e4376bd 100644
--- a/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
+++ b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
@@ -51,19 +51,12 @@ public abstract class AbstractReferenceCounted implements ReferenceCounted {
         return retain0(checkPositive(increment, "increment"));
     }
 
-    private ReferenceCounted retain0(int increment) {
-        for (;;) {
-            int refCnt = this.refCnt;
-            final int nextCnt = refCnt + increment;
-
-            // Ensure we not resurrect (which means the refCnt was 0) and also that we encountered an overflow.
-            if (nextCnt <= increment) {
+    private ReferenceCounted retain0(final int increment) {
+        int refCnt = refCntUpdater.getAndAdd(this, increment);
+        if (refCnt <= 0 || refCnt + increment < refCnt) {
+            refCntUpdater.getAndAdd(this, -increment);
             throw new IllegalReferenceCountException(refCnt, increment);
         }
-            if (refCntUpdater.compareAndSet(this, refCnt, nextCnt)) {
-                break;
-            }
-        }
         return this;
     }
 
@@ -82,22 +75,18 @@ public abstract class AbstractReferenceCounted implements ReferenceCounted {
         return release0(checkPositive(decrement, "decrement"));
     }
 
-    private boolean release0(int decrement) {
-        for (;;) {
-            int refCnt = this.refCnt;
+    private boolean release0(final int decrement) {
+        int refCnt = refCntUpdater.getAndAdd(this, -decrement);
         if (refCnt < decrement) {
+            refCntUpdater.getAndAdd(this, decrement);
             throw new IllegalReferenceCountException(refCnt, -decrement);
         }
-
-            if (refCntUpdater.compareAndSet(this, refCnt, refCnt - decrement)) {
         if (refCnt == decrement) {
             deallocate();
             return true;
         }
         return false;
     }
-        }
-    }
 
     /**
      * Called once {@link #refCnt()} is equals 0.
