diff --git a/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
index e657ad86f8..af8b2b7070 100644
--- a/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
+++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
@@ -30,11 +30,10 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
     private static final AtomicIntegerFieldUpdater<AbstractReferenceCountedByteBuf> refCntUpdater =
             AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCountedByteBuf.class, "refCnt");
 
-    private volatile int refCnt;
+    private volatile int refCnt = 1;
 
     protected AbstractReferenceCountedByteBuf(int maxCapacity) {
         super(maxCapacity);
-        refCntUpdater.set(this, 1);
     }
 
     @Override
@@ -68,7 +67,7 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
             if (nextCnt <= increment) {
                 throw new IllegalReferenceCountException(refCnt, increment);
             }
-            if (refCntUpdater.compareAndSet(this, refCnt, nextCnt)) {
+            if (refCntUpdater.weakCompareAndSet(this, refCnt, nextCnt)) {
                 break;
             }
         }
@@ -102,7 +101,7 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
                 throw new IllegalReferenceCountException(refCnt, -decrement);
             }
 
-            if (refCntUpdater.compareAndSet(this, refCnt, refCnt - decrement)) {
+            if (refCntUpdater.weakCompareAndSet(this, refCnt, refCnt - decrement)) {
                 if (refCnt == decrement) {
                     deallocate();
                     return true;
diff --git a/common/src/main/java/io/netty/util/AbstractReferenceCounted.java b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
index 493bcc1872..7d5124ecd1 100644
--- a/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
+++ b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
@@ -60,7 +60,7 @@ public abstract class AbstractReferenceCounted implements ReferenceCounted {
             if (nextCnt <= increment) {
                 throw new IllegalReferenceCountException(refCnt, increment);
             }
-            if (refCntUpdater.compareAndSet(this, refCnt, nextCnt)) {
+            if (refCntUpdater.weakCompareAndSet(this, refCnt, nextCnt)) {
                 break;
             }
         }
@@ -89,7 +89,7 @@ public abstract class AbstractReferenceCounted implements ReferenceCounted {
                 throw new IllegalReferenceCountException(refCnt, -decrement);
             }
 
-            if (refCntUpdater.compareAndSet(this, refCnt, refCnt - decrement)) {
+            if (refCntUpdater.weakCompareAndSet(this, refCnt, refCnt - decrement)) {
                 if (refCnt == decrement) {
                     deallocate();
                     return true;
