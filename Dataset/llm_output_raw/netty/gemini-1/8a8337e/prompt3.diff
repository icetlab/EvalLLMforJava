diff --git a/common/src/main/java/io/netty/util/Recycler.java b/common/src/main/java/io/netty/util/Recycler.java
index dd7b2d73be..fcfa65db8e 100644
--- a/common/src/main/java/io/netty/util/Recycler.java
+++ b/common/src/main/java/io/netty/util/Recycler.java
@@ -166,19 +166,16 @@ public abstract class Recycler<T> {
         }
         LocalPool<T> localPool = threadLocal.get();
         DefaultHandle<T> handle = localPool.claim();
-        T obj;
-        if (handle == null) {
-            handle = localPool.newHandle();
         if (handle != null) {
-                obj = newObject(handle);
-                handle.set(obj);
-            } else {
-                obj = newObject((Handle<T>) NOOP_HANDLE);
-            }
-        } else {
-            obj = handle.get();
+            return handle.get();
         }
 
+        handle = localPool.newHandle();
+        if (handle == null) {
+            return newObject((Handle<T>) NOOP_HANDLE);
+        }
+        T obj = newObject(handle);
+        handle.set(obj);
         return obj;
     }
 
@@ -248,8 +245,7 @@ public abstract class Recycler<T> {
         }
 
         void toAvailable() {
-            int prev = STATE_UPDATER.getAndSet(this, STATE_AVAILABLE);
-            if (prev == STATE_AVAILABLE) {
+            if (!STATE_UPDATER.compareAndSet(this, STATE_CLAIMED, STATE_AVAILABLE)) {
                 throw new IllegalStateException("Object has been recycled already.");
             }
         }
