diff --git a/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
index e657ad86f8..ed84f7fd1b 100644
--- a/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
+++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
@@ -60,18 +60,12 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
     }
 
     private ByteBuf retain0(int increment) {
-        for (;;) {
-            int refCnt = this.refCnt;
-            final int nextCnt = refCnt + increment;
-
+        int refCnt = refCntUpdater.getAndAdd(this, increment);
         // Ensure we not resurrect (which means the refCnt was 0) and also that we encountered an overflow.
-            if (nextCnt <= increment) {
+        if (refCnt + increment <= increment) {
+            refCntUpdater.getAndAdd(this, -increment);
             throw new IllegalReferenceCountException(refCnt, increment);
         }
-            if (refCntUpdater.compareAndSet(this, refCnt, nextCnt)) {
-                break;
-            }
-        }
         return this;
     }
 
@@ -96,21 +90,17 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
     }
 
     private boolean release0(int decrement) {
-        for (;;) {
-            int refCnt = this.refCnt;
+        int refCnt = refCntUpdater.getAndAdd(this, -decrement);
         if (refCnt < decrement) {
+            refCntUpdater.getAndAdd(this, decrement);
             throw new IllegalReferenceCountException(refCnt, -decrement);
         }
-
-            if (refCntUpdater.compareAndSet(this, refCnt, refCnt - decrement)) {
         if (refCnt == decrement) {
             deallocate();
             return true;
         }
         return false;
     }
-        }
-    }
     /**
      * Called once {@link #refCnt()} is equals 0.
      */
diff --git a/common/src/main/java/io/netty/util/AbstractReferenceCounted.java b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
index 493bcc1872..22bc8d9eab 100644
--- a/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
+++ b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
@@ -52,18 +52,12 @@ public abstract class AbstractReferenceCounted implements ReferenceCounted {
     }
 
     private ReferenceCounted retain0(int increment) {
-        for (;;) {
-            int refCnt = this.refCnt;
-            final int nextCnt = refCnt + increment;
-
+        int refCnt = refCntUpdater.getAndAdd(this, increment);
         // Ensure we not resurrect (which means the refCnt was 0) and also that we encountered an overflow.
-            if (nextCnt <= increment) {
+        if (refCnt + increment <= increment) {
+            refCntUpdater.getAndAdd(this, -increment);
             throw new IllegalReferenceCountException(refCnt, increment);
         }
-            if (refCntUpdater.compareAndSet(this, refCnt, nextCnt)) {
-                break;
-            }
-        }
         return this;
     }
 
@@ -83,21 +77,17 @@ public abstract class AbstractReferenceCounted implements ReferenceCounted {
     }
 
     private boolean release0(int decrement) {
-        for (;;) {
-            int refCnt = this.refCnt;
+        int refCnt = refCntUpdater.getAndAdd(this, -decrement);
         if (refCnt < decrement) {
+            refCntUpdater.getAndAdd(this, decrement);
             throw new IllegalReferenceCountException(refCnt, -decrement);
         }
-
-            if (refCntUpdater.compareAndSet(this, refCnt, refCnt - decrement)) {
         if (refCnt == decrement) {
             deallocate();
             return true;
         }
         return false;
     }
-        }
-    }
 
     /**
      * Called once {@link #refCnt()} is equals 0.
