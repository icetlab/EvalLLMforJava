diff --git a/common/src/main/java/io/netty/util/NetUtil.java b/common/src/main/java/io/netty/util/NetUtil.java
index fbe09ea676..a92e1feedc 100644
--- a/common/src/main/java/io/netty/util/NetUtil.java
+++ b/common/src/main/java/io/netty/util/NetUtil.java
@@ -997,7 +997,17 @@ public final class NetUtil {
         int i;
         final int end = offset + words.length;
         for (i = offset; i < end; ++i) {
-            words[i] = ((bytes[i << 1] & 0xff) << 8) | (bytes[(i << 1) + 1] & 0xff);
+            words[i - offset] = ((bytes[i << 1] & 0xff) << 8) | (bytes[(i << 1) + 1] & 0xff);
+        }
+
+        if (ipv4Mapped && words[0] == 0 && words[1] == 0 && words[2] == 0 && words[3] == 0 &&
+            words[4] == 0 && words[5] == 0xffff) {
+            // This is an IPv4-mapped address. Format: ::ffff:d.d.d.d
+            return new StringBuilder(IPV6_MAX_CHAR_COUNT)
+                    .append("::ffff:")
+                    .append(words[6] >> 8).append('.').append(words[6] & 0xff).append('.')
+                    .append(words[7] >> 8).append('.').append(words[7] & 0xff)
+                    .toString();
         }
 
         // Find longest run of 0s, tie goes to first found instance
@@ -1044,31 +1054,18 @@ public final class NetUtil {
             }
         } else { // General case that can handle compressing (and not compressing)
             // Loop unroll the first index (so we don't constantly check i==0 cases in loop)
-            final boolean isIpv4Mapped;
             if (inRangeEndExclusive(0, shortestStart, shortestEnd)) {
                 b.append("::");
-                isIpv4Mapped = ipv4Mapped && (shortestEnd == 5 && words[5] == 0xffff);
             } else {
                 b.append(Integer.toHexString(words[0]));
-                isIpv4Mapped = false;
             }
             for (i = 1; i < words.length; ++i) {
                 if (!inRangeEndExclusive(i, shortestStart, shortestEnd)) {
                     if (!inRangeEndExclusive(i - 1, shortestStart, shortestEnd)) {
                         // If the last index was not part of the shortened sequence
-                        if (!isIpv4Mapped || i == 6) {
-                            b.append(':');
-                        } else {
-                            b.append('.');
-                        }
-                    }
-                    if (isIpv4Mapped && i > 5) {
-                        b.append(words[i] >> 8);
-                        b.append('.');
-                        b.append(words[i] & 0xff);
-                    } else {
-                        b.append(Integer.toHexString(words[i]));
+                        b.append(':');
                     }
+                    b.append(Integer.toHexString(words[i]));
                 } else if (!inRangeEndExclusive(i - 1, shortestStart, shortestEnd)) {
                     // If we are in the shortened sequence and the last index was not
                     b.append("::");
