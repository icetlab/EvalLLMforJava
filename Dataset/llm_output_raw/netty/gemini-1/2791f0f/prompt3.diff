diff --git a/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
index 656c57847b..0223038101 100644
--- a/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
+++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
@@ -50,6 +50,10 @@ public abstract class AbstractScheduledEventExecutor extends AbstractEventExecut
         return ScheduledFutureTask.nanoTime();
     }
 
+    protected long currentTimeNanos() {
+        return nanoTime();
+    }
+
     /**
      * Given an arbitrary deadline {@code deadlineNanos}, calculate the number of nano seconds from now
      * {@code deadlineNanos} would expire.
@@ -167,7 +171,7 @@ public abstract class AbstractScheduledEventExecutor extends AbstractEventExecut
         validateScheduled0(delay, unit);
 
         return schedule(new ScheduledFutureTask<Void>(
-                this, command, null, ScheduledFutureTask.deadlineNanos(unit.toNanos(delay))));
+                this, command, null, ScheduledFutureTask.deadlineNanos(unit.toNanos(delay), currentTimeNanos())));
     }
 
     @Override
@@ -180,7 +184,7 @@ public abstract class AbstractScheduledEventExecutor extends AbstractEventExecut
         validateScheduled0(delay, unit);
 
         return schedule(new ScheduledFutureTask<V>(
-                this, callable, ScheduledFutureTask.deadlineNanos(unit.toNanos(delay))));
+                this, callable, ScheduledFutureTask.deadlineNanos(unit.toNanos(delay), currentTimeNanos())));
     }
 
     @Override
@@ -200,7 +204,7 @@ public abstract class AbstractScheduledEventExecutor extends AbstractEventExecut
 
         return schedule(new ScheduledFutureTask<Void>(
                 this, Executors.<Void>callable(command, null),
-                ScheduledFutureTask.deadlineNanos(unit.toNanos(initialDelay)), unit.toNanos(period)));
+                ScheduledFutureTask.deadlineNanos(unit.toNanos(initialDelay), currentTimeNanos()), unit.toNanos(period)));
     }
 
     @Override
@@ -221,7 +225,7 @@ public abstract class AbstractScheduledEventExecutor extends AbstractEventExecut
 
         return schedule(new ScheduledFutureTask<Void>(
                 this, Executors.<Void>callable(command, null),
-                ScheduledFutureTask.deadlineNanos(unit.toNanos(initialDelay)), -unit.toNanos(delay)));
+                ScheduledFutureTask.deadlineNanos(unit.toNanos(initialDelay), currentTimeNanos()), -unit.toNanos(delay)));
     }
 
     @SuppressWarnings("deprecation")
diff --git a/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
index 1d1403e3f0..4cdc57a305 100644
--- a/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
+++ b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
@@ -35,7 +35,11 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
     }
 
     static long deadlineNanos(long delay) {
-        long deadlineNanos = nanoTime() + delay;
+        return deadlineNanos(delay, nanoTime());
+    }
+
+    static long deadlineNanos(long delay, long currentTimeNanos) {
+        long deadlineNanos = currentTimeNanos + delay;
         // Guard against overflow
         return deadlineNanos < 0 ? Long.MAX_VALUE : deadlineNanos;
     }
@@ -142,7 +146,7 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
                         if (periodNanos > 0) {
                             deadlineNanos += periodNanos;
                         } else {
-                            deadlineNanos = nanoTime() - periodNanos;
+                            deadlineNanos = ((AbstractScheduledEventExecutor) executor()).currentTimeNanos() - periodNanos;
                         }
                         if (!isCancelled()) {
                             // scheduledTaskQueue can never be null as we lazy init it before submit the task!
