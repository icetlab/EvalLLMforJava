diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java
index 0db8a4ce34..2e1805ac4b 100644
--- a/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java
+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java
@@ -42,35 +42,35 @@ public class HttpRequestEncoder extends HttpObjectEncoder<HttpRequest> {
         // Add / as absolute path if no is present.
         // See http://tools.ietf.org/html/rfc2616#section-5.1.2
         String uri = request.uri();
-
+        int slashInsertPos = -1;
         if (uri.isEmpty()) {
-            uri += SLASH;
+            // empty URIs become "/"
+            buf.writeByte(SLASH);
         } else {
             int start = uri.indexOf("://");
             if (start != -1 && uri.charAt(0) != SLASH) {
                 int startIndex = start + 3;
-                // Correctly handle query params.
-                // See https://github.com/netty/netty/issues/2732
-                int index = uri.indexOf(QUESTION_MARK, startIndex);
-                if (index == -1) {
+                int qmIndex = uri.indexOf(QUESTION_MARK, startIndex);
+                if (qmIndex == -1) {
                     if (uri.lastIndexOf(SLASH) <= startIndex) {
-                        uri += SLASH;
+                        slashInsertPos = uri.length();
                     }
                 } else {
-                    if (uri.lastIndexOf(SLASH, index) <= startIndex) {
-                        int len = uri.length();
-                        StringBuilder sb = new StringBuilder(len + 1);
-                        sb.append(uri, 0, index)
-                          .append(SLASH)
-                          .append(uri, index, len);
-                        uri = sb.toString();
+                    if (uri.lastIndexOf(SLASH, qmIndex) <= startIndex) {
+                        slashInsertPos = qmIndex;
+                    }
                 }
             }
+            byte[] uriBytes = uri.getBytes(CharsetUtil.UTF_8);
+            if (slashInsertPos >= 0) {
+                buf.writeBytes(uriBytes, 0, slashInsertPos);
+                buf.writeByte(SLASH);
+                buf.writeBytes(uriBytes, slashInsertPos, uriBytes.length - slashInsertPos);
+            } else {
+                buf.writeBytes(uriBytes);
             }
         }
 
-        buf.writeCharSequence(uri, CharsetUtil.UTF_8);
-
         buf.writeByte(SP);
         request.protocolVersion().encode(buf);
         buf.writeBytes(CRLF);
