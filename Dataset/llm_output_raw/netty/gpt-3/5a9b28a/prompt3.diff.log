Iâ€™ve added an initial capacity to the internal ArrayDeque in BlockingMessageQueue to avoid repeated resizing under load, reducing GC churn and improving offer/poll performance when the blocking pool is enabled.

```json
[
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/Recycler.java",
    "search": "BlockingMessageQueue(int maxCapacity) {\n            this.maxCapacity = maxCapacity;\n            // This message passing queue is backed by an ArrayDeque instance,\n            // made thread-safe by synchronising on `this` BlockingMessageQueue instance.\n            // Why ArrayDeque?\n            // We use ArrayDeque instead of LinkedList or LinkedBlockingQueue because it's more space efficient.\n            // We use ArrayDeque instead of ArrayList because we need the queue APIs.\n            // We use ArrayDeque instead of ConcurrentLinkedQueue because CLQ is unbounded and has O(n) size().\n            // We use ArrayDeque instead of ArrayBlockingQueue because ABQ allocates its max capacity up-front,\n            // and these queues will usually have large capacities, in potentially great numbers (one per thread),\n            // but often only have comparatively few items in them.\n            deque = new ArrayDeque<T>();",
    "replace": "BlockingMessageQueue(int maxCapacity) {\n            this.maxCapacity = maxCapacity;\n            // This message passing queue is backed by an ArrayDeque instance,\n            // made thread-safe by synchronising on `this` BlockingMessageQueue instance.\n            // Why ArrayDeque?\n            // We use ArrayDeque instead of LinkedList or LinkedBlockingQueue because it's more space efficient.\n            // We use ArrayDeque instead of ArrayList because we need the queue APIs.\n            // We use ArrayDeque instead of ConcurrentLinkedQueue because CLQ is unbounded and has O(n) size().\n            // We use ArrayDeque instead of ArrayBlockingQueue because ABQ allocates its max capacity up-front,\n            // and these queues will usually have large capacities, in potentially great numbers (one per thread),\n            // but often only have comparatively few items in them.\n            // Pre-allocate backing array to maxCapacity to reduce resizing:\n            deque = new ArrayDeque<T>(maxCapacity);"
  }
]
```