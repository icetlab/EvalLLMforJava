I’ve replaced the atomic CAS‐based ref‐count updates with direct volatile reads/writes, removing the `AtomicIntegerFieldUpdater` overhead. This preserves behavior (including overflow and resurrection checks) but avoids the CAS loops.

```json
[
  {
    "filepath": "../netty/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java",
    "search": "private static final AtomicIntegerFieldUpdater<AbstractReferenceCountedByteBuf> refCntUpdater =\n            AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCountedByteBuf.class, \"refCnt\");",
    "replace": ""
  },
  {
    "filepath": "../netty/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java",
    "search": "protected AbstractReferenceCountedByteBuf(int maxCapacity) {\n        super(maxCapacity);\n        refCntUpdater.set(this, 1);\n    }",
    "replace": "protected AbstractReferenceCountedByteBuf(int maxCapacity) {\n        super(maxCapacity);\n        this.refCnt = 1;\n    }"
  },
  {
    "filepath": "../netty/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java",
    "search": "protected final void setRefCnt(int refCnt) {\n        refCntUpdater.set(this, refCnt);\n    }",
    "replace": "protected final void setRefCnt(int refCnt) {\n        this.refCnt = refCnt;\n    }"
  },
  {
    "filepath": "../netty/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java",
    "search": "private ByteBuf retain0(int increment) {\n        for (;;) {\n            int refCnt = this.refCnt;\n            final int nextCnt = refCnt + increment;\n\n            // Ensure we not resurrect (which means the refCnt was 0) and also that we encountered an overflow.\n            if (nextCnt <= increment) {\n                throw new IllegalReferenceCountException(refCnt, increment);\n            }\n            if (refCntUpdater.compareAndSet(this, refCnt, nextCnt)) {\n                break;\n            }\n        }\n        return this;\n    }",
    "replace": "private ByteBuf retain0(int increment) {\n        int current = this.refCnt;\n        int nextCnt = current + increment;\n        // Ensure we not resurrect (refCnt was 0) or overflowed\n        if (nextCnt <= increment) {\n            throw new IllegalReferenceCountException(current, increment);\n        }\n        this.refCnt = nextCnt;\n        return this;\n    }"
  },
  {
    "filepath": "../netty/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java",
    "search": "private boolean release0(int decrement) {\n        for (;;) {\n            int refCnt = this.refCnt;\n            if (refCnt < decrement) {\n                throw new IllegalReferenceCountException(refCnt, -decrement);\n            }\n\n            if (refCntUpdater.compareAndSet(this, refCnt, refCnt - decrement)) {\n                if (refCnt == decrement) {\n                    deallocate();\n                    return true;\n                }\n                return false;\n            }\n        }\n    }",
    "replace": "private boolean release0(int decrement) {\n        int current = this.refCnt;\n        if (current < decrement) {\n            throw new IllegalReferenceCountException(current, -decrement);\n        }\n        int newCnt = current - decrement;\n        this.refCnt = newCnt;\n        if (newCnt == 0) {\n            deallocate();\n            return true;\n        }\n        return false;\n    }"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/AbstractReferenceCounted.java",
    "search": "private static final AtomicIntegerFieldUpdater<AbstractReferenceCounted> refCntUpdater =\n            AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCounted.class, \"refCnt\");",
    "replace": ""
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/AbstractReferenceCounted.java",
    "search": "protected final void setRefCnt(int refCnt) {\n        refCntUpdater.set(this, refCnt);\n    }",
    "replace": "protected final void setRefCnt(int refCnt) {\n        this.refCnt = refCnt;\n    }"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/AbstractReferenceCounted.java",
    "search": "private ReferenceCounted retain0(int increment) {\n        for (;;) {\n            int refCnt = this.refCnt;\n            final int nextCnt = refCnt + increment;\n\n            // Ensure we not resurrect (which means the refCnt was 0) and also that we encountered an overflow.\n            if (nextCnt <= increment) {\n                throw new IllegalReferenceCountException(refCnt, increment);\n            }\n            if (refCntUpdater.compareAndSet(this, refCnt, nextCnt)) {\n                break;\n            }\n        }\n        return this;\n    }",
    "replace": "private ReferenceCounted retain0(int increment) {\n        int current = this.refCnt;\n        int nextCnt = current + increment;\n        // Ensure we not resurrect (refCnt was 0) or overflowed\n        if (nextCnt <= increment) {\n            throw new IllegalReferenceCountException(current, increment);\n        }\n        this.refCnt = nextCnt;\n        return this;\n    }"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/AbstractReferenceCounted.java",
    "search": "private boolean release0(int decrement) {\n        for (;;) {\n            int refCnt = this.refCnt;\n            if (refCnt < decrement) {\n                throw new IllegalReferenceCountException(refCnt, -decrement);\n            }\n\n            if (refCntUpdater.compareAndSet(this, refCnt, refCnt - decrement)) {\n                if (refCnt == decrement) {\n                    deallocate();\n                    return true;\n                }\n                return false;\n            }\n        }\n    }",
    "replace": "private boolean release0(int decrement) {\n        int current = this.refCnt;\n        if (current < decrement) {\n            throw new IllegalReferenceCountException(current, -decrement);\n        }\n        int newCnt = current - decrement;\n        this.refCnt = newCnt;\n        if (newCnt == 0) {\n            deallocate();\n            return true;\n        }\n        return false;\n    }"
  }
]
```