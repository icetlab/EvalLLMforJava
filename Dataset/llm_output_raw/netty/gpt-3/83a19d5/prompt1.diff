diff --git a/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
index e657ad86f8..4a15c71a0f 100644
--- a/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
+++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
@@ -96,12 +96,23 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
     }
 
     private boolean release0(int decrement) {
+        if (decrement == 1) {
+            int newRef = refCntUpdater.decrementAndGet(this);
+            if (newRef < 0) {
+                refCntUpdater.incrementAndGet(this);
+                throw new IllegalReferenceCountException(0, -1);
+            }
+            if (newRef == 0) {
+                deallocate();
+                return true;
+            }
+            return false;
+        }
         for (;;) {
             int refCnt = this.refCnt;
             if (refCnt < decrement) {
                 throw new IllegalReferenceCountException(refCnt, -decrement);
             }
-
             if (refCntUpdater.compareAndSet(this, refCnt, refCnt - decrement)) {
                 if (refCnt == decrement) {
                     deallocate();
diff --git a/common/src/main/java/io/netty/util/AbstractReferenceCounted.java b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
index 493bcc1872..16a529c72a 100644
--- a/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
+++ b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
@@ -83,12 +83,23 @@ public abstract class AbstractReferenceCounted implements ReferenceCounted {
     }
 
     private boolean release0(int decrement) {
+        if (decrement == 1) {
+            int newRef = refCntUpdater.decrementAndGet(this);
+            if (newRef < 0) {
+                refCntUpdater.incrementAndGet(this);
+                throw new IllegalReferenceCountException(0, -1);
+            }
+            if (newRef == 0) {
+                deallocate();
+                return true;
+            }
+            return false;
+        }
         for (;;) {
             int refCnt = this.refCnt;
             if (refCnt < decrement) {
                 throw new IllegalReferenceCountException(refCnt, -decrement);
             }
-
             if (refCntUpdater.compareAndSet(this, refCnt, refCnt - decrement)) {
                 if (refCnt == decrement) {
                     deallocate();
