I’ve updated the LocalPool.claim() method to pop from the tail of the per‐thread batch (LIFO) rather than from the head (FIFO). This both better matches the intended stack semantics and avoids the less efficient pollFirst call on ArrayDeque, improving cache locality and overall performance.

```json
[
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/Recycler.java",
    "search": "if (batch.isEmpty()) {\n                handles.drain(this, chunkSize);\n            }\n            DefaultHandle<T> handle = batch.pollFirst();",
    "replace": "if (batch.isEmpty()) {\n                handles.drain(this, chunkSize);\n            }\n            // Pop from tail for LIFO behavior and better locality\n            DefaultHandle<T> handle = batch.pollLast();"
  }
]
```