diff --git a/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
index e657ad86f8..8bae956b90 100644
--- a/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
+++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
@@ -60,17 +60,12 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
     }
 
     private ByteBuf retain0(int increment) {
-        for (;;) {
-            int refCnt = this.refCnt;
-            final int nextCnt = refCnt + increment;
-
-            // Ensure we not resurrect (which means the refCnt was 0) and also that we encountered an overflow.
-            if (nextCnt <= increment) {
-                throw new IllegalReferenceCountException(refCnt, increment);
-            }
-            if (refCntUpdater.compareAndSet(this, refCnt, nextCnt)) {
-                break;
-            }
+        int newCnt = refCntUpdater.addAndGet(this, increment);
+        int oldCnt = newCnt - increment;
+        if (oldCnt <= 0 || newCnt <= increment) {
+            // revert
+            refCntUpdater.addAndGet(this, -increment);
+            throw new IllegalReferenceCountException(oldCnt, increment);
         }
         return this;
     }
@@ -96,21 +91,19 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
     }
 
     private boolean release0(int decrement) {
-        for (;;) {
-            int refCnt = this.refCnt;
-            if (refCnt < decrement) {
-                throw new IllegalReferenceCountException(refCnt, -decrement);
-            }
-
-            if (refCntUpdater.compareAndSet(this, refCnt, refCnt - decrement)) {
-                if (refCnt == decrement) {
+        int newCnt = refCntUpdater.addAndGet(this, -decrement);
+        int oldCnt = newCnt + decrement;
+        if (oldCnt < decrement) {
+            // revert
+            refCntUpdater.addAndGet(this, decrement);
+            throw new IllegalReferenceCountException(oldCnt, -decrement);
+        }
+        if (newCnt == 0) {
             deallocate();
             return true;
         }
         return false;
     }
-        }
-    }
     /**
      * Called once {@link #refCnt()} is equals 0.
      */
diff --git a/common/src/main/java/io/netty/util/AbstractReferenceCounted.java b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
index 493bcc1872..ad551c3efa 100644
--- a/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
+++ b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
@@ -52,17 +52,12 @@ public abstract class AbstractReferenceCounted implements ReferenceCounted {
     }
 
     private ReferenceCounted retain0(int increment) {
-        for (;;) {
-            int refCnt = this.refCnt;
-            final int nextCnt = refCnt + increment;
-
-            // Ensure we not resurrect (which means the refCnt was 0) and also that we encountered an overflow.
-            if (nextCnt <= increment) {
-                throw new IllegalReferenceCountException(refCnt, increment);
-            }
-            if (refCntUpdater.compareAndSet(this, refCnt, nextCnt)) {
-                break;
-            }
+        int newCnt = refCntUpdater.addAndGet(this, increment);
+        int oldCnt = newCnt - increment;
+        if (oldCnt <= 0 || newCnt <= increment) {
+            // revert
+            refCntUpdater.addAndGet(this, -increment);
+            throw new IllegalReferenceCountException(oldCnt, increment);
         }
         return this;
     }
@@ -83,21 +78,19 @@ public abstract class AbstractReferenceCounted implements ReferenceCounted {
     }
 
     private boolean release0(int decrement) {
-        for (;;) {
-            int refCnt = this.refCnt;
-            if (refCnt < decrement) {
-                throw new IllegalReferenceCountException(refCnt, -decrement);
-            }
-
-            if (refCntUpdater.compareAndSet(this, refCnt, refCnt - decrement)) {
-                if (refCnt == decrement) {
+        int newCnt = refCntUpdater.addAndGet(this, -decrement);
+        int oldCnt = newCnt + decrement;
+        if (oldCnt < decrement) {
+            // revert
+            refCntUpdater.addAndGet(this, decrement);
+            throw new IllegalReferenceCountException(oldCnt, -decrement);
+        }
+        if (newCnt == 0) {
             deallocate();
             return true;
         }
         return false;
     }
-        }
-    }
 
     /**
      * Called once {@link #refCnt()} is equals 0.
