diff --git a/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
index e657ad86f8..f127c7c032 100644
--- a/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
+++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
@@ -60,15 +60,16 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
     }
 
     private ByteBuf retain0(int increment) {
-        for (;;) {
-            int refCnt = this.refCnt;
-            final int nextCnt = refCnt + increment;
-
+        AtomicIntegerFieldUpdater<AbstractReferenceCountedByteBuf> updater = refCntUpdater;
+        int refCnt;
+        while (true) {
+            refCnt = this.refCnt;
+            int nextCnt = refCnt + increment;
             // Ensure we not resurrect (which means the refCnt was 0) and also that we encountered an overflow.
             if (nextCnt <= increment) {
                 throw new IllegalReferenceCountException(refCnt, increment);
             }
-            if (refCntUpdater.compareAndSet(this, refCnt, nextCnt)) {
+            if (updater.compareAndSet(this, refCnt, nextCnt)) {
                 break;
             }
         }
@@ -96,13 +97,15 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
     }
 
     private boolean release0(int decrement) {
-        for (;;) {
-            int refCnt = this.refCnt;
+        AtomicIntegerFieldUpdater<AbstractReferenceCountedByteBuf> updater = refCntUpdater;
+        int refCnt;
+        while (true) {
+            refCnt = this.refCnt;
             if (refCnt < decrement) {
                 throw new IllegalReferenceCountException(refCnt, -decrement);
             }
-
-            if (refCntUpdater.compareAndSet(this, refCnt, refCnt - decrement)) {
+            int nextCnt = refCnt - decrement;
+            if (updater.compareAndSet(this, refCnt, nextCnt)) {
                 if (refCnt == decrement) {
                     deallocate();
                     return true;
diff --git a/common/src/main/java/io/netty/util/AbstractReferenceCounted.java b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
index 493bcc1872..bcfd099989 100644
--- a/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
+++ b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
@@ -52,15 +52,16 @@ public abstract class AbstractReferenceCounted implements ReferenceCounted {
     }
 
     private ReferenceCounted retain0(int increment) {
-        for (;;) {
-            int refCnt = this.refCnt;
-            final int nextCnt = refCnt + increment;
-
+        AtomicIntegerFieldUpdater<AbstractReferenceCounted> updater = refCntUpdater;
+        int refCnt;
+        while (true) {
+            refCnt = this.refCnt;
+            int nextCnt = refCnt + increment;
             // Ensure we not resurrect (which means the refCnt was 0) and also that we encountered an overflow.
             if (nextCnt <= increment) {
                 throw new IllegalReferenceCountException(refCnt, increment);
             }
-            if (refCntUpdater.compareAndSet(this, refCnt, nextCnt)) {
+            if (updater.compareAndSet(this, refCnt, nextCnt)) {
                 break;
             }
         }
@@ -83,13 +84,15 @@ public abstract class AbstractReferenceCounted implements ReferenceCounted {
     }
 
     private boolean release0(int decrement) {
-        for (;;) {
-            int refCnt = this.refCnt;
+        AtomicIntegerFieldUpdater<AbstractReferenceCounted> updater = refCntUpdater;
+        int refCnt;
+        while (true) {
+            refCnt = this.refCnt;
             if (refCnt < decrement) {
                 throw new IllegalReferenceCountException(refCnt, -decrement);
             }
-
-            if (refCntUpdater.compareAndSet(this, refCnt, refCnt - decrement)) {
+            int nextCnt = refCnt - decrement;
+            if (updater.compareAndSet(this, refCnt, nextCnt)) {
                 if (refCnt == decrement) {
                     deallocate();
                     return true;
