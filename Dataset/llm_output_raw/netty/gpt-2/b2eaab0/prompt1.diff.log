I have introduced a cached boolean flag to avoid repeated `hasUnsafe()` / `unalignedAccess()` checks at runtime, and updated the critical byte-array operations (`equals`, `isZero`, `equalsConstantTime`, `hashCodeAscii`) to use this flag, reducing method-call overhead and branching.

```json
[
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/internal/PlatformDependent.java",
    "search": "private static final InternalLogger logger = InternalLoggerFactory.getInstance(PlatformDependent.class);",
    "replace": "private static final InternalLogger logger = InternalLoggerFactory.getInstance(PlatformDependent.class);\n\n    // Cache the unsafe+unaligned check to avoid repeated method calls\n    private static final boolean USE_UNSAFE_AND_ALIGNED = hasUnsafe() && unalignedAccess();"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/internal/PlatformDependent.java",
    "search": "public static boolean equals(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {\n        return !hasUnsafe() || !unalignedAccess() ?\n                  equalsSafe(bytes1, startPos1, bytes2, startPos2, length) :\n                  PlatformDependent0.equals(bytes1, startPos1, bytes2, startPos2, length);\n    }",
    "replace": "public static boolean equals(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {\n        return USE_UNSAFE_AND_ALIGNED ?\n                  PlatformDependent0.equals(bytes1, startPos1, bytes2, startPos2, length) :\n                  equalsSafe(bytes1, startPos1, bytes2, startPos2, length);\n    }"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/internal/PlatformDependent.java",
    "search": "public static boolean isZero(byte[] bytes, int startPos, int length) {\n        return !hasUnsafe() || !unalignedAccess() ?\n                isZeroSafe(bytes, startPos, length) :\n                PlatformDependent0.isZero(bytes, startPos, length);\n    }",
    "replace": "public static boolean isZero(byte[] bytes, int startPos, int length) {\n        return USE_UNSAFE_AND_ALIGNED ?\n                PlatformDependent0.isZero(bytes, startPos, length) :\n                isZeroSafe(bytes, startPos, length);\n    }"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/internal/PlatformDependent.java",
    "search": "public static int equalsConstantTime(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {\n        return !hasUnsafe() || !unalignedAccess() ?\n                  ConstantTimeUtils.equalsConstantTime(bytes1, startPos1, bytes2, startPos2, length) :\n                  PlatformDependent0.equalsConstantTime(bytes1, startPos1, bytes2, startPos2, length);\n    }",
    "replace": "public static int equalsConstantTime(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {\n        return USE_UNSAFE_AND_ALIGNED ?\n                  PlatformDependent0.equalsConstantTime(bytes1, startPos1, bytes2, startPos2, length) :\n                  ConstantTimeUtils.equalsConstantTime(bytes1, startPos1, bytes2, startPos2, length);\n    }"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/internal/PlatformDependent.java",
    "search": "public static int hashCodeAscii(byte[] bytes, int startPos, int length) {\n        return !hasUnsafe() || !unalignedAccess() ?\n                hashCodeAsciiSafe(bytes, startPos, length) :\n                PlatformDependent0.hashCodeAscii(bytes, startPos, length);\n    }",
    "replace": "public static int hashCodeAscii(byte[] bytes, int startPos, int length) {\n        return USE_UNSAFE_AND_ALIGNED ?\n                PlatformDependent0.hashCodeAscii(bytes, startPos, length) :\n                hashCodeAsciiSafe(bytes, startPos, length);\n    }"
  }
]
```