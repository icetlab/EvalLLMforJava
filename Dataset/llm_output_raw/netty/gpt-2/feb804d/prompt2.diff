diff --git a/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
index c132aa5b20..b27919a2f3 100644
--- a/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
+++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
@@ -249,17 +249,13 @@ public abstract class AbstractScheduledEventExecutor extends AbstractEventExecut
             scheduledTaskQueue().add(task.setId(nextTaskId++));
         } else {
             final long deadlineNanos = task.deadlineNanos();
-            final Runnable addToQueue = new Runnable() {
-                @Override
-                public void run() {
-                    scheduledTaskQueue().add(task.setId(nextTaskId++));
-                }
-            };
+            // assign id and mark task for enqueue when run()
+            task.setId(nextTaskId++);
+            task.setEnqueuePending(true);
             if (beforeScheduledTaskSubmitted(deadlineNanos)) {
-                execute(addToQueue);
+                execute(task);
             } else {
-                lazyExecute(addToQueue);
-                // Second hook after scheduling to facilitate race-avoidance
+                lazyExecute(task);
                 if (afterScheduledTaskSubmitted(deadlineNanos)) {
                     execute(WAKEUP_TASK);
                 }
diff --git a/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
index 5ffe824119..3ae194d024 100644
--- a/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
+++ b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
@@ -51,6 +51,13 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
 
     private int queueIndex = INDEX_NOT_IN_QUEUE;
 
+    // Flag indicating the first run should enqueue this task rather than execute it
+    private boolean enqueuePending;
+
+    void setEnqueuePending(boolean enqueuePending) {
+        this.enqueuePending = enqueuePending;
+    }
+
     ScheduledFutureTask(AbstractScheduledEventExecutor executor,
             Runnable runnable, long nanoTime) {
 
@@ -143,6 +150,12 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
 
     @Override
     public void run() {
+        // scheduling phase: enqueue into the scheduledTaskQueue
+        if (enqueuePending) {
+            enqueuePending = false;
+            ((AbstractScheduledEventExecutor) executor()).scheduledTaskQueue().add(this);
+            return;
+        }
         assert executor().inEventLoop();
         try {
             if (periodNanos == 0) {
