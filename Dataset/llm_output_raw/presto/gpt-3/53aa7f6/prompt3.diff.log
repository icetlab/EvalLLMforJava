The changes below replace stream-based BlockBuilder allocations with explicit for‐loops and ArrayLists to reduce object churn and improve performance.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/GeneratedPageProjection.java",
    "search": "import java.util.List;",
    "replace": "import java.util.List;\nimport java.util.ArrayList;"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/GeneratedPageProjection.java",
    "search": "this.blockBuilders = projections.stream().map(RowExpression::getType).map(type -> type.createBlockBuilder(null, 1)).collect(toImmutableList());",
    "replace": "List<BlockBuilder> builders = new ArrayList<>(projections.size());\nfor (RowExpression expression : projections) {\n    builders.add(expression.getType().createBlockBuilder(null, 1));\n}\nthis.blockBuilders = builders;"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/GeneratedPageProjection.java",
    "search": "blockBuilders = blockBuilders.stream().map(blockBuilder -> blockBuilder.newBlockBuilderLike(null)).collect(toImmutableList());",
    "replace": "List<BlockBuilder> newBuilders = new ArrayList<>(blockBuilders.size());\nfor (BlockBuilder blockBuilder : blockBuilders) {\n    newBuilders.add(blockBuilder.newBlockBuilderLike(null));\n}\nblockBuilders = newBuilders;"
  }
]
```