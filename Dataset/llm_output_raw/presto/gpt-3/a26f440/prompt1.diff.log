I have optimized the `merge(TDigest other)` method to avoid creating temporary `Centroid` objects and an intermediate list. Instead, it shuffles an array of indices and merges directly from the other digestâ€™s primitive arrays, reducing object allocation and improving performance.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java",
    "search": "public void merge(TDigest other)\n    {\n        checkArgument(other != null, \"Cannot merge with a null t-digest\");\n        checkArgument(this.publicCompression == other.getCompressionFactor(), \"TDigests must have the same compression, found (%s, %s)\", this.publicCompression,\n                other.getCompressionFactor());\n        List<Centroid> tmp = new ArrayList<>();\n        for (Centroid centroid : other.centroids()) {\n            tmp.add(centroid);\n        }\n\n        shuffle(tmp, gen);\n        for (Centroid centroid : tmp) {\n            add(centroid.getMean(), centroid.getWeight());\n        }\n    }",
    "replace": "public void merge(TDigest other)\n    {\n        checkArgument(other != null, \"Cannot merge with a null t-digest\");\n        checkArgument(this.publicCompression == other.getCompressionFactor(), \"TDigests must have the same compression, found (%s, %s)\", this.publicCompression, other.getCompressionFactor());\n\n        // ensure other is fully compressed\n        other.compress();\n        int n = other.activeCentroids;\n        // build and shuffle an index array to randomize merge order without object allocations\n        int[] order = new int[n];\n        for (int i = 0; i < n; i++) {\n            order[i] = i;\n        }\n        for (int i = n - 1; i > 0; i--) {\n            int j = gen.nextInt(i + 1);\n            int tmpIdx = order[i];\n            order[i] = order[j];\n            order[j] = tmpIdx;\n        }\n\n        // merge directly from other.mean and other.weight\n        for (int idx : order) {\n            add(other.mean[idx], (long) other.weight[idx]);\n        }\n    }"
  }
]
```