diff --git a/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java b/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java
index ce0ca747f2..eafb0246a1 100644
--- a/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java
+++ b/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java
@@ -213,16 +213,26 @@ public class TDigest
     public void merge(TDigest other)
     {
         checkArgument(other != null, "Cannot merge with a null t-digest");
-        checkArgument(this.publicCompression == other.getCompressionFactor(), "TDigests must have the same compression, found (%s, %s)", this.publicCompression,
-                other.getCompressionFactor());
-        List<Centroid> tmp = new ArrayList<>();
-        for (Centroid centroid : other.centroids()) {
-            tmp.add(centroid);
-        }
-
-        shuffle(tmp, gen);
-        for (Centroid centroid : tmp) {
-            add(centroid.getMean(), centroid.getWeight());
+        checkArgument(this.publicCompression == other.getCompressionFactor(), "TDigests must have the same compression, found (%s, %s)", this.publicCompression, other.getCompressionFactor());
+
+        // ensure other is fully compressed
+        other.compress();
+        int n = other.activeCentroids;
+        // build and shuffle an index array to randomize merge order without object allocations
+        int[] order = new int[n];
+        for (int i = 0; i < n; i++) {
+            order[i] = i;
+        }
+        for (int i = n - 1; i > 0; i--) {
+            int j = gen.nextInt(i + 1);
+            int tmpIdx = order[i];
+            order[i] = order[j];
+            order[j] = tmpIdx;
+        }
+
+        // merge directly from other.mean and other.weight
+        for (int idx : order) {
+            add(other.mean[idx], (long) other.weight[idx]);
         }
     }
 
