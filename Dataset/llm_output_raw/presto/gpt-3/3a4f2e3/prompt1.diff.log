I’ve hoisted the calls to filter.getPrecedingPositionsToFail() and filter.getSucceedingPositionsToFail() outside the per‐iteration loop so they’re computed once, and updated the loop to use the local variables. This reduces virtual method calls on each iteration and should improve read performance without changing behavior.

```json
[
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/BooleanSelectiveStreamReader.java",
    "search": "outputPositionCount = 0;",
    "replace": "outputPositionCount = 0;\nint preceding = filter.getPrecedingPositionsToFail();\nint succeeding = filter.getSucceedingPositionsToFail();"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/BooleanSelectiveStreamReader.java",
    "search": "outputPositionCount -= filter.getPrecedingPositionsToFail();",
    "replace": "outputPositionCount -= preceding;"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/BooleanSelectiveStreamReader.java",
    "search": "int succeedingPositionsToFail = filter.getSucceedingPositionsToFail();",
    "replace": ""
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/BooleanSelectiveStreamReader.java",
    "search": "succeedingPositionsToFail",
    "replace": "succeeding"
  }
]
```