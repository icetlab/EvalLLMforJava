diff --git a/presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java b/presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java
index 30e0088e35..7e4b664dfb 100644
--- a/presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java
+++ b/presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java
@@ -433,9 +433,10 @@ public class OptimizedPartitionedOutputOperator
         {
             // Populate positions to copy for each destination partition.
             int positionCount = page.getPositionCount();
+            PartitionBuffer[] buffers = partitionBuffers;
 
-            for (int i = 0; i < partitionBuffers.length; i++) {
-                partitionBuffers[i].resetPositions(positionCount);
+            for (int i = 0; i < buffers.length; i++) {
+                buffers[i].resetPositions(positionCount);
             }
 
             Block nullBlock = nullChannel.isPresent() ? page.getBlock(nullChannel.getAsInt()) : null;
@@ -446,8 +447,8 @@ public class OptimizedPartitionedOutputOperator
                         nullBlock != null && nullBlock.isNull(position);
 
                 if (shouldReplicate) {
-                    for (int i = 0; i < partitionBuffers.length; i++) {
-                        partitionBuffers[i].addPosition(position);
+                    for (int i = 0; i < buffers.length; i++) {
+                        buffers[i].addPosition(position);
                     }
                     hasAnyRowBeenReplicated = true;
                 }
@@ -463,8 +464,8 @@ public class OptimizedPartitionedOutputOperator
             }
 
             // Copy the data to their destination partitions and flush when the buffer is full.
-            for (int i = 0; i < partitionBuffers.length; i++) {
-                partitionBuffers[i].appendData(decodedBlocks, fixedWidthRowSize, variableWidthChannels, outputBuffer);
+            for (int i = 0; i < buffers.length; i++) {
+                buffers[i].appendData(decodedBlocks, fixedWidthRowSize, variableWidthChannels, outputBuffer);
             }
 
             // Return all borrowed arrays
@@ -478,8 +479,9 @@ public class OptimizedPartitionedOutputOperator
 
         public void flush()
         {
-            for (int i = 0; i < partitionBuffers.length; i++) {
-                partitionBuffers[i].flush(outputBuffer);
+            PartitionBuffer[] buffers = partitionBuffers;
+            for (int i = 0; i < buffers.length; i++) {
+                buffers[i].flush(outputBuffer);
             }
         }
 
@@ -491,12 +493,14 @@ public class OptimizedPartitionedOutputOperator
             // In both cases, the arrayAllocator doesn't need to be counted.
             long size = 0;
 
-            for (int i = 0; i < partitionBuffers.length; i++) {
-                size += partitionBuffers[i].getRetainedSizeInBytes();
+            PartitionBuffer[] buffers = partitionBuffers;
+            for (int i = 0; i < buffers.length; i++) {
+                size += buffers[i].getRetainedSizeInBytes();
             }
 
-            for (int i = 0; i < decodedBlocks.length; i++) {
-                size += decodedBlocks[i] == null ? 0 : decodedBlocks[i].getRetainedSizeInBytes();
+            DecodedBlockNode[] nodes = decodedBlocks;
+            for (int i = 0; i < nodes.length; i++) {
+                size += nodes[i] == null ? 0 : nodes[i].getRetainedSizeInBytes();
             }
 
             return size;
