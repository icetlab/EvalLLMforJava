diff --git a/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayDistinctFunction.java b/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayDistinctFunction.java
index a25a5916e6..faf1857dcb 100644
--- a/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayDistinctFunction.java
+++ b/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayDistinctFunction.java
@@ -72,19 +72,39 @@ public final class ArrayDistinctFunction
 
     public static Block distinct(Type type, Block array)
     {
-        if (array.getPositionCount() == 0) {
+        int positionCount = array.getPositionCount();
+        if (positionCount == 0) {
             return array;
         }
 
-        TypedSet typedSet = new TypedSet(type, array.getPositionCount());
-        BlockBuilder distinctElementBlockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), array.getPositionCount());
-        for (int i = 0; i < array.getPositionCount(); i++) {
+        BlockBuilder builder = type.createBlockBuilder(new BlockBuilderStatus(), positionCount);
+
+        // Fast path for small arrays: nested-loop comparison
+        if (positionCount <= 8) {
+            for (int i = 0; i < positionCount; i++) {
+                boolean duplicate = false;
+                for (int j = 0; j < i; j++) {
+                    if (type.equalTo(array, j, array, i)) {
+                        duplicate = true;
+                        break;
+                    }
+                }
+                if (!duplicate) {
+                    type.appendTo(array, i, builder);
+                }
+            }
+            return builder.build();
+        }
+
+        // Fallback to TypedSet for larger arrays
+        TypedSet typedSet = new TypedSet(type, positionCount);
+        for (int i = 0; i < positionCount; i++) {
             if (!typedSet.contains(array, i)) {
                 typedSet.add(array, i);
-                type.appendTo(array, i, distinctElementBlockBuilder);
+                type.appendTo(array, i, builder);
             }
         }
 
-        return distinctElementBlockBuilder.build();
+        return builder.build();
     }
 }
