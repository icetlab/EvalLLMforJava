Iâ€™ve optimized `mapCast` by caching `fromMap.getPositionCount()` in a local variable to avoid repeated calls, and by adding an early null-key check to skip unnecessary MethodHandle invocation when a key is null. These changes reduce per-entry overhead in the hot loop.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapToMapCast.java",
    "search": "Type toKeyType = toMapType.getTypeParameters().get(0);\n        TypedSet typedSet = new TypedSet(toKeyType, fromMap.getPositionCount() / 2, \"map-to-map cast\");\n        BlockBuilder keyBlockBuilder = toKeyType.createBlockBuilder(null, fromMap.getPositionCount() / 2);\n        for (int i = 0; i < fromMap.getPositionCount(); i += 2) {",
    "replace": "Type toKeyType = toMapType.getTypeParameters().get(0);\n        int positionCount = fromMap.getPositionCount();\n        int entryCount = positionCount / 2;\n        TypedSet typedSet = new TypedSet(toKeyType, entryCount, \"map-to-map cast\");\n        BlockBuilder keyBlockBuilder = toKeyType.createBlockBuilder(null, entryCount);\n        for (int i = 0; i < positionCount; i += 2) {"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapToMapCast.java",
    "search": "for (int i = 0; i < positionCount; i += 2) {\n            try {\n                keyProcessFunction.invokeExact(fromMap, i, properties, keyBlockBuilder);\n            }\n            catch (Throwable t) {",
    "replace": "for (int i = 0; i < positionCount; i += 2) {\n            if (fromMap.isNull(i)) {\n                throw new PrestoException(INVALID_CAST_ARGUMENT, \"map key is null\");\n            }\n            try {\n                keyProcessFunction.invokeExact(fromMap, i, properties, keyBlockBuilder);\n            }\n            catch (Throwable t) {"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapToMapCast.java",
    "search": "BlockBuilder blockBuilder = mapBlockBuilder.beginBlockEntry();\n        for (int i = 0; i < fromMap.getPositionCount(); i += 2) {",
    "replace": "BlockBuilder blockBuilder = mapBlockBuilder.beginBlockEntry();\n        for (int i = 0; i < positionCount; i += 2) {"
  }
]
```