Iâ€™ve inlined parameters into local variables in mapCast and updated the loops to use those locals, reducing repeated field and parameter lookups inside hot loops.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapToMapCast.java",
    "search": "checkState(toMapType.getTypeParameters().size() == 2, \"Expect two type parameters for toMapType\");\n        Type toKeyType = toMapType.getTypeParameters().get(0);\n        TypedSet typedSet = new TypedSet(toKeyType, fromMap.getPositionCount() / 2, \"map-to-map cast\");\n        BlockBuilder keyBlockBuilder = toKeyType.createBlockBuilder(null, fromMap.getPositionCount() / 2);\n        for (int i = 0; i < fromMap.getPositionCount(); i += 2) {\n            try {\n                keyProcessFunction.invokeExact(fromMap, i, properties, keyBlockBuilder);\n            }\n            catch (Throwable t) {\n                throw internalError(t);\n            }\n        }",
    "replace": "checkState(toMapType.getTypeParameters().size() == 2, \"Expect two type parameters for toMapType\");\n        // aliases to reduce repeated parameter lookups\n        SqlFunctionProperties propsLocal = properties;\n        Block input = fromMap;\n        MethodHandle keyFunc = keyProcessFunction;\n        MethodHandle valueFunc = valueProcessFunction;\n        Type toKeyTypeLocal = toMapType.getTypeParameters().get(0);\n        int entryCount = input.getPositionCount() / 2;\n        TypedSet typedSet = new TypedSet(toKeyTypeLocal, entryCount, \"map-to-map cast\");\n        BlockBuilder keyBlockBuilder = toKeyTypeLocal.createBlockBuilder(null, entryCount);\n        for (int i = 0; i < input.getPositionCount(); i += 2) {\n            try {\n                keyFunc.invokeExact(input, i, propsLocal, keyBlockBuilder);\n            }\n            catch (Throwable t) {\n                throw internalError(t);\n            }\n        }"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapToMapCast.java",
    "search": "for (int i = 0; i < fromMap.getPositionCount(); i += 2) {\n            if (typedSet.add(keyBlock, i / 2)) {\n                toKeyType.appendTo(keyBlock, i / 2, blockBuilder);\n                if (fromMap.isNull(i + 1)) {\n                    blockBuilder.appendNull();\n                    continue;\n                }\n\n                try {\n                    valueProcessFunction.invokeExact(fromMap, i + 1, properties, blockBuilder);\n                }\n                catch (Throwable t) {\n                    throw internalError(t);\n                }\n            }\n            else {\n                // if there are duplicated keys, fail it!\n                throw new PrestoException(INVALID_CAST_ARGUMENT, \"duplicate keys\");\n            }\n        }",
    "replace": "for (int i = 0; i < input.getPositionCount(); i += 2) {\n            if (typedSet.add(keyBlock, i / 2)) {\n                toKeyTypeLocal.appendTo(keyBlock, i / 2, blockBuilder);\n                if (input.isNull(i + 1)) {\n                    blockBuilder.appendNull();\n                    continue;\n                }\n\n                try {\n                    valueFunc.invokeExact(input, i + 1, propsLocal, blockBuilder);\n                }\n                catch (Throwable t) {\n                    throw internalError(t);\n                }\n            }\n            else {\n                // if there are duplicated keys, fail it!\n                throw new PrestoException(INVALID_CAST_ARGUMENT, \"duplicate keys\");\n            }\n        }"
  }
]
```