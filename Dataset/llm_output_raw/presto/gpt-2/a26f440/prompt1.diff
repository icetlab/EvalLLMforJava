diff --git a/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java b/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java
index ce0ca747f2..bf866798f0 100644
--- a/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java
+++ b/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java
@@ -215,14 +215,24 @@ public class TDigest
         checkArgument(other != null, "Cannot merge with a null t-digest");
         checkArgument(this.publicCompression == other.getCompressionFactor(), "TDigests must have the same compression, found (%s, %s)", this.publicCompression,
                 other.getCompressionFactor());
-        List<Centroid> tmp = new ArrayList<>();
-        for (Centroid centroid : other.centroids()) {
-            tmp.add(centroid);
-        }
-
-        shuffle(tmp, gen);
-        for (Centroid centroid : tmp) {
-            add(centroid.getMean(), centroid.getWeight());
+        // fully merge any pending values in the other digest
+        other.compress();
+        int count = other.activeCentroids;
+        // build an index array and shuffle in-place to randomize merge order
+        int[] idx = new int[count];
+        for (int i = 0; i < count; i++) {
+            idx[i] = i;
+        }
+        for (int i = count - 1; i > 0; i--) {
+            int j = gen.nextInt(i + 1);
+            int tmpIdx = idx[i];
+            idx[i] = idx[j];
+            idx[j] = tmpIdx;
+        }
+        // merge centroids directly without intermediate objects
+        for (int k = 0; k < count; k++) {
+            int i2 = idx[k];
+            add(other.mean[i2], (long) other.weight[i2]);
         }
     }
 
