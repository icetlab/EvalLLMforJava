I’ve replaced the immutable, stream‐based construction and resetting of `blockBuilders` with a mutable `ArrayList` and simple for-loops to eliminate excess allocations and improve throughput.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/GeneratedPageProjection.java",
    "search": "import java.util.List;",
    "replace": "import java.util.List;\nimport java.util.ArrayList;"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/GeneratedPageProjection.java",
    "search": "        this.blockBuilders = projections.stream().map(RowExpression::getType).map(type -> type.createBlockBuilder(null, 1)).collect(toImmutableList());",
    "replace": "        this.blockBuilders = new ArrayList<>(projections.size());\n        for (RowExpression expression : projections) {\n            this.blockBuilders.add(expression.getType().createBlockBuilder(null, 1));\n        }"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/GeneratedPageProjection.java",
    "search": "        blockBuilders = blockBuilders.stream().map(blockBuilder -> blockBuilder.newBlockBuilderLike(null)).collect(toImmutableList());",
    "replace": "        for (int i = 0; i < blockBuilders.size(); i++) {\n            BlockBuilder previous = blockBuilders.get(i);\n            blockBuilders.set(i, previous.newBlockBuilderLike(null));\n        }"
  }
]
```