I’ve optimized the way we wrap the raw byte[] into a Slice to avoid over-allocating and unnecessary wrapping when there’s no data. This reduces object churn and bounds the slice to the actual valid data length.

```json
[
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java",
    "search": "import io.airlift.slice.Slices;",
    "replace": "import io.airlift.slice.Slices;\nimport static io.airlift.slice.Slices.EMPTY_SLICE;"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java",
    "search": "dataAsSlice = Slices.wrappedBuffer(data);",
    "replace": "dataAsSlice = dataLength == 0 ? EMPTY_SLICE : Slices.wrappedBuffer(data, 0, dataLength);"
  }
]
```