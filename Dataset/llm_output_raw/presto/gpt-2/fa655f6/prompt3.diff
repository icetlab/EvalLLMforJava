diff --git a/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java b/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
index ea2cf982de..1908960c57 100644
--- a/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
+++ b/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
@@ -150,30 +150,34 @@ public class SingleMapBlock
         if (positionCount == 0) {
             return -1;
         }
-
         mapBlock.ensureHashTableLoaded();
+        // Cache commonly used values
+        Block keyBlock = mapBlock.getRawKeyBlock();
+        java.lang.invoke.MethodHandle equalsHandle = mapBlock.keyBlockNativeEquals;
+        java.lang.invoke.MethodHandle hashCodeHandle = mapBlock.keyNativeHashCode;
+        int keyStart = offset >> 1;
+        int keyCount = positionCount >> 1;
+        int hashTableOffset = keyStart * HASH_MULTIPLIER;
+        int hashTableSize = keyCount * HASH_MULTIPLIER;
         int[] hashTable = mapBlock.getHashTables().get();
 
         long hashCode;
         try {
-            hashCode = (long) mapBlock.keyNativeHashCode.invoke(nativeValue);
+            hashCode = (long) hashCodeHandle.invoke(nativeValue);
         }
         catch (Throwable throwable) {
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
-        int position = computePosition(hashCode, hashTableSize);
+        int pos = computePosition(hashCode, hashTableSize);
         while (true) {
-            int keyPosition = hashTable[hashTableOffset + position];
+            int keyPosition = hashTable[hashTableOffset + pos];
             if (keyPosition == -1) {
                 return -1;
             }
             Boolean match;
             try {
-                // assuming maps with indeterminate keys are not supported
-                match = (Boolean) mapBlock.keyBlockNativeEquals.invoke(mapBlock.getRawKeyBlock(), offset / 2 + keyPosition, nativeValue);
+                match = (Boolean) equalsHandle.invoke(keyBlock, keyStart + keyPosition, nativeValue);
             }
             catch (Throwable throwable) {
                 throw handleThrowable(throwable);
@@ -182,9 +186,9 @@ public class SingleMapBlock
             if (match) {
                 return keyPosition * 2 + 1;
             }
-            position++;
-            if (position == hashTableSize) {
-                position = 0;
+            pos++;
+            if (pos == hashTableSize) {
+                pos = 0;
             }
         }
     }
