I’m introducing cached `keyOffset` and `entryCount` fields to avoid repeated division and streamline size and hash‐table computations.

```json
[
  {
    "filepath": "../presto/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java",
    "search": "private final AbstractMapBlock mapBlock;",
    "replace": "private final AbstractMapBlock mapBlock;\n    private final int keyOffset;\n    private final int entryCount;"
  },
  {
    "filepath": "../presto/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java",
    "search": "this.mapBlock = mapBlock;",
    "replace": "this.mapBlock = mapBlock;\n        this.keyOffset = offset / 2;\n        this.entryCount = positionCount / 2;"
  },
  {
    "filepath": "../presto/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java",
    "search": "offset / 2, positionCount / 2",
    "replace": "keyOffset, entryCount"
  },
  {
    "filepath": "../presto/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java",
    "search": "sizeOfIntArray(positionCount / 2 * HASH_MULTIPLIER)",
    "replace": "sizeOfIntArray(entryCount * HASH_MULTIPLIER)"
  },
  {
    "filepath": "../presto/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java",
    "search": "offset / 2 * HASH_MULTIPLIER",
    "replace": "keyOffset * HASH_MULTIPLIER"
  },
  {
    "filepath": "../presto/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java",
    "search": "positionCount / 2 * HASH_MULTIPLIER",
    "replace": "entryCount * HASH_MULTIPLIER"
  }
]
```