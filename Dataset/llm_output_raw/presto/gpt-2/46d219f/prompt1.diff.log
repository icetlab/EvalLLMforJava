Iâ€™ve refactored `mapConcat` to:

- Cache `getPositionCount()` calls in local variables to avoid repeated virtual calls.
- Initialize `TypedSet` with the actual number of expected entries (`rightPositionCount / 2`) rather than positions.
- Reuse a single `BlockBuilderStatus` instance.

These changes reduce overhead in hot loops without altering behavior.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapConcatFunction.java",
    "search": "TypedSet typedSet = new TypedSet(keyType, rightMap.getPositionCount());\n        BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), leftMap.getPositionCount() + rightMap.getPositionCount());\n        for (int i = 0; i < rightMap.getPositionCount(); i += 2) {\n            typedSet.add(rightMap, i);\n            keyType.appendTo(rightMap, i, blockBuilder);\n            valueType.appendTo(rightMap, i + 1, blockBuilder);\n        }\n        for (int i = 0; i < leftMap.getPositionCount(); i += 2) {\n            if (!typedSet.contains(leftMap, i)) {\n                keyType.appendTo(leftMap, i, blockBuilder);\n                valueType.appendTo(leftMap, i + 1, blockBuilder);\n            }\n        }\n        return blockBuilder.build();",
    "replace": "int rightPositionCount = rightMap.getPositionCount();\n        int leftPositionCount = leftMap.getPositionCount();\n        int rightEntries = rightPositionCount >> 1;\n        TypedSet typedSet = new TypedSet(keyType, rightEntries);\n        BlockBuilderStatus status = new BlockBuilderStatus();\n        BlockBuilder blockBuilder = new InterleavedBlockBuilder(\n                ImmutableList.of(keyType, valueType),\n                status,\n                leftPositionCount + rightPositionCount);\n        for (int i = 0; i < rightPositionCount; i += 2) {\n            typedSet.add(rightMap, i);\n            keyType.appendTo(rightMap, i, blockBuilder);\n            valueType.appendTo(rightMap, i + 1, blockBuilder);\n        }\n        for (int i = 0; i < leftPositionCount; i += 2) {\n            if (!typedSet.contains(leftMap, i)) {\n                keyType.appendTo(leftMap, i, blockBuilder);\n                valueType.appendTo(leftMap, i + 1, blockBuilder);\n            }\n        }\n        return blockBuilder.build();"
  }
]
```