diff --git a/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java b/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java
index 74b77228f0..a6765e15f9 100644
--- a/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java
+++ b/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java
@@ -80,9 +80,7 @@ public class PagesSerde
             markers = ENCRYPTED.set(markers);
         }
         else {
-            //  Encryption disabled, slice data is likely much smaller than its backing buffer
-            //  either because of compression or dynamic sizing of the initial output slice
-            slice = Slices.copyOf(slice);
+            // Encryption disabled, no copy needed
         }
 
         return new SerializedPage(slice, markers, page.getPositionCount(), uncompressedSize);
diff --git a/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java b/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java
index d3b9621b8e..eb53a518b5 100644
--- a/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java
+++ b/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java
@@ -32,6 +32,7 @@ import com.google.common.util.concurrent.ListenableFuture;
 import io.airlift.units.DataSize;
 
 import java.util.List;
+import java.util.ArrayList;
 import java.util.Optional;
 import java.util.OptionalInt;
 import java.util.concurrent.atomic.AtomicLong;
@@ -432,9 +433,11 @@ public class PartitionedOutputOperator
 
                     operatorContext.recordOutput(pagePartition.getSizeInBytes(), pagePartition.getPositionCount());
 
-                    List<SerializedPage> serializedPages = splitPage(pagePartition, DEFAULT_MAX_PAGE_SIZE_IN_BYTES).stream()
-                            .map(serde::serialize)
-                            .collect(toImmutableList());
+                    List<Page> pages = splitPage(pagePartition, DEFAULT_MAX_PAGE_SIZE_IN_BYTES);
+                    List<SerializedPage> serializedPages = new ArrayList<>(pages.size());
+                    for (Page partPage : pages) {
+                        serializedPages.add(serde.serialize(partPage));
+                    }
 
                     outputBuffer.enqueue(operatorContext.getDriverContext().getLifespan(), partition, serializedPages);
                     pagesAdded.incrementAndGet();
