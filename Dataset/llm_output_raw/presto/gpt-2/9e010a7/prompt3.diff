diff --git a/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapToMapCast.java b/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapToMapCast.java
index c586b38f12..f832e58c0a 100644
--- a/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapToMapCast.java
+++ b/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapToMapCast.java
@@ -91,6 +91,12 @@ public final class MapToMapCast
                 ImmutableList.of(
                         TypeSignatureParameter.of(toKeyType.getTypeSignature()),
                         TypeSignatureParameter.of(toValueType.getTypeSignature())));
+        // Fast path for identity cast
+        if (fromKeyType.equals(toKeyType) && fromValueType.equals(toValueType)) {
+            MethodHandle identity = MethodHandles.identity(Block.class);
+            MethodHandle target = MethodHandles.dropArguments(identity, 0, SqlFunctionProperties.class);
+            return new BuiltInScalarFunctionImplementation(true, ImmutableList.of(valueTypeArgumentProperty(RETURN_NULL_ON_NULL)), target);
+        }
 
         MethodHandle keyProcessor = buildProcessor(functionAndTypeManager, fromKeyType, toKeyType, true);
         MethodHandle valueProcessor = buildProcessor(functionAndTypeManager, fromValueType, toValueType, false);
@@ -215,9 +221,10 @@ public final class MapToMapCast
     {
         checkState(toMapType.getTypeParameters().size() == 2, "Expect two type parameters for toMapType");
         Type toKeyType = toMapType.getTypeParameters().get(0);
-        TypedSet typedSet = new TypedSet(toKeyType, fromMap.getPositionCount() / 2, "map-to-map cast");
-        BlockBuilder keyBlockBuilder = toKeyType.createBlockBuilder(null, fromMap.getPositionCount() / 2);
-        for (int i = 0; i < fromMap.getPositionCount(); i += 2) {
+        int positionCount = fromMap.getPositionCount();
+        TypedSet typedSet = new TypedSet(toKeyType, positionCount / 2, "map-to-map cast");
+        BlockBuilder keyBlockBuilder = toKeyType.createBlockBuilder(null, positionCount / 2);
+        for (int i = 0; i < positionCount; i += 2) {
             try {
                 keyProcessFunction.invokeExact(fromMap, i, properties, keyBlockBuilder);
             }
@@ -229,7 +236,7 @@ public final class MapToMapCast
 
         BlockBuilder mapBlockBuilder = toMapType.createBlockBuilder(null, 1);
         BlockBuilder blockBuilder = mapBlockBuilder.beginBlockEntry();
-        for (int i = 0; i < fromMap.getPositionCount(); i += 2) {
+        for (int i = 0; i < positionCount; i += 2) {
             if (typedSet.add(keyBlock, i / 2)) {
                 toKeyType.appendTo(keyBlock, i / 2, blockBuilder);
                 if (fromMap.isNull(i + 1)) {
