The overall improvement is to optimize reading contiguous rows with no nulls and no filters in `ByteSelectiveStreamReader`. This is achieved by introducing a fast path in `readNoFilter` that reads bytes in bulk, avoiding the overhead of one-by-one reads.

To support this, a new bulk-read method `next(byte[] data, int offset, int length)` is added to `ByteInputStream`. This method efficiently copies a sequence of bytes into a destination array, handling reads across internal buffer boundaries.

The `readNoFilter` method in `ByteSelectiveStreamReader` is modified to detect the specific scenario of reading contiguous rows without nulls. When this scenario is detected, it uses the new `dataStream.next()` method to read all required bytes in a single call, which is significantly more performant than iterating and calling `dataStream.next()` for each byte. This change preserves the existing logic for the general case of non-contiguous reads or when nulls are present.

```json
[
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java",
    "search": "    private int readNoFilter(int[] positions, int positionCount)\n            throws IOException\n    {\n        // filter == null implies outputRequired == true\n        int streamPosition = 0;\n        for (int i = 0; i < positionCount; i++) {\n            int position = positions[i];\n            if (position > streamPosition) {\n                skip(position - streamPosition);\n                streamPosition = position;\n            }\n\n            if (presentStream != null && !presentStream.nextBit()) {\n                nulls[i] = true;\n            }\n            else {\n                values[i] = dataStream.next();\n                if (presentStream != null) {\n                    nulls[i] = false;\n                }\n            }\n            streamPosition++;\n        }\n        outputPositionCount = positionCount;\n        return streamPosition;\n    }",
    "replace": "    private int readNoFilter(int[] positions, int positionCount)\n            throws IOException\n    {\n        // filter == null implies outputRequired == true\n        if (presentStream == null && positionCount > 0 && positions[positionCount - 1] - positions[0] == positionCount - 1) {\n            int startPosition = positions[0];\n            if (startPosition > 0) {\n                skip(startPosition);\n            }\n            dataStream.next(values, 0, positionCount);\n            outputPositionCount = positionCount;\n            return startPosition + positionCount;\n        }\n\n        int streamPosition = 0;\n        for (int i = 0; i < positionCount; i++) {\n            int position = positions[i];\n            if (position > streamPosition) {\n                skip(position - streamPosition);\n                streamPosition = position;\n            }\n\n            if (presentStream != null && !presentStream.nextBit()) {\n                nulls[i] = true;\n            }\n            else {\n                values[i] = dataStream.next();\n                if (presentStream != null) {\n                    nulls[i] = false;\n                }\n            }\n            streamPosition++;\n        }\n        outputPositionCount = positionCount;\n        return streamPosition;\n    }"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/stream/ByteInputStream.java",
    "search": "    public byte next()\n            throws IOException\n    {\n        if (offset == length) {\n            readNextBlock();\n        }\n        return buffer[offset++];\n    }\n\n    public void nextVector(Type type, long items, BlockBuilder builder)",
    "replace": "    public byte next()\n            throws IOException\n    {\n        if (offset == length) {\n            readNextBlock();\n        }\n        return buffer[offset++];\n    }\n\n    public void next(byte[] data, int offset, int length)\n            throws IOException\n    {\n        if (length == 0) {\n            return;\n        }\n\n        int end = offset + length;\n        while (offset < end) {\n            if (this.offset == this.length) {\n                readNextBlock();\n            }\n            int bytesToCopy = Math.min(end - offset, this.length - this.offset);\n            System.arraycopy(this.buffer, this.offset, data, offset, bytesToCopy);\n            this.offset += bytesToCopy;\n            offset += bytesToCopy;\n        }\n    }\n\n    public void nextVector(Type type, long items, BlockBuilder builder)"
  }
]
```