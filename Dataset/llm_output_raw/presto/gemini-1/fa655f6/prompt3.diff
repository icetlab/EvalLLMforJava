diff --git a/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java b/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
index ea2cf982de..b1c04b54cd 100644
--- a/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
+++ b/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
@@ -37,12 +37,16 @@ public class SingleMapBlock
     private final int offset;
     private final int positionCount;  // The number of keys in this single map * 2
     private final AbstractMapBlock mapBlock;
+    private final int keyOffset;
+    private final int mapSize;
 
     SingleMapBlock(int offset, int positionCount, AbstractMapBlock mapBlock)
     {
         this.offset = offset;
         this.positionCount = positionCount;
         this.mapBlock = mapBlock;
+        this.keyOffset = offset / 2;
+        this.mapSize = positionCount / 2;
     }
 
     @Override
@@ -54,9 +58,9 @@ public class SingleMapBlock
     @Override
     public long getSizeInBytes()
     {
-        return mapBlock.getRawKeyBlock().getRegionSizeInBytes(offset / 2, positionCount / 2) +
-                mapBlock.getRawValueBlock().getRegionSizeInBytes(offset / 2, positionCount / 2) +
-                sizeOfIntArray(positionCount / 2 * HASH_MULTIPLIER);
+        return mapBlock.getRawKeyBlock().getRegionSizeInBytes(keyOffset, mapSize) +
+                mapBlock.getRawValueBlock().getRegionSizeInBytes(keyOffset, mapSize) +
+                sizeOfIntArray(mapSize * HASH_MULTIPLIER);
     }
 
     @Override
@@ -147,12 +151,10 @@ public class SingleMapBlock
      */
     public int seekKey(Object nativeValue)
     {
-        if (positionCount == 0) {
+        if (mapSize == 0) {
             return -1;
         }
-
         mapBlock.ensureHashTableLoaded();
-        int[] hashTable = mapBlock.getHashTables().get();
 
         long hashCode;
         try {
@@ -162,31 +164,10 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
-        int position = computePosition(hashCode, hashTableSize);
-        while (true) {
-            int keyPosition = hashTable[hashTableOffset + position];
-            if (keyPosition == -1) {
-                return -1;
-            }
-            Boolean match;
-            try {
+        return seekKeyInternal(hashCode, keyPosition -> {
             // assuming maps with indeterminate keys are not supported
-                match = (Boolean) mapBlock.keyBlockNativeEquals.invoke(mapBlock.getRawKeyBlock(), offset / 2 + keyPosition, nativeValue);
-            }
-            catch (Throwable throwable) {
-                throw handleThrowable(throwable);
-            }
-            checkNotIndeterminate(match);
-            if (match) {
-                return keyPosition * 2 + 1;
-            }
-            position++;
-            if (position == hashTableSize) {
-                position = 0;
-            }
-        }
+            return (Boolean) mapBlock.keyBlockNativeEquals.invoke(mapBlock.getRawKeyBlock(), keyOffset + keyPosition, nativeValue);
+        });
     }
 
     // The next 5 seekKeyExact functions are the same as seekKey
@@ -194,12 +175,10 @@ public class SingleMapBlock
 
     public int seekKeyExact(long nativeValue)
     {
-        if (positionCount == 0) {
+        if (mapSize == 0) {
             return -1;
         }
-
         mapBlock.ensureHashTableLoaded();
-        int[] hashTable = mapBlock.getHashTables().get();
 
         long hashCode;
         try {
@@ -209,41 +188,18 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
-        int position = computePosition(hashCode, hashTableSize);
-        while (true) {
-            int keyPosition = hashTable[hashTableOffset + position];
-            if (keyPosition == -1) {
-                return -1;
-            }
-            Boolean match;
-            try {
+        return seekKeyInternal(hashCode, keyPosition -> {
             // assuming maps with indeterminate keys are not supported
-                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), offset / 2 + keyPosition, nativeValue);
-            }
-            catch (Throwable throwable) {
-                throw handleThrowable(throwable);
-            }
-            checkNotIndeterminate(match);
-            if (match) {
-                return keyPosition * 2 + 1;
-            }
-            position++;
-            if (position == hashTableSize) {
-                position = 0;
-            }
-        }
+            return (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), keyOffset + keyPosition, nativeValue);
+        });
     }
 
     public int seekKeyExact(boolean nativeValue)
     {
-        if (positionCount == 0) {
+        if (mapSize == 0) {
             return -1;
         }
-
         mapBlock.ensureHashTableLoaded();
-        int[] hashTable = mapBlock.getHashTables().get();
 
         long hashCode;
         try {
@@ -253,41 +209,18 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
-        int position = computePosition(hashCode, hashTableSize);
-        while (true) {
-            int keyPosition = hashTable[hashTableOffset + position];
-            if (keyPosition == -1) {
-                return -1;
-            }
-            Boolean match;
-            try {
+        return seekKeyInternal(hashCode, keyPosition -> {
             // assuming maps with indeterminate keys are not supported
-                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), offset / 2 + keyPosition, nativeValue);
-            }
-            catch (Throwable throwable) {
-                throw handleThrowable(throwable);
-            }
-            checkNotIndeterminate(match);
-            if (match) {
-                return keyPosition * 2 + 1;
-            }
-            position++;
-            if (position == hashTableSize) {
-                position = 0;
-            }
-        }
+            return (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), keyOffset + keyPosition, nativeValue);
+        });
     }
 
     public int seekKeyExact(double nativeValue)
     {
-        if (positionCount == 0) {
+        if (mapSize == 0) {
             return -1;
         }
-
         mapBlock.ensureHashTableLoaded();
-        int[] hashTable = mapBlock.getHashTables().get();
 
         long hashCode;
         try {
@@ -297,41 +230,18 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
-        int position = computePosition(hashCode, hashTableSize);
-        while (true) {
-            int keyPosition = hashTable[hashTableOffset + position];
-            if (keyPosition == -1) {
-                return -1;
-            }
-            Boolean match;
-            try {
+        return seekKeyInternal(hashCode, keyPosition -> {
             // assuming maps with indeterminate keys are not supported
-                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), offset / 2 + keyPosition, nativeValue);
-            }
-            catch (Throwable throwable) {
-                throw handleThrowable(throwable);
-            }
-            checkNotIndeterminate(match);
-            if (match) {
-                return keyPosition * 2 + 1;
-            }
-            position++;
-            if (position == hashTableSize) {
-                position = 0;
-            }
-        }
+            return (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), keyOffset + keyPosition, nativeValue);
+        });
     }
 
     public int seekKeyExact(Slice nativeValue)
     {
-        if (positionCount == 0) {
+        if (mapSize == 0) {
             return -1;
         }
-
         mapBlock.ensureHashTableLoaded();
-        int[] hashTable = mapBlock.getHashTables().get();
 
         long hashCode;
         try {
@@ -341,41 +251,18 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
-        int position = computePosition(hashCode, hashTableSize);
-        while (true) {
-            int keyPosition = hashTable[hashTableOffset + position];
-            if (keyPosition == -1) {
-                return -1;
-            }
-            Boolean match;
-            try {
+        return seekKeyInternal(hashCode, keyPosition -> {
             // assuming maps with indeterminate keys are not supported
-                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), offset / 2 + keyPosition, nativeValue);
-            }
-            catch (Throwable throwable) {
-                throw handleThrowable(throwable);
-            }
-            checkNotIndeterminate(match);
-            if (match) {
-                return keyPosition * 2 + 1;
-            }
-            position++;
-            if (position == hashTableSize) {
-                position = 0;
-            }
-        }
+            return (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), keyOffset + keyPosition, nativeValue);
+        });
     }
 
     public int seekKeyExact(Block nativeValue)
     {
-        if (positionCount == 0) {
+        if (mapSize == 0) {
             return -1;
         }
-
         mapBlock.ensureHashTableLoaded();
-        int[] hashTable = mapBlock.getHashTables().get();
 
         long hashCode;
         try {
@@ -385,18 +272,35 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
+        return seekKeyInternal(hashCode, keyPosition -> {
+            // assuming maps with indeterminate keys are not supported
+            return (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), keyOffset + keyPosition, nativeValue);
+        });
+    }
+
+    @FunctionalInterface
+    private interface EqualityChecker
+    {
+        boolean equals(int keyPosition) throws Throwable;
+    }
+
+    private int seekKeyInternal(long hashCode, EqualityChecker equalityChecker)
+    {
+        // This method is hot and should not be changed without running benchmarks.
+        int[] hashTable = getHashTable();
+        int hashTableOffset = keyOffset * HASH_MULTIPLIER;
+        int hashTableSize = mapSize * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
+
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
             if (keyPosition == -1) {
                 return -1;
             }
+
             Boolean match;
             try {
-                // assuming maps with indeterminate keys are not supported
-                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), offset / 2 + keyPosition, nativeValue);
+                match = equalityChecker.equals(keyPosition);
             }
             catch (Throwable throwable) {
                 throw handleThrowable(throwable);
@@ -405,6 +309,7 @@ public class SingleMapBlock
             if (match) {
                 return keyPosition * 2 + 1;
             }
+
             position++;
             if (position == hashTableSize) {
                 position = 0;
