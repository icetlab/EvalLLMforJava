The performance issue is that `GeneratedPageProjection` does not reserve enough memory for `BlockBuilder`s when the number of rows to be projected is large and differs significantly from the previous batch. The existing implementation uses `newBlockBuilderLike`, which estimates the required capacity based on the position count of the previously processed page. This can lead to inefficient memory allocation and frequent resizing of internal buffers within the `BlockBuilder`s if the number of selected positions varies greatly between pages.

My improvement addresses this by creating new `BlockBuilder`s for each projection, explicitly sized to handle the exact number of rows in the `selectedPositions` of the current page. This pre-allocation prevents costly buffer-resizing operations during the projection, improving performance particularly for workloads with variable selectivity. This change uses the `projections` list to get the data types for creating appropriately sized `BlockBuilder`s, ensuring memory is reserved efficiently before the projection work begins.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/GeneratedPageProjection.java",
    "search": "    @Override\n    public Work<List<Block>> project(SqlFunctionProperties properties, DriverYieldSignal yieldSignal, Page page, SelectedPositions selectedPositions)\n    {\n        blockBuilders = blockBuilders.stream().map(blockBuilder -> blockBuilder.newBlockBuilderLike(null)).collect(toImmutableList());\n        try {\n            return (Work<List<Block>>) pageProjectionWorkFactory.invoke(blockBuilders, properties, page, selectedPositions);\n        }\n        catch (Throwable e) {\n            throw new RuntimeException(e);\n        }\n    }",
    "replace": "    @Override\n    public Work<List<Block>> project(SqlFunctionProperties properties, DriverYieldSignal yieldSignal, Page page, SelectedPositions selectedPositions)\n    {\n        blockBuilders = projections.stream()\n                .map(projection -> projection.getType().createBlockBuilder(null, selectedPositions.size()))\n                .collect(toImmutableList());\n        try {\n            return (Work<List<Block>>) pageProjectionWorkFactory.invoke(blockBuilders, properties, page, selectedPositions);\n        }\n        catch (Throwable e) {\n            throw new RuntimeException(e);\n        }\n    }"
  }
]
```