diff --git a/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java b/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java
index ce0ca747f2..aab101705e 100644
--- a/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java
+++ b/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java
@@ -215,14 +215,30 @@ public class TDigest
         checkArgument(other != null, "Cannot merge with a null t-digest");
         checkArgument(this.publicCompression == other.getCompressionFactor(), "TDigests must have the same compression, found (%s, %s)", this.publicCompression,
                 other.getCompressionFactor());
-        List<Centroid> tmp = new ArrayList<>();
-        for (Centroid centroid : other.centroids()) {
-            tmp.add(centroid);
+
+        other.compress();
+
+        if (other.activeCentroids == 0) {
+            return;
+        }
+
+        // To avoid bias, we shuffle the centroids from the other digest before adding them.
+        // This is much more efficient than creating a list of Centroid objects.
+        int[] indices = new int[other.activeCentroids];
+        for (int i = 0; i < other.activeCentroids; i++) {
+            indices[i] = i;
+        }
+
+        // In-place Fisher-Yates shuffle of the indices.
+        for (int i = indices.length - 1; i > 0; i--) {
+            int j = gen.nextInt(i + 1);
+            int temp = indices[j];
+            indices[j] = indices[i];
+            indices[i] = temp;
         }
 
-        shuffle(tmp, gen);
-        for (Centroid centroid : tmp) {
-            add(centroid.getMean(), centroid.getWeight());
+        for (int index : indices) {
+            add(other.mean[index], (long) other.weight[index]);
         }
     }
 
