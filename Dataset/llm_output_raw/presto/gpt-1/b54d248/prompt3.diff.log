I’ve optimized getPartition to use a fast bit‐mask when the partition count is a power of two (common case in these tests) and fall back to modulo otherwise, and also unified the sign‐bit mask to Long.MAX_VALUE.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/HashGenerator.java",
    "search": "long rawHash = hashPosition(position, page);\n\n        // clear the sign bit\n        rawHash &= 0x7fff_ffff_ffff_ffffL;\n\n        int partition = (int) (rawHash % partitionCount);\n\n        checkState(partition >= 0 && partition < partitionCount);\n        return partition;",
    "replace": "long rawHash = hashPosition(position, page) & Long.MAX_VALUE;\n        int partition;\n        // fast path for power-of-two partition counts\n        if ((partitionCount & (partitionCount - 1)) == 0) {\n            partition = (int) (rawHash & (partitionCount - 1));\n        }\n        else {\n            partition = (int) (rawHash % partitionCount);\n        }\n        checkState(partition >= 0 && partition < partitionCount);\n        return partition;"
  }
]
```