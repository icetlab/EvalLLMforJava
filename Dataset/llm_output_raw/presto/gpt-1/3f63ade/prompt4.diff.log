Iâ€™ve added a fast path for arrays of size 0, 1, and 2 to avoid the general TypedSet logic when the array is very small, and reused a local `count` variable for clarity and performance.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayDistinctFunction.java",
    "search": "if (array.getPositionCount() == 0) {\n            return array;\n        }",
    "replace": "int count = array.getPositionCount();\n        if (count <= 1) {\n            return array;\n        }\n        if (count == 2) {\n            if (type.equalTo(array, 0, array, 1)) {\n                BlockBuilder builder = type.createBlockBuilder(new BlockBuilderStatus(), 1);\n                type.appendTo(array, 0, builder);\n                return builder.build();\n            }\n            return array;\n        }"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayDistinctFunction.java",
    "search": "TypedSet typedSet = new TypedSet(type, array.getPositionCount());",
    "replace": "TypedSet typedSet = new TypedSet(type, count);"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayDistinctFunction.java",
    "search": "BlockBuilder distinctElementBlockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), array.getPositionCount());",
    "replace": "BlockBuilder distinctElementBlockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), count);"
  }
]
```