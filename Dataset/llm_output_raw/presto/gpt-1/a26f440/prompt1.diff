diff --git a/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java b/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java
index ce0ca747f2..9749ae1367 100644
--- a/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java
+++ b/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java
@@ -233,18 +233,16 @@ public class TDigest
 
     private void mergeNewValues(boolean force, double compression)
     {
-        if (unmergedWeight == 0) {
+        // only skip if there's nothing to merge and we're not forcing a compress
+        if (unmergedWeight == 0 && !force) {
             return;
         }
-
-        if (force || unmergedWeight > 0) {
         // note that we run the merge in reverse every other merge to avoid left-to-right bias in merging
         merge(tempMean, tempWeight, tempUsed, order, unmergedWeight, mergeCount % 2 == 1, compression);
         mergeCount++;
         tempUsed = 0;
         unmergedWeight = 0;
     }
-    }
 
     private void merge(double[] incomingMean,
             double[] incomingWeight,
@@ -275,15 +273,18 @@ public class TDigest
         weight[activeCentroids] = incomingWeight[incomingOrder[0]];
         double weightSoFar = 0;
 
-        double normalizer = normalizer(compression, totalWeight);
+        double normalizerVal = normalizer(compression, totalWeight);
         for (int i = 1; i < incomingCount; i++) {
             int ix = incomingOrder[i];
             double proposedWeight = weight[activeCentroids] + incomingWeight[ix];
-            boolean addThis;
 
             double q0 = weightSoFar / totalWeight;
             double q2 = (weightSoFar + proposedWeight) / totalWeight;
-            addThis = proposedWeight <= totalWeight * Math.min(maxSize(q0, normalizer), maxSize(q2, normalizer));
+            // compute capacity once instead of two Math.min calls
+            double maxSize0 = maxSize(q0, normalizerVal);
+            double maxSize2 = maxSize(q2, normalizerVal);
+            double minMaxSize = maxSize0 < maxSize2 ? maxSize0 : maxSize2;
+            boolean addThis = proposedWeight <= totalWeight * minMaxSize;
 
             if (addThis) {
                 // next point can be merged into existing centroid
