diff --git a/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java b/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java
index de0d7c23a6..043693de93 100644
--- a/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java
+++ b/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java
@@ -40,6 +40,7 @@ import io.airlift.slice.Slices;
 import java.util.EnumSet;
 import java.util.Objects;
 import java.util.Set;
+import java.util.Collections;
 
 import static com.esri.core.geometry.ogc.OGCGeometry.createFromEsriGeometry;
 import static com.facebook.presto.geospatial.GeometryUtils.GeometryTypeName.LINE_STRING;
@@ -60,6 +61,12 @@ import static java.lang.String.format;
 public final class GeoFunctions
 {
     private static final Joiner OR_JOINER = Joiner.on(" or ");
+private static final Set<GeometryTypeName> POINT_ONLY = Collections.singleton(POINT);
+private static final Set<GeometryTypeName> LINE_ONLY = Collections.singleton(LINE_STRING);
+private static final Set<GeometryTypeName> POLYGON_ONLY = Collections.singleton(POLYGON);
+private static final Set<GeometryTypeName> LINE_TYPES = EnumSet.of(LINE_STRING, MULTI_LINE_STRING);
+private static final Set<GeometryTypeName> POLYGON_TYPES = EnumSet.of(POLYGON, MULTI_POLYGON);
+private static final Set<GeometryTypeName> CENTROID_TYPES = EnumSet.of(POINT, MULTI_POINT, LINE_STRING, MULTI_LINE_STRING, POLYGON, MULTI_POLYGON);
 
     private GeoFunctions() {}
 
@@ -69,7 +76,7 @@ public final class GeoFunctions
     public static Slice parseLine(@SqlType(StandardTypes.VARCHAR) Slice input)
     {
         OGCGeometry geometry = geometryFromText(input);
-        validateType("ST_LineFromText", geometry, EnumSet.of(LINE_STRING));
+        validateType("ST_LineFromText", geometry, LINE_ONLY);
         return serialize(geometry);
     }
 
@@ -88,7 +95,7 @@ public final class GeoFunctions
     public static Slice stPolygon(@SqlType(StandardTypes.VARCHAR) Slice input)
     {
         OGCGeometry geometry = geometryFromText(input);
-        validateType("ST_Polygon", geometry, EnumSet.of(POLYGON));
+        validateType("ST_Polygon", geometry, POLYGON_ONLY);
         return serialize(geometry);
     }
 
@@ -98,7 +105,7 @@ public final class GeoFunctions
     public static double stArea(@SqlType(GEOMETRY_TYPE_NAME) Slice input)
     {
         OGCGeometry geometry = deserialize(input);
-        validateType("ST_Area", geometry, EnumSet.of(POLYGON, MULTI_POLYGON));
+        validateType("ST_Area", geometry, POLYGON_TYPES);
         return geometry.getEsriGeometry().calculateArea2D();
     }
 
@@ -150,7 +157,7 @@ public final class GeoFunctions
     public static Slice stCentroid(@SqlType(GEOMETRY_TYPE_NAME) Slice input)
     {
         OGCGeometry geometry = deserialize(input);
-        validateType("ST_Centroid", geometry, EnumSet.of(POINT, MULTI_POINT, LINE_STRING, MULTI_LINE_STRING, POLYGON, MULTI_POLYGON));
+        validateType("ST_Centroid", geometry, CENTROID_TYPES);
         GeometryTypeName typeName = GeometryUtils.valueOf(geometry.geometryType());
         if (typeName == POINT) {
             return input;
@@ -205,7 +212,7 @@ public final class GeoFunctions
     public static Boolean stIsClosed(@SqlType(GEOMETRY_TYPE_NAME) Slice input)
     {
         OGCGeometry geometry = deserialize(input);
-        validateType("ST_IsClosed", geometry, EnumSet.of(LINE_STRING, MULTI_LINE_STRING));
+        validateType("ST_IsClosed", geometry, LINE_TYPES);
         MultiPath lines = (MultiPath) geometry.getEsriGeometry();
         int pathCount = lines.getPathCount();
         for (int i = 0; i < pathCount; i++) {
@@ -233,7 +240,7 @@ public final class GeoFunctions
     public static double stLength(@SqlType(GEOMETRY_TYPE_NAME) Slice input)
     {
         OGCGeometry geometry = deserialize(input);
-        validateType("ST_Length", geometry, EnumSet.of(LINE_STRING, MULTI_LINE_STRING));
+        validateType("ST_Length", geometry, LINE_TYPES);
         return geometry.getEsriGeometry().calculateLength2D();
     }
 
@@ -284,7 +291,7 @@ public final class GeoFunctions
     public static Long stNumInteriorRings(@SqlType(GEOMETRY_TYPE_NAME) Slice input)
     {
         OGCGeometry geometry = deserialize(input);
-        validateType("ST_NumInteriorRing", geometry, EnumSet.of(POLYGON));
+        validateType("ST_NumInteriorRing", geometry, POLYGON_ONLY);
         if (geometry.isEmpty()) {
             return null;
         }
@@ -313,7 +320,7 @@ public final class GeoFunctions
     public static Boolean stIsRing(@SqlType(GEOMETRY_TYPE_NAME) Slice input)
     {
         OGCGeometry geometry = deserialize(input);
-        validateType("ST_IsRing", geometry, EnumSet.of(LINE_STRING));
+        validateType("ST_IsRing", geometry, LINE_ONLY);
         OGCLineString line = (OGCLineString) geometry;
         return line.isClosed() && line.isSimple();
     }
@@ -325,7 +332,7 @@ public final class GeoFunctions
     public static Slice stStartPoint(@SqlType(GEOMETRY_TYPE_NAME) Slice input)
     {
         OGCGeometry geometry = deserialize(input);
-        validateType("ST_StartPoint", geometry, EnumSet.of(LINE_STRING));
+        validateType("ST_StartPoint", geometry, LINE_ONLY);
         if (geometry.isEmpty()) {
             return null;
         }
@@ -341,7 +348,7 @@ public final class GeoFunctions
     public static Slice stEndPoint(@SqlType(GEOMETRY_TYPE_NAME) Slice input)
     {
         OGCGeometry geometry = deserialize(input);
-        validateType("ST_EndPoint", geometry, EnumSet.of(LINE_STRING));
+        validateType("ST_EndPoint", geometry, LINE_ONLY);
         if (geometry.isEmpty()) {
             return null;
         }
@@ -357,7 +364,7 @@ public final class GeoFunctions
     public static Double stX(@SqlType(GEOMETRY_TYPE_NAME) Slice input)
     {
         OGCGeometry geometry = deserialize(input);
-        validateType("ST_X", geometry, EnumSet.of(POINT));
+        validateType("ST_X", geometry, POINT_ONLY);
         if (geometry.isEmpty()) {
             return null;
         }
@@ -371,7 +378,7 @@ public final class GeoFunctions
     public static Double stY(@SqlType(GEOMETRY_TYPE_NAME) Slice input)
     {
         OGCGeometry geometry = deserialize(input);
-        validateType("ST_Y", geometry, EnumSet.of(POINT));
+        validateType("ST_Y", geometry, POINT_ONLY);
         if (geometry.isEmpty()) {
             return null;
         }
@@ -427,7 +434,7 @@ public final class GeoFunctions
     public static Slice stExteriorRing(@SqlType(GEOMETRY_TYPE_NAME) Slice input)
     {
         OGCGeometry geometry = deserialize(input);
-        validateType("ST_ExteriorRing", geometry, EnumSet.of(POLYGON, MULTI_POLYGON));
+        validateType("ST_ExteriorRing", geometry, POLYGON_TYPES);
         if (geometry.isEmpty()) {
             return null;
         }
