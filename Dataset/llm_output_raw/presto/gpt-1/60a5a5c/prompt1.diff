diff --git a/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java b/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java
index 74b77228f0..1f3e600132 100644
--- a/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java
+++ b/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java
@@ -79,11 +79,8 @@ public class PagesSerde
             slice = Slices.wrappedBuffer(spillCipher.get().encrypt(slice.toByteBuffer()));
             markers = ENCRYPTED.set(markers);
         }
-        else {
-            //  Encryption disabled, slice data is likely much smaller than its backing buffer
-            //  either because of compression or dynamic sizing of the initial output slice
-            slice = Slices.copyOf(slice);
-        }
+        // else: no encryption, reuse slice without copying
+
 
         return new SerializedPage(slice, markers, page.getPositionCount(), uncompressedSize);
     }
diff --git a/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java b/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java
index d3b9621b8e..3feeb4c818 100644
--- a/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java
+++ b/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java
@@ -41,6 +41,7 @@ import static com.facebook.presto.execution.buffer.PageSplitterUtil.splitPage;
 import static com.facebook.presto.spi.block.PageBuilderStatus.DEFAULT_MAX_PAGE_SIZE_IN_BYTES;
 import static com.google.common.base.MoreObjects.toStringHelper;
 import static com.google.common.collect.ImmutableList.toImmutableList;
+import java.util.ArrayList;
 import static java.lang.Math.max;
 import static java.lang.Math.min;
 import static java.util.Objects.requireNonNull;
@@ -432,9 +433,11 @@ public class PartitionedOutputOperator
 
                     operatorContext.recordOutput(pagePartition.getSizeInBytes(), pagePartition.getPositionCount());
 
-                    List<SerializedPage> serializedPages = splitPage(pagePartition, DEFAULT_MAX_PAGE_SIZE_IN_BYTES).stream()
-                            .map(serde::serialize)
-                            .collect(toImmutableList());
+                    List<Page> splitPages = splitPage(pagePartition, DEFAULT_MAX_PAGE_SIZE_IN_BYTES);
+                            List<SerializedPage> serializedPages = new ArrayList<>(splitPages.size());
+                            for (Page split : splitPages) {
+                                serializedPages.add(serde.serialize(split));
+                            }
 
                     outputBuffer.enqueue(operatorContext.getDriverContext().getLifespan(), partition, serializedPages);
                     pagesAdded.incrementAndGet();
