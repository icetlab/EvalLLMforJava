diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
index 93aeb97e76..a87310848c 100644
--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
@@ -263,6 +263,35 @@ public class ByteSelectiveStreamReader
             outputPositionCount = positionCount;
             return positionCount;
         }
+        else if (presentStream != null && positions[0] == 0 && positions[positionCount - 1] == positionCount - 1) {
+            // contiguous chunk of rows with possible nulls
+            int length = positionCount;
+            int nonNullCount = 0;
+            // read nulls and count non-nulls
+            for (int i = 0; i < length; i++) {
+                if (!presentStream.nextBit()) {
+                    nulls[i] = true;
+                } else {
+                    nulls[i] = false;
+                    nonNullCount++;
+                }
+            }
+            // read non-null values in one bulk
+            if (nonNullCount > 0) {
+                byte[] tempValues = new byte[nonNullCount];
+                dataStream.next(tempValues, nonNullCount);
+                int tempIndex = 0;
+                for (int i = 0; i < length; i++) {
+                    if (!nulls[i]) {
+                        values[i] = tempValues[tempIndex++];
+                    } else {
+                        values[i] = 0;
+                    }
+                }
+            }
+            outputPositionCount = positionCount;
+            return positionCount;
+        }
 
         int streamPosition = 0;
         for (int i = 0; i < positionCount; i++) {
