Iâ€™ve added a fast path in `specialize` to short-circuit no-op casts (where key and value types are unchanged), returning the input block directly and avoiding the expensive TypedSet and rebuild logic.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapToMapCast.java",
    "search": "Type toMapType = functionAndTypeManager.getParameterizedType(\n                \"map\",\n                ImmutableList.of(\n                        TypeSignatureParameter.of(toKeyType.getTypeSignature()),\n                        TypeSignatureParameter.of(toValueType.getTypeSignature())));",
    "replace": "Type toMapType = functionAndTypeManager.getParameterizedType(\n                \"map\",\n                ImmutableList.of(\n                        TypeSignatureParameter.of(toKeyType.getTypeSignature()),\n                        TypeSignatureParameter.of(toValueType.getTypeSignature())));\n\n        // optimize no-op map-to-map cast when key and value types are identical\n        if (fromKeyType.equals(toKeyType) && fromValueType.equals(toValueType)) {\n            MethodHandle identity = MethodHandles.permuteArguments(\n                    MethodHandles.identity(Block.class),\n                    methodType(Block.class, SqlFunctionProperties.class, Block.class),\n                    1, 0);\n            return new BuiltInScalarFunctionImplementation(\n                    true,\n                    ImmutableList.of(valueTypeArgumentProperty(RETURN_NULL_ON_NULL)),\n                    identity);\n        }"
  }
]
```