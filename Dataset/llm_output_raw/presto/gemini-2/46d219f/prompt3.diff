diff --git a/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapConcatFunction.java b/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapConcatFunction.java
index 24e83bddde..9d3caaeec3 100644
--- a/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapConcatFunction.java
+++ b/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapConcatFunction.java
@@ -40,14 +40,16 @@ public final class MapConcatFunction
             @SqlType("map(K,V)") Block leftMap,
             @SqlType("map(K,V)") Block rightMap)
     {
-        TypedSet typedSet = new TypedSet(keyType, rightMap.getPositionCount());
-        BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), leftMap.getPositionCount() + rightMap.getPositionCount());
-        for (int i = 0; i < rightMap.getPositionCount(); i += 2) {
+        int rightMapPositionCount = rightMap.getPositionCount();
+        int leftMapPositionCount = leftMap.getPositionCount();
+        TypedSet typedSet = new TypedSet(keyType, rightMapPositionCount / 2);
+        BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), (leftMapPositionCount + rightMapPositionCount) / 2);
+        for (int i = 0; i < rightMapPositionCount; i += 2) {
             typedSet.add(rightMap, i);
             keyType.appendTo(rightMap, i, blockBuilder);
             valueType.appendTo(rightMap, i + 1, blockBuilder);
         }
-        for (int i = 0; i < leftMap.getPositionCount(); i += 2) {
+        for (int i = 0; i < leftMapPositionCount; i += 2) {
             if (!typedSet.contains(leftMap, i)) {
                 keyType.appendTo(leftMap, i, blockBuilder);
                 valueType.appendTo(leftMap, i + 1, blockBuilder);
