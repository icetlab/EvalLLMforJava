The current implementation of `map_concat` in `MapConcatFunction.java` overallocates memory for both the `TypedSet` used for storing keys and the `BlockBuilder` for the result map. Both are initialized using the total number of positions (keys and values) from the input maps, which is twice the actual number of map entries (key-value pairs).

My proposed changes correct the initial capacity for these data structures.
1.  The `TypedSet` is now initialized with `rightMap.getPositionCount() / 2`, which correctly reflects the number of keys in the right map.
2.  The `InterleavedBlockBuilder` is initialized with `(leftMap.getPositionCount() + rightMap.getPositionCount()) / 2`, which is the maximum possible number of entries in the concatenated map.

These adjustments reduce memory allocation, which can improve performance by lowering garbage collection pressure, especially when concatenating large maps.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapConcatFunction.java",
    "search": "        TypedSet typedSet = new TypedSet(keyType, rightMap.getPositionCount());",
    "replace": "        TypedSet typedSet = new TypedSet(keyType, rightMap.getPositionCount() / 2);"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapConcatFunction.java",
    "search": "        BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), leftMap.getPositionCount() + rightMap.getPositionCount());",
    "replace": "        BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), (leftMap.getPositionCount() + rightMap.getPositionCount()) / 2);"
  }
]
```