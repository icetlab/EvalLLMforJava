The overall improvement is to optimize the `ByteSelectiveStreamReader` by reducing the overhead of reading data byte-by-byte. This is achieved by introducing a new bulk-read method in `ByteInputStream` and leveraging it within `ByteSelectiveStreamReader` to process contiguous blocks of data more efficiently, especially in scenarios without null values. This minimizes method invocation overhead and improves data throughput.

```json
[
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java",
    "search": "    private int readNoFilter(int[] positions, int positionCount)\n            throws IOException\n    {\n        // filter == null implies outputRequired == true\n        int streamPosition = 0;\n        for (int i = 0; i < positionCount; i++) {\n            int position = positions[i];\n            if (position > streamPosition) {\n                skip(position - streamPosition);\n                streamPosition = position;\n            }\n\n            if (presentStream != null && !presentStream.nextBit()) {\n                nulls[i] = true;\n            }\n            else {\n                values[i] = dataStream.next();\n                if (presentStream != null) {\n                    nulls[i] = false;\n                }\n            }\n            streamPosition++;\n        }\n        outputPositionCount = positionCount;\n        return streamPosition;\n    }",
    "replace": "    private int readNoFilter(int[] positions, int positionCount)\n            throws IOException\n    {\n        // filter == null implies outputRequired == true\n        int streamPosition = 0;\n        if (presentStream == null) {\n            int i = 0;\n            while (i < positionCount) {\n                int position = positions[i];\n                if (position > streamPosition) {\n                    skip(position - streamPosition);\n                    streamPosition = position;\n                }\n\n                int start = i;\n                while (i + 1 < positionCount && positions[i + 1] == positions[i] + 1) {\n                    i++;\n                }\n                int count = i - start + 1;\n                dataStream.next(values, start, count);\n                streamPosition += count;\n                i++;\n            }\n        }\n        else {\n            for (int i = 0; i < positionCount; i++) {\n                int position = positions[i];\n                if (position > streamPosition) {\n                    skip(position - streamPosition);\n                    streamPosition = position;\n                }\n\n                if (!presentStream.nextBit()) {\n                    nulls[i] = true;\n                }\n                else {\n                    values[i] = dataStream.next();\n                    nulls[i] = false;\n                }\n                streamPosition++;\n            }\n        }\n        outputPositionCount = positionCount;\n        return streamPosition;\n    }"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/stream/ByteInputStream.java",
    "search": "    public byte next()\n            throws IOException\n    {\n        if (offset == length) {\n            readNextBlock();\n        }\n        return buffer[offset++];\n    }\n\n    public void nextVector(Type type, long items, BlockBuilder builder)",
    "replace": "    public byte next()\n            throws IOException\n    {\n        if (offset == length) {\n            readNextBlock();\n        }\n        return buffer[offset++];\n    }\n\n    public void next(byte[] data, int offset, int length)\n            throws IOException\n    {\n        if (this.offset + length <= this.length) {\n            System.arraycopy(buffer, this.offset, data, offset, length);\n            this.offset += length;\n            return;\n        }\n\n        int bytesRead = 0;\n        while (bytesRead < length) {\n            if (this.offset == this.length) {\n                readNextBlock();\n            }\n            int bytesToRead = Math.min(length - bytesRead, this.length - this.offset);\n            System.arraycopy(this.buffer, this.offset, data, offset + bytesRead, bytesToRead);\n            this.offset += bytesToRead;\n            bytesRead += bytesToRead;\n        }\n    }\n\n    public void nextVector(Type type, long items, BlockBuilder builder)"
  }
]
```