diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
index da887a9ba3..30e443d297 100644
--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
@@ -258,6 +258,27 @@ public class ByteSelectiveStreamReader
     {
         // filter == null implies outputRequired == true
         int streamPosition = 0;
+        if (presentStream == null) {
+            int i = 0;
+            while (i < positionCount) {
+                int position = positions[i];
+                if (position > streamPosition) {
+                    dataStream.skip(position - streamPosition);
+                }
+
+                // find run of contiguous positions to read in batch
+                int runEnd = i + 1;
+                while (runEnd < positionCount && positions[runEnd] == positions[runEnd - 1] + 1) {
+                    runEnd++;
+                }
+                int runLength = runEnd - i;
+
+                dataStream.next(values, i, runLength);
+                i += runLength;
+                streamPosition = positions[i - 1] + 1;
+            }
+        }
+        else {
             for (int i = 0; i < positionCount; i++) {
                 int position = positions[i];
                 if (position > streamPosition) {
@@ -265,17 +286,16 @@ public class ByteSelectiveStreamReader
                     streamPosition = position;
                 }
 
-            if (presentStream != null && !presentStream.nextBit()) {
+                if (!presentStream.nextBit()) {
                     nulls[i] = true;
                 }
                 else {
                     values[i] = dataStream.next();
-                if (presentStream != null) {
                     nulls[i] = false;
                 }
-            }
                 streamPosition++;
             }
+        }
         outputPositionCount = positionCount;
         return streamPosition;
     }
diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/stream/ByteInputStream.java b/presto-orc/src/main/java/com/facebook/presto/orc/stream/ByteInputStream.java
index 21edc123eb..73e935600e 100644
--- a/presto-orc/src/main/java/com/facebook/presto/orc/stream/ByteInputStream.java
+++ b/presto-orc/src/main/java/com/facebook/presto/orc/stream/ByteInputStream.java
@@ -119,6 +119,23 @@ public class ByteInputStream
         return buffer[offset++];
     }
 
+    public void next(byte[] data, int offset, int length)
+            throws IOException
+    {
+        int currentOffset = offset;
+        int remaining = length;
+        while (remaining > 0) {
+            if (this.offset == this.length) {
+                readNextBlock();
+            }
+            int chunk = Math.min(remaining, this.length - this.offset);
+            System.arraycopy(buffer, this.offset, data, currentOffset, chunk);
+            this.offset += chunk;
+            currentOffset += chunk;
+            remaining -= chunk;
+        }
+    }
+
     public void nextVector(Type type, long items, BlockBuilder builder)
             throws IOException
     {
