diff --git a/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java b/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java
index ce0ca747f2..5dca915e24 100644
--- a/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java
+++ b/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java
@@ -215,14 +215,36 @@ public class TDigest
         checkArgument(other != null, "Cannot merge with a null t-digest");
         checkArgument(this.publicCompression == other.getCompressionFactor(), "TDigests must have the same compression, found (%s, %s)", this.publicCompression,
                 other.getCompressionFactor());
-        List<Centroid> tmp = new ArrayList<>();
-        for (Centroid centroid : other.centroids()) {
-            tmp.add(centroid);
+
+        // The original implementation forced a merge on 'other', then collected the centroids into
+        // a list of objects, shuffled it, and then added the centroids. This is inefficient for
+        // small digests.
+        // This new implementation avoids the merge on 'other' and the object creation.
+        // It collects all points (unmerged and centroids) into a list of indices, shuffles
+        // the indices, and then adds the points in shuffled order to preserve accuracy.
+
+        int unmergedCount = other.tempUsed;
+        int centroidCount = other.activeCentroids;
+        int totalCount = unmergedCount + centroidCount;
+        if (totalCount == 0) {
+            return;
+        }
+
+        List<Integer> indices = new ArrayList<>(totalCount);
+        for (int i = 0; i < totalCount; i++) {
+            indices.add(i);
         }
+        shuffle(indices, gen);
 
-        shuffle(tmp, gen);
-        for (Centroid centroid : tmp) {
-            add(centroid.getMean(), centroid.getWeight());
+        for (int index : indices) {
+            if (index < unmergedCount) {
+                // It's an unmerged point
+                add(other.tempMean[index], (long) other.tempWeight[index]);
+            }
+            else {
+                // It's a centroid
+                add(other.mean[index - unmergedCount], (long) other.weight[index - unmergedCount]);
+            }
         }
     }
 
