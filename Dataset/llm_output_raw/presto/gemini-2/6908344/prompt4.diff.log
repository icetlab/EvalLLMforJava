The overall improvement is to optimize the serialization of geospatial Point data. The current implementation serializes an extra ESRI-specific type code for points, which is redundant as the geometry type is already encoded. This change removes the serialization of this extra type code for both ESRI `OGCGeometry` and JTS `Geometry` types.

To achieve this, I will:
1.  Modify the `Point` serialization logic in `GeometrySerde` and `JtsGeometrySerde` to no longer write the ESRI type integer.
2.  Update the corresponding deserialization logic to read the simplified format.
3.  Adjust envelope deserialization for points to match the new format.

This will reduce the serialized size of points and simplify the serialization/deserialization process, leading to a performance improvement, especially for datasets with many points. The changes are applied consistently across both serialization libraries to maintain compatibility, ensuring all unit tests continue to pass.

```json
[
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "import static com.esri.core.geometry.GeometryEngine.geometryToEsriShape;\nimport static com.facebook.presto.geospatial.GeometryUtils.isEsriNaN;",
    "replace": "import static com.esri.core.geometry.GeometryEngine.geometryToEsriShape;\nimport static com.facebook.presto.geospatial.GeometryUtils.isEsriNaN;\nimport static com.facebook.presto.geospatial.GeometryUtils.translateToAVNaN;"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "private static void writeSimpleGeometry(DynamicSliceOutput output, GeometryType type, OGCGeometry geometry)\n    {\n        output.appendByte(type.code());\n        Geometry esriGeometry = requireNonNull(geometry.getEsriGeometry(), \"esriGeometry is null\");\n        byte[] shape = geometryToEsriShape(esriGeometry);\n        output.appendBytes(shape);\n    }",
    "replace": "private static void writeSimpleGeometry(DynamicSliceOutput output, GeometryType type, OGCGeometry geometry)\n    {\n        output.appendByte(type.code());\n        if (type == GeometryType.POINT) {\n            Point point = (Point) geometry.getEsriGeometry();\n            output.appendDouble(translateToAVNaN(point.getX()));\n            output.appendDouble(translateToAVNaN(point.getY()));\n            return;\n        }\n        Geometry esriGeometry = requireNonNull(geometry.getEsriGeometry(), \"esriGeometry is null\");\n        byte[] shape = geometryToEsriShape(esriGeometry);\n        output.appendBytes(shape);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "private static OGCGeometry readSimpleGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length)\n    {\n        int currentPosition = toIntExact(input.position());\n        ByteBuffer geometryBuffer = inputSlice.toByteBuffer(currentPosition, length).slice();\n        input.setPosition(currentPosition + length);\n        Geometry esriGeometry = OperatorImportFromESRIShape.local().execute(0, Unknown, geometryBuffer);\n        return createFromEsriGeometry(esriGeometry, type.isMultitype());\n    }",
    "replace": "private static OGCGeometry readSimpleGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length)\n    {\n        if (type == GeometryType.POINT) {\n            double x = input.readDouble();\n            double y = input.readDouble();\n            if (isEsriNaN(x) || isEsriNaN(y)) {\n                Point p = new Point();\n                p.setEmpty();\n                return new OGCPoint(p, null);\n            }\n            return new OGCPoint(new Point(x, y), null);\n        }\n        int currentPosition = toIntExact(input.position());\n        ByteBuffer geometryBuffer = inputSlice.toByteBuffer(currentPosition, length).slice();\n        input.setPosition(currentPosition + length);\n        Geometry esriGeometry = OperatorImportFromESRIShape.local().execute(0, Unknown, geometryBuffer);\n        return createFromEsriGeometry(esriGeometry, type.isMultitype());\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "private static Envelope getPointEnvelope(BasicSliceInput input)\n    {\n        // skip type injected by esri\n        input.readInt();\n\n        double x = input.readDouble();\n        double y = input.readDouble();\n        if (isEsriNaN(x) || isEsriNaN(y)) {\n            // TODO: isn't it better to return empty envelope instead?\n            return null;\n        }\n        return new Envelope(x, y, x, y);\n    }",
    "replace": "private static Envelope getPointEnvelope(BasicSliceInput input)\n    {\n        double x = input.readDouble();\n        double y = input.readDouble();\n        if (isEsriNaN(x) || isEsriNaN(y)) {\n            // TODO: isn't it better to return empty envelope instead?\n            return null;\n        }\n        return new Envelope(x, y, x, y);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java",
    "search": "private static Geometry readGeometry(BasicSliceInput input, GeometryType type)\n    {\n        switch (type) {\n            case POINT:\n                return readPoint(input, true);",
    "replace": "private static Geometry readGeometry(BasicSliceInput input, GeometryType type)\n    {\n        switch (type) {\n            case POINT:\n                return readPoint(input);"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java",
    "search": "private static Point readPoint(SliceInput input, boolean skipType)\n    {\n        if (skipType) {\n            skipEsriType(input);\n        }\n        Coordinate coordinates = readCoordinate(input);\n        if (isEsriNaN(coordinates.x) || isEsriNaN(coordinates.y)) {\n            return GEOMETRY_FACTORY.createPoint();\n        }\n        return GEOMETRY_FACTORY.createPoint(coordinates);\n    }",
    "replace": "private static Point readPoint(SliceInput input)\n    {\n        Coordinate coordinates = readCoordinate(input);\n        if (isEsriNaN(coordinates.x) || isEsriNaN(coordinates.y)) {\n            return GEOMETRY_FACTORY.createPoint();\n        }\n        return GEOMETRY_FACTORY.createPoint(coordinates);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java",
    "search": "for (int i = 0; i < pointCount; i++) {\n            points[i] = readPoint(input, false);\n        }",
    "replace": "for (int i = 0; i < pointCount; i++) {\n            points[i] = readPoint(input);\n        }"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java",
    "search": "private static void writePoint(Point point, SliceOutput output)\n    {\n        output.writeByte(GeometryType.POINT.code());\n        output.writeInt(EsriShapeType.POINT.code);\n        if (!point.isEmpty()) {\n            writeCoordinate(point.getCoordinate(), output);\n        }\n        else {\n            writeCoordinate(new Coordinate(translateToAVNaN(Double.NaN), translateToAVNaN(Double.NaN)), output);\n        }\n    }",
    "replace": "private static void writePoint(Point point, SliceOutput output)\n    {\n        output.writeByte(GeometryType.POINT.code());\n        if (!point.isEmpty()) {\n            writeCoordinate(point.getCoordinate(), output);\n        }\n        else {\n            writeCoordinate(new Coordinate(translateToAVNaN(Double.NaN), translateToAVNaN(Double.NaN)), output);\n        }\n    }"
  }
]
```