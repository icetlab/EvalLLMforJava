diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
index 93aeb97e76..eb708b6ffd 100644
--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
@@ -184,7 +184,7 @@ public class ByteSelectiveStreamReader
             }
 
             if (presentStream != null && !presentStream.nextBit()) {
-                if ((nonDeterministicFilter && filter.testNull()) || nullsAllowed) {
+                if (nullsAllowed) {
                     if (outputRequired) {
                         nulls[outputPositionCount] = true;
                     }
diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java
index 720023399d..28c811ce5e 100644
--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java
+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java
@@ -48,13 +48,23 @@ final class ReaderUtils
     public static byte[] unpackByteNulls(byte[] values, boolean[] isNull)
     {
         byte[] result = new byte[isNull.length];
+        int valuesPosition = 0;
+        int resultPosition = 0;
+        while (resultPosition < isNull.length) {
+            while (resultPosition < isNull.length && isNull[resultPosition]) {
+                resultPosition++;
+            }
+            if (resultPosition == isNull.length) {
+                break;
+            }
 
-        int position = 0;
-        for (int i = 0; i < isNull.length; i++) {
-            if (!isNull[i]) {
-                result[i] = values[position];
-                position++;
+            int nonNullsStart = resultPosition;
+            while (resultPosition < isNull.length && !isNull[resultPosition]) {
+                resultPosition++;
             }
+            int nonNullsCount = resultPosition - nonNullsStart;
+            System.arraycopy(values, valuesPosition, result, nonNullsStart, nonNullsCount);
+            valuesPosition += nonNullsCount;
         }
         return result;
     }
@@ -62,13 +72,23 @@ final class ReaderUtils
     public static short[] unpackShortNulls(short[] values, boolean[] isNull)
     {
         short[] result = new short[isNull.length];
+        int valuesPosition = 0;
+        int resultPosition = 0;
+        while (resultPosition < isNull.length) {
+            while (resultPosition < isNull.length && isNull[resultPosition]) {
+                resultPosition++;
+            }
+            if (resultPosition == isNull.length) {
+                break;
+            }
 
-        int position = 0;
-        for (int i = 0; i < isNull.length; i++) {
-            if (!isNull[i]) {
-                result[i] = values[position];
-                position++;
+            int nonNullsStart = resultPosition;
+            while (resultPosition < isNull.length && !isNull[resultPosition]) {
+                resultPosition++;
             }
+            int nonNullsCount = resultPosition - nonNullsStart;
+            System.arraycopy(values, valuesPosition, result, nonNullsStart, nonNullsCount);
+            valuesPosition += nonNullsCount;
         }
         return result;
     }
@@ -76,13 +96,23 @@ final class ReaderUtils
     public static int[] unpackIntNulls(int[] values, boolean[] isNull)
     {
         int[] result = new int[isNull.length];
+        int valuesPosition = 0;
+        int resultPosition = 0;
+        while (resultPosition < isNull.length) {
+            while (resultPosition < isNull.length && isNull[resultPosition]) {
+                resultPosition++;
+            }
+            if (resultPosition == isNull.length) {
+                break;
+            }
 
-        int position = 0;
-        for (int i = 0; i < isNull.length; i++) {
-            if (!isNull[i]) {
-                result[i] = values[position];
-                position++;
+            int nonNullsStart = resultPosition;
+            while (resultPosition < isNull.length && !isNull[resultPosition]) {
+                resultPosition++;
             }
+            int nonNullsCount = resultPosition - nonNullsStart;
+            System.arraycopy(values, valuesPosition, result, nonNullsStart, nonNullsCount);
+            valuesPosition += nonNullsCount;
         }
         return result;
     }
@@ -90,13 +120,23 @@ final class ReaderUtils
     public static long[] unpackLongNulls(long[] values, boolean[] isNull)
     {
         long[] result = new long[isNull.length];
+        int valuesPosition = 0;
+        int resultPosition = 0;
+        while (resultPosition < isNull.length) {
+            while (resultPosition < isNull.length && isNull[resultPosition]) {
+                resultPosition++;
+            }
+            if (resultPosition == isNull.length) {
+                break;
+            }
 
-        int position = 0;
-        for (int i = 0; i < isNull.length; i++) {
-            if (!isNull[i]) {
-                result[i] = values[position];
-                position++;
+            int nonNullsStart = resultPosition;
+            while (resultPosition < isNull.length && !isNull[resultPosition]) {
+                resultPosition++;
             }
+            int nonNullsCount = resultPosition - nonNullsStart;
+            System.arraycopy(values, valuesPosition, result, nonNullsStart, nonNullsCount);
+            valuesPosition += nonNullsCount;
         }
         return result;
     }
