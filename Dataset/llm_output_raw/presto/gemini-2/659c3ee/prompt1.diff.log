My proposed changes focus on optimizing data manipulation loops in `ByteSelectiveStreamReader` and `ReaderUtils`.

In `ByteSelectiveStreamReader`, the `getBlock` and `compactValues` methods filter and copy data based on position arrays. The original implementation's loop structure is replaced with a more efficient two-pointer algorithm. This new approach reduces overhead by iterating directly over the target positions, which is particularly beneficial when dealing with sparse selections.

In `ReaderUtils`, the `unpack...Nulls` methods are updated to use `System.arraycopy` for bulk data transfers. Instead of copying elements one by one, the improved logic identifies contiguous blocks of non-null values and copies them in a single operation, which is significantly faster for large sequences. This optimization is applied to methods handling byte, short, int, and long arrays.

```json
[
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java",
    "search": "        int positionIndex = 0;\n        int nextPosition = positions[positionIndex];\n        for (int i = 0; i < outputPositionCount; i++) {\n            if (outputPositions[i] < nextPosition) {\n                continue;\n            }\n\n            assert outputPositions[i] == nextPosition;\n\n            valuesCopy[positionIndex] = this.values[i];\n            if (nullsCopy != null) {\n                nullsCopy[positionIndex] = this.nulls[i];\n            }\n\n            positionIndex++;\n            if (positionIndex >= positionCount) {\n                break;\n            }\n\n            nextPosition = positions[positionIndex];\n        }",
    "replace": "        int outputPositionsIndex = 0;\n        for (int i = 0; i < positionCount; i++) {\n            int position = positions[i];\n            while (outputPositions[outputPositionsIndex] < position) {\n                outputPositionsIndex++;\n            }\n\n            assert outputPositions[outputPositionsIndex] == position;\n\n            valuesCopy[i] = this.values[outputPositionsIndex];\n            if (nullsCopy != null) {\n                nullsCopy[i] = this.nulls[outputPositionsIndex];\n            }\n            outputPositionsIndex++;\n        }"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java",
    "search": "        int positionIndex = 0;\n        int nextPosition = positions[positionIndex];\n        for (int i = 0; i < outputPositionCount; i++) {\n            if (outputPositions[i] < nextPosition) {\n                continue;\n            }\n\n            assert outputPositions[i] == nextPosition;\n\n            values[positionIndex] = values[i];\n            if (compactNulls) {\n                nulls[positionIndex] = nulls[i];\n            }\n            outputPositions[positionIndex] = nextPosition;\n\n            positionIndex++;\n            if (positionIndex >= positionCount) {\n                break;\n            }\n            nextPosition = positions[positionIndex];\n        }",
    "replace": "        int outputPositionsIndex = 0;\n        for (int i = 0; i < positionCount; i++) {\n            int position = positions[i];\n            while (outputPositions[outputPositionsIndex] < position) {\n                outputPositionsIndex++;\n            }\n\n            assert outputPositions[outputPositionsIndex] == position;\n\n            if (i != outputPositionsIndex) {\n                values[i] = values[outputPositionsIndex];\n                if (compactNulls) {\n                    nulls[i] = nulls[outputPositionsIndex];\n                }\n            }\n            outputPositions[i] = position;\n            outputPositionsIndex++;\n        }"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java",
    "search": "    public static byte[] unpackByteNulls(byte[] values, boolean[] isNull)\n    {\n        byte[] result = new byte[isNull.length];\n\n        int position = 0;\n        for (int i = 0; i < isNull.length; i++) {\n            if (!isNull[i]) {\n                result[i] = values[position];\n                position++;\n            }\n        }\n        return result;\n    }",
    "replace": "    public static byte[] unpackByteNulls(byte[] values, boolean[] isNull)\n    {\n        byte[] result = new byte[isNull.length];\n        int valuesPosition = 0;\n        int resultPosition = 0;\n        while (resultPosition < isNull.length) {\n            while (resultPosition < isNull.length && isNull[resultPosition]) {\n                resultPosition++;\n            }\n            if (resultPosition == isNull.length) {\n                break;\n            }\n\n            int nonNullsStart = resultPosition;\n            while (resultPosition < isNull.length && !isNull[resultPosition]) {\n                resultPosition++;\n            }\n            int nonNullsCount = resultPosition - nonNullsStart;\n            System.arraycopy(values, valuesPosition, result, nonNullsStart, nonNullsCount);\n            valuesPosition += nonNullsCount;\n        }\n        return result;\n    }"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java",
    "search": "    public static short[] unpackShortNulls(short[] values, boolean[] isNull)\n    {\n        short[] result = new short[isNull.length];\n\n        int position = 0;\n        for (int i = 0; i < isNull.length; i++) {\n            if (!isNull[i]) {\n                result[i] = values[position];\n                position++;\n            }\n        }\n        return result;\n    }",
    "replace": "    public static short[] unpackShortNulls(short[] values, boolean[] isNull)\n    {\n        short[] result = new short[isNull.length];\n        int valuesPosition = 0;\n        int resultPosition = 0;\n        while (resultPosition < isNull.length) {\n            while (resultPosition < isNull.length && isNull[resultPosition]) {\n                resultPosition++;\n            }\n            if (resultPosition == isNull.length) {\n                break;\n            }\n\n            int nonNullsStart = resultPosition;\n            while (resultPosition < isNull.length && !isNull[resultPosition]) {\n                resultPosition++;\n            }\n            int nonNullsCount = resultPosition - nonNullsStart;\n            System.arraycopy(values, valuesPosition, result, nonNullsStart, nonNullsCount);\n            valuesPosition += nonNullsCount;\n        }\n        return result;\n    }"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java",
    "search": "    public static int[] unpackIntNulls(int[] values, boolean[] isNull)\n    {\n        int[] result = new int[isNull.length];\n\n        int position = 0;\n        for (int i = 0; i < isNull.length; i++) {\n            if (!isNull[i]) {\n                result[i] = values[position];\n                position++;\n            }\n        }\n        return result;\n    }",
    "replace": "    public static int[] unpackIntNulls(int[] values, boolean[] isNull)\n    {\n        int[] result = new int[isNull.length];\n        int valuesPosition = 0;\n        int resultPosition = 0;\n        while (resultPosition < isNull.length) {\n            while (resultPosition < isNull.length && isNull[resultPosition]) {\n                resultPosition++;\n            }\n            if (resultPosition == isNull.length) {\n                break;\n            }\n\n            int nonNullsStart = resultPosition;\n            while (resultPosition < isNull.length && !isNull[resultPosition]) {\n                resultPosition++;\n            }\n            int nonNullsCount = resultPosition - nonNullsStart;\n            System.arraycopy(values, valuesPosition, result, nonNullsStart, nonNullsCount);\n            valuesPosition += nonNullsCount;\n        }\n        return result;\n    }"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java",
    "search": "    public static long[] unpackLongNulls(long[] values, boolean[] isNull)\n    {\n        long[] result = new long[isNull.length];\n\n        int position = 0;\n        for (int i = 0; i < isNull.length; i++) {\n            if (!isNull[i]) {\n                result[i] = values[position];\n                position++;\n            }\n        }\n        return result;\n    }",
    "replace": "    public static long[] unpackLongNulls(long[] values, boolean[] isNull)\n    {\n        long[] result = new long[isNull.length];\n        int valuesPosition = 0;\n        int resultPosition = 0;\n        while (resultPosition < isNull.length) {\n            while (resultPosition < isNull.length && isNull[resultPosition]) {\n                resultPosition++;\n            }\n            if (resultPosition == isNull.length) {\n                break;\n            }\n\n            int nonNullsStart = resultPosition;\n            while (resultPosition < isNull.length && !isNull[resultPosition]) {\n                resultPosition++;\n            }\n            int nonNullsCount = resultPosition - nonNullsStart;\n            System.arraycopy(values, valuesPosition, result, nonNullsStart, nonNullsCount);\n            valuesPosition += nonNullsCount;\n        }\n        return result;\n    }"
  }
]
```