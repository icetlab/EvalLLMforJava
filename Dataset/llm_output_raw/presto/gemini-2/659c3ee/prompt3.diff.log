My overall improvement strategy is to optimize data processing loops.

In `ByteSelectiveStreamReader`, I've simplified a conditional check within the `readWithFilter` method's hot loop. The original condition was logically equivalent to a simpler one, and this change removes redundant computations.

In `ReaderUtils`, I've rewritten the `unpack...Nulls` methods (`byte`, `short`, `int`, `long`). The original implementations iterated through the `isNull` flag array and copied values one by one. The new implementations identify contiguous blocks of non-null values and use `System.arraycopy` to perform bulk copies. This approach is significantly more efficient when data contains runs of non-null values, as it leverages highly optimized native code for memory copying and reduces loop overhead.

```json
[
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java",
    "search": "if ((nonDeterministicFilter && filter.testNull()) || nullsAllowed) {",
    "replace": "if (nullsAllowed) {"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java",
    "search": "public static byte[] unpackByteNulls(byte[] values, boolean[] isNull)\n    {\n        byte[] result = new byte[isNull.length];\n\n        int position = 0;\n        for (int i = 0; i < isNull.length; i++) {\n            if (!isNull[i]) {\n                result[i] = values[position];\n                position++;\n            }\n        }\n        return result;\n    }",
    "replace": "public static byte[] unpackByteNulls(byte[] values, boolean[] isNull)\n    {\n        byte[] result = new byte[isNull.length];\n        int valuesPosition = 0;\n        int resultPosition = 0;\n        while (resultPosition < isNull.length) {\n            while (resultPosition < isNull.length && isNull[resultPosition]) {\n                resultPosition++;\n            }\n            if (resultPosition == isNull.length) {\n                break;\n            }\n\n            int nonNullsStart = resultPosition;\n            while (resultPosition < isNull.length && !isNull[resultPosition]) {\n                resultPosition++;\n            }\n            int nonNullsCount = resultPosition - nonNullsStart;\n            System.arraycopy(values, valuesPosition, result, nonNullsStart, nonNullsCount);\n            valuesPosition += nonNullsCount;\n        }\n        return result;\n    }"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java",
    "search": "public static short[] unpackShortNulls(short[] values, boolean[] isNull)\n    {\n        short[] result = new short[isNull.length];\n\n        int position = 0;\n        for (int i = 0; i < isNull.length; i++) {\n            if (!isNull[i]) {\n                result[i] = values[position];\n                position++;\n            }\n        }\n        return result;\n    }",
    "replace": "public static short[] unpackShortNulls(short[] values, boolean[] isNull)\n    {\n        short[] result = new short[isNull.length];\n        int valuesPosition = 0;\n        int resultPosition = 0;\n        while (resultPosition < isNull.length) {\n            while (resultPosition < isNull.length && isNull[resultPosition]) {\n                resultPosition++;\n            }\n            if (resultPosition == isNull.length) {\n                break;\n            }\n\n            int nonNullsStart = resultPosition;\n            while (resultPosition < isNull.length && !isNull[resultPosition]) {\n                resultPosition++;\n            }\n            int nonNullsCount = resultPosition - nonNullsStart;\n            System.arraycopy(values, valuesPosition, result, nonNullsStart, nonNullsCount);\n            valuesPosition += nonNullsCount;\n        }\n        return result;\n    }"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java",
    "search": "public static int[] unpackIntNulls(int[] values, boolean[] isNull)\n    {\n        int[] result = new int[isNull.length];\n\n        int position = 0;\n        for (int i = 0; i < isNull.length; i++) {\n            if (!isNull[i]) {\n                result[i] = values[position];\n                position++;\n            }\n        }\n        return result;\n    }",
    "replace": "public static int[] unpackIntNulls(int[] values, boolean[] isNull)\n    {\n        int[] result = new int[isNull.length];\n        int valuesPosition = 0;\n        int resultPosition = 0;\n        while (resultPosition < isNull.length) {\n            while (resultPosition < isNull.length && isNull[resultPosition]) {\n                resultPosition++;\n            }\n            if (resultPosition == isNull.length) {\n                break;\n            }\n\n            int nonNullsStart = resultPosition;\n            while (resultPosition < isNull.length && !isNull[resultPosition]) {\n                resultPosition++;\n            }\n            int nonNullsCount = resultPosition - nonNullsStart;\n            System.arraycopy(values, valuesPosition, result, nonNullsStart, nonNullsCount);\n            valuesPosition += nonNullsCount;\n        }\n        return result;\n    }"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java",
    "search": "public static long[] unpackLongNulls(long[] values, boolean[] isNull)\n    {\n        long[] result = new long[isNull.length];\n\n        int position = 0;\n        for (int i = 0; i < isNull.length; i++) {\n            if (!isNull[i]) {\n                result[i] = values[position];\n                position++;\n            }\n        }\n        return result;\n    }",
    "replace": "public static long[] unpackLongNulls(long[] values, boolean[] isNull)\n    {\n        long[] result = new long[isNull.length];\n        int valuesPosition = 0;\n        int resultPosition = 0;\n        while (resultPosition < isNull.length) {\n            while (resultPosition < isNull.length && isNull[resultPosition]) {\n                resultPosition++;\n            }\n            if (resultPosition == isNull.length) {\n                break;\n            }\n\n            int nonNullsStart = resultPosition;\n            while (resultPosition < isNull.length && !isNull[resultPosition]) {\n                resultPosition++;\n            }\n            int nonNullsCount = resultPosition - nonNullsStart;\n            System.arraycopy(values, valuesPosition, result, nonNullsStart, nonNullsCount);\n            valuesPosition += nonNullsCount;\n        }\n        return result;\n    }"
  }
]
```