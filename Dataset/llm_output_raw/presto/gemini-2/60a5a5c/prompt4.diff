diff --git a/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java b/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java
index 74b77228f0..b45fd74c29 100644
--- a/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java
+++ b/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java
@@ -47,6 +47,9 @@ public class PagesSerde
     private final Optional<Decompressor> decompressor;
     private final Optional<SpillCipher> spillCipher;
 
+    private ByteBuffer compressionBuffer;
+    private ByteBuffer decompressionBuffer;
+
     public PagesSerde(BlockEncodingSerde blockEncodingSerde, Optional<Compressor> compressor, Optional<Decompressor> decompressor, Optional<SpillCipher> spillCipher)
     {
         this.blockEncodingSerde = requireNonNull(blockEncodingSerde, "blockEncodingSerde is null");
@@ -66,7 +69,13 @@ public class PagesSerde
         byte markers = PageCodecMarker.none();
 
         if (compressor.isPresent()) {
-            ByteBuffer compressionBuffer = ByteBuffer.allocate(compressor.get().maxCompressedLength(uncompressedSize));
+            int maxCompressedLength = compressor.get().maxCompressedLength(uncompressedSize);
+            if (compressionBuffer == null || compressionBuffer.capacity() < maxCompressedLength) {
+                compressionBuffer = ByteBuffer.allocate(maxCompressedLength);
+            }
+            else {
+                compressionBuffer.clear();
+            }
             compressor.get().compress(slice.toByteBuffer(), compressionBuffer);
             compressionBuffer.flip();
             if ((((double) compressionBuffer.remaining()) / uncompressedSize) <= MINIMUM_COMPRESSION_RATIO) {
@@ -103,7 +112,13 @@ public class PagesSerde
             checkState(decompressor.isPresent(), "Page is compressed, but decompressor is missing");
 
             int uncompressedSize = serializedPage.getUncompressedSizeInBytes();
-            ByteBuffer decompressionBuffer = ByteBuffer.allocate(uncompressedSize);
+            if (decompressionBuffer == null || decompressionBuffer.capacity() < uncompressedSize) {
+                decompressionBuffer = ByteBuffer.allocate(uncompressedSize);
+            }
+            else {
+                decompressionBuffer.clear();
+            }
+            decompressionBuffer.limit(uncompressedSize);
 
             decompressor.get().decompress(slice.toByteBuffer(), decompressionBuffer);
             decompressionBuffer.flip();
