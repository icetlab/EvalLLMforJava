The overall improvement is to optimize the serialization and deserialization of point geometries. I will modify the custom serialization format to remove a redundant 4-byte ESRI point type integer that was being written for each point. This saves space and processing time.

For `GeometrySerde`, which uses the ESRI library, I will add specialized code paths for handling `Point` geometries. This avoids calls to the generic and potentially slower `geometryToEsriShape` and `OperatorImportFromESRIShape` methods from the ESRI library, replacing them with direct coordinate handling.

For `JtsGeometrySerde`, I will update the `writePoint` and `readPoint` methods to reflect the format change, removing the logic for writing and reading the now-obsolete ESRI point type. This also simplifies the `readPoint` method by removing a now-unnecessary parameter.

These changes together reduce the serialized size of points and improve the performance of both serialization and deserialization, especially for datasets with many point geometries.

```json
[
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "import static com.facebook.presto.geospatial.GeometryUtils.isEsriNaN;",
    "replace": "import static com.facebook.presto.geospatial.GeometryUtils.isEsriNaN;\nimport static com.facebook.presto.geospatial.GeometryUtils.translateToAVNaN;"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "    private static void writeSimpleGeometry(DynamicSliceOutput output, GeometryType type, OGCGeometry geometry)\n    {\n        output.appendByte(type.code());\n        Geometry esriGeometry = requireNonNull(geometry.getEsriGeometry(), \"esriGeometry is null\");\n        byte[] shape = geometryToEsriShape(esriGeometry);\n        output.appendBytes(shape);\n    }",
    "replace": "    private static void writeSimpleGeometry(DynamicSliceOutput output, GeometryType type, OGCGeometry geometry)\n    {\n        output.appendByte(type.code());\n        Geometry esriGeometry = requireNonNull(geometry.getEsriGeometry(), \"esriGeometry is null\");\n        if (type == GeometryType.POINT) {\n            Point point = (Point) esriGeometry;\n            output.writeDouble(translateToAVNaN(point.getX()));\n            output.writeDouble(translateToAVNaN(point.getY()));\n            return;\n        }\n        byte[] shape = geometryToEsriShape(esriGeometry);\n        output.appendBytes(shape);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "    private static OGCGeometry readSimpleGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length)\n    {\n        int currentPosition = toIntExact(input.position());\n        ByteBuffer geometryBuffer = inputSlice.toByteBuffer(currentPosition, length).slice();\n        input.setPosition(currentPosition + length);\n        Geometry esriGeometry = OperatorImportFromESRIShape.local().execute(0, Unknown, geometryBuffer);\n        return createFromEsriGeometry(esriGeometry, type.isMultitype());\n    }",
    "replace": "    private static OGCGeometry readSimpleGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length)\n    {\n        if (type == GeometryType.POINT) {\n            double x = input.readDouble();\n            double y = input.readDouble();\n            return new OGCPoint(new Point(x, y), null);\n        }\n\n        int currentPosition = toIntExact(input.position());\n        ByteBuffer geometryBuffer = inputSlice.toByteBuffer(currentPosition, length).slice();\n        input.setPosition(currentPosition + length);\n        Geometry esriGeometry = OperatorImportFromESRIShape.local().execute(0, Unknown, geometryBuffer);\n        return createFromEsriGeometry(esriGeometry, type.isMultitype());\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "        // skip type injected by esri\n        input.readInt();",
    "replace": "        // skip type injected by esri"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java",
    "search": "    private static Point readPoint(SliceInput input, boolean skipType)\n    {\n        if (skipType) {\n            skipEsriType(input);\n        }\n        Coordinate coordinates = readCoordinate(input);\n        if (isEsriNaN(coordinates.x) || isEsriNaN(coordinates.y)) {\n            return GEOMETRY_FACTORY.createPoint();\n        }\n        return GEOMETRY_FACTORY.createPoint(coordinates);\n    }",
    "replace": "    private static Point readPoint(SliceInput input)\n    {\n        Coordinate coordinates = readCoordinate(input);\n        if (isEsriNaN(coordinates.x) || isEsriNaN(coordinates.y)) {\n            return GEOMETRY_FACTORY.createPoint();\n        }\n        return GEOMETRY_FACTORY.createPoint(coordinates);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java",
    "search": "            case POINT:\n                return readPoint(input, true);",
    "replace": "            case POINT:\n                return readPoint(input);"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java",
    "search": "        for (int i = 0; i < pointCount; i++) {\n            points[i] = readPoint(input, false);\n        }",
    "replace": "        for (int i = 0; i < pointCount; i++) {\n            points[i] = readPoint(input);\n        }"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java",
    "search": "        output.writeByte(GeometryType.POINT.code());\n        output.writeInt(EsriShapeType.POINT.code);",
    "replace": "        output.writeByte(GeometryType.POINT.code());"
  }
]
```