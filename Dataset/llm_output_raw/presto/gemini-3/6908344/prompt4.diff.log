The overall improvement is to optimize the serialization of Point geometries. Currently, the serialization format for a Point includes an ESRI-specific shape type identifier, which is redundant since the geometry type is already encoded at the beginning of the serialized slice. By removing this 4-byte integer for each Point, we reduce the serialized size and improve serialization and deserialization performance by avoiding unnecessary data processing.

This change is applied to both `GeometrySerde` (for ESRI `OGCGeometry`) and `JtsGeometrySerde` (for JTS `Geometry`) to maintain format compatibility, which is verified by unit tests. The deserialization logic for Points and their envelopes is updated accordingly to handle the new, more compact format.

```json
[
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "import static com.esri.core.geometry.GeometryEngine.geometryToEsriShape;\nimport static com.facebook.presto.geospatial.GeometryUtils.isEsriNaN;",
    "replace": "import static com.esri.core.geometry.GeometryEngine.geometryToEsriShape;\nimport static com.facebook.presto.geospatial.GeometryUtils.isEsriNaN;\nimport static com.facebook.presto.geospatial.GeometryUtils.translateToAVNaN;"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "    private static void writeGeometry(DynamicSliceOutput output, OGCGeometry geometry)\n    {\n        GeometryType type = GeometryType.getForEsriGeometryType(geometry.geometryType());\n        switch (type) {\n            case POINT:\n            case MULTI_POINT:\n            case LINE_STRING:\n            case MULTI_LINE_STRING:\n            case POLYGON:\n            case MULTI_POLYGON:\n                writeSimpleGeometry(output, type, geometry);\n                break;\n            case GEOMETRY_COLLECTION: {\n                verify(geometry instanceof OGCConcreteGeometryCollection);\n                writeGeometryCollection(output, (OGCConcreteGeometryCollection) geometry);\n                break;\n            }\n            default:\n                throw new IllegalArgumentException(\"Unexpected type: \" + type);\n        }\n    }",
    "replace": "    private static void writeGeometry(DynamicSliceOutput output, OGCGeometry geometry)\n    {\n        GeometryType type = GeometryType.getForEsriGeometryType(geometry.geometryType());\n        switch (type) {\n            case POINT:\n                writePoint(output, (OGCPoint) geometry);\n                break;\n            case MULTI_POINT:\n            case LINE_STRING:\n            case MULTI_LINE_STRING:\n            case POLYGON:\n            case MULTI_POLYGON:\n                writeSimpleGeometry(output, type, geometry);\n                break;\n            case GEOMETRY_COLLECTION: {\n                verify(geometry instanceof OGCConcreteGeometryCollection);\n                writeGeometryCollection(output, (OGCConcreteGeometryCollection) geometry);\n                break;\n            }\n            default:\n                throw new IllegalArgumentException(\"Unexpected type: \" + type);\n        }\n    }\n\n    private static void writePoint(DynamicSliceOutput output, OGCPoint point)\n    {\n        output.appendByte(GeometryType.POINT.code());\n        Point esriPoint = (Point) point.getEsriGeometry();\n        if (esriPoint == null || esriPoint.isEmpty()) {\n            output.writeDouble(translateToAVNaN(Double.NaN));\n            output.writeDouble(translateToAVNaN(Double.NaN));\n        }\n        else {\n            output.writeDouble(translateToAVNaN(esriPoint.getX()));\n            output.writeDouble(translateToAVNaN(esriPoint.getY()));\n        }\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "    private static OGCGeometry readGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length)\n    {\n        switch (type) {\n            case POINT:\n            case MULTI_POINT:\n            case LINE_STRING:\n            case MULTI_LINE_STRING:\n            case POLYGON:\n            case MULTI_POLYGON:\n                return readSimpleGeometry(input, inputSlice, type, length);\n            case GEOMETRY_COLLECTION:\n                return readGeometryCollection(input, inputSlice);\n            default:\n                throw new IllegalArgumentException(\"Unexpected type: \" + type);\n        }\n    }",
    "replace": "    private static OGCGeometry readGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length)\n    {\n        switch (type) {\n            case POINT:\n                return readPoint(input);\n            case MULTI_POINT:\n            case LINE_STRING:\n            case MULTI_LINE_STRING:\n            case POLYGON:\n            case MULTI_POLYGON:\n                return readSimpleGeometry(input, inputSlice, type, length);\n            case GEOMETRY_COLLECTION:\n                return readGeometryCollection(input, inputSlice);\n            default:\n                throw new IllegalArgumentException(\"Unexpected type: \" + type);\n        }\n    }\n\n    private static OGCGeometry readPoint(BasicSliceInput input)\n    {\n        double x = input.readDouble();\n        double y = input.readDouble();\n        if (isEsriNaN(x) || isEsriNaN(y)) {\n            return new OGCPoint(new Point(), null);\n        }\n        return new OGCPoint(new Point(x, y), null);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "    private static Envelope getPointEnvelope(BasicSliceInput input)\n    {\n        // skip type injected by esri\n        input.readInt();\n\n        double x = input.readDouble();\n        double y = input.readDouble();\n        if (isEsriNaN(x) || isEsriNaN(y)) {\n            // TODO: isn't it better to return empty envelope instead?\n            return null;\n        }\n        return new Envelope(x, y, x, y);\n    }",
    "replace": "    private static Envelope getPointEnvelope(BasicSliceInput input)\n    {\n        double x = input.readDouble();\n        double y = input.readDouble();\n        if (isEsriNaN(x) || isEsriNaN(y)) {\n            // TODO: isn't it better to return empty envelope instead?\n            return null;\n        }\n        return new Envelope(x, y, x, y);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java",
    "search": "    private static Geometry readGeometry(BasicSliceInput input, GeometryType type)\n    {\n        switch (type) {\n            case POINT:\n                return readPoint(input, true);\n            case MULTI_POINT:\n                return readMultiPoint(input);\n            case LINE_STRING:\n                return readPolyline(input, false);\n            case MULTI_LINE_STRING:\n                return readPolyline(input, true);\n            case POLYGON:\n                return readPolygon(input, false);\n            case MULTI_POLYGON:\n                return readPolygon(input, true);\n            case GEOMETRY_COLLECTION:\n                return readGeometryCollection(input);\n            default:\n                throw new UnsupportedOperationException(\"Unexpected type: \" + type);\n        }\n    }\n\n    private static Point readPoint(SliceInput input, boolean skipType)\n    {\n        if (skipType) {\n            skipEsriType(input);\n        }\n        Coordinate coordinates = readCoordinate(input);\n        if (isEsriNaN(coordinates.x) || isEsriNaN(coordinates.y)) {\n            return GEOMETRY_FACTORY.createPoint();\n        }\n        return GEOMETRY_FACTORY.createPoint(coordinates);\n    }\n\n    private static Geometry readMultiPoint(SliceInput input)\n    {\n        skipEsriType(input);\n        skipEnvelope(input);\n        int pointCount = input.readInt();\n        Point[] points = new Point[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n            points[i] = readPoint(input, false);\n        }\n        return GEOMETRY_FACTORY.createMultiPoint(points);\n    }",
    "replace": "    private static Geometry readGeometry(BasicSliceInput input, GeometryType type)\n    {\n        switch (type) {\n            case POINT:\n                return readPoint(input);\n            case MULTI_POINT:\n                return readMultiPoint(input);\n            case LINE_STRING:\n                return readPolyline(input, false);\n            case MULTI_LINE_STRING:\n                return readPolyline(input, true);\n            case POLYGON:\n                return readPolygon(input, false);\n            case MULTI_POLYGON:\n                return readPolygon(input, true);\n            case GEOMETRY_COLLECTION:\n                return readGeometryCollection(input);\n            default:\n                throw new UnsupportedOperationException(\"Unexpected type: \" + type);\n        }\n    }\n\n    private static Point readPoint(SliceInput input)\n    {\n        Coordinate coordinates = readCoordinate(input);\n        if (isEsriNaN(coordinates.x) || isEsriNaN(coordinates.y)) {\n            return GEOMETRY_FACTORY.createPoint();\n        }\n        return GEOMETRY_FACTORY.createPoint(coordinates);\n    }\n\n    private static Geometry readMultiPoint(SliceInput input)\n    {\n        skipEsriType(input);\n        skipEnvelope(input);\n        int pointCount = input.readInt();\n        Point[] points = new Point[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n            points[i] = readPoint(input);\n        }\n        return GEOMETRY_FACTORY.createMultiPoint(points);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java",
    "search": "    private static void writePoint(Point point, SliceOutput output)\n    {\n        output.writeByte(GeometryType.POINT.code());\n        output.writeInt(EsriShapeType.POINT.code);\n        if (!point.isEmpty()) {\n            writeCoordinate(point.getCoordinate(), output);\n        }\n        else {\n            writeCoordinate(new Coordinate(translateToAVNaN(Double.NaN), translateToAVNaN(Double.NaN)), output);\n        }\n    }",
    "replace": "    private static void writePoint(Point point, SliceOutput output)\n    {\n        output.writeByte(GeometryType.POINT.code());\n        if (!point.isEmpty()) {\n            writeCoordinate(point.getCoordinate(), output);\n        }\n        else {\n            writeCoordinate(new Coordinate(translateToAVNaN(Double.NaN), translateToAVNaN(Double.NaN)), output);\n        }\n    }"
  }
]
```