diff --git a/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java b/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java
index 74b77228f0..ea7ec6c418 100644
--- a/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java
+++ b/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java
@@ -65,6 +65,7 @@ public class PagesSerde
         int uncompressedSize = serializationBuffer.size();
         byte markers = PageCodecMarker.none();
 
+        boolean compressed = false;
         if (compressor.isPresent()) {
             ByteBuffer compressionBuffer = ByteBuffer.allocate(compressor.get().maxCompressedLength(uncompressedSize));
             compressor.get().compress(slice.toByteBuffer(), compressionBuffer);
@@ -72,6 +73,7 @@ public class PagesSerde
             if ((((double) compressionBuffer.remaining()) / uncompressedSize) <= MINIMUM_COMPRESSION_RATIO) {
                 slice = Slices.wrappedBuffer(compressionBuffer);
                 markers = COMPRESSED.set(markers);
+                compressed = true;
             }
         }
 
@@ -79,7 +81,7 @@ public class PagesSerde
             slice = Slices.wrappedBuffer(spillCipher.get().encrypt(slice.toByteBuffer()));
             markers = ENCRYPTED.set(markers);
         }
-        else {
+        else if (!compressed) {
             //  Encryption disabled, slice data is likely much smaller than its backing buffer
             //  either because of compression or dynamic sizing of the initial output slice
             slice = Slices.copyOf(slice);
diff --git a/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java b/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java
index d3b9621b8e..90c9507dcc 100644
--- a/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java
+++ b/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java
@@ -432,9 +432,11 @@ public class PartitionedOutputOperator
 
                     operatorContext.recordOutput(pagePartition.getSizeInBytes(), pagePartition.getPositionCount());
 
-                    List<SerializedPage> serializedPages = splitPage(pagePartition, DEFAULT_MAX_PAGE_SIZE_IN_BYTES).stream()
-                            .map(serde::serialize)
-                            .collect(toImmutableList());
+                    List<Page> pages = splitPage(pagePartition, DEFAULT_MAX_PAGE_SIZE_IN_BYTES);
+                    java.util.List<SerializedPage> serializedPages = new java.util.ArrayList<>(pages.size());
+                    for (Page page : pages) {
+                        serializedPages.add(serde.serialize(page));
+                    }
 
                     outputBuffer.enqueue(operatorContext.getDriverContext().getLifespan(), partition, serializedPages);
                     pagesAdded.incrementAndGet();
