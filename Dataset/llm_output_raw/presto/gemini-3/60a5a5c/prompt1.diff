diff --git a/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java b/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java
index 74b77228f0..576208b849 100644
--- a/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java
+++ b/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java
@@ -47,6 +47,9 @@ public class PagesSerde
     private final Optional<Decompressor> decompressor;
     private final Optional<SpillCipher> spillCipher;
 
+    private ByteBuffer compressionBuffer;
+    private ByteBuffer decompressionBuffer;
+
     public PagesSerde(BlockEncodingSerde blockEncodingSerde, Optional<Compressor> compressor, Optional<Decompressor> decompressor, Optional<SpillCipher> spillCipher)
     {
         this.blockEncodingSerde = requireNonNull(blockEncodingSerde, "blockEncodingSerde is null");
@@ -66,7 +69,13 @@ public class PagesSerde
         byte markers = PageCodecMarker.none();
 
         if (compressor.isPresent()) {
-            ByteBuffer compressionBuffer = ByteBuffer.allocate(compressor.get().maxCompressedLength(uncompressedSize));
+            int maxCompressedLength = compressor.get().maxCompressedLength(uncompressedSize);
+            if (compressionBuffer == null || compressionBuffer.capacity() < maxCompressedLength) {
+                compressionBuffer = ByteBuffer.allocate(maxCompressedLength);
+            }
+            else {
+                compressionBuffer.clear();
+            }
             compressor.get().compress(slice.toByteBuffer(), compressionBuffer);
             compressionBuffer.flip();
             if ((((double) compressionBuffer.remaining()) / uncompressedSize) <= MINIMUM_COMPRESSION_RATIO) {
@@ -103,7 +112,12 @@ public class PagesSerde
             checkState(decompressor.isPresent(), "Page is compressed, but decompressor is missing");
 
             int uncompressedSize = serializedPage.getUncompressedSizeInBytes();
-            ByteBuffer decompressionBuffer = ByteBuffer.allocate(uncompressedSize);
+            if (decompressionBuffer == null || decompressionBuffer.capacity() < uncompressedSize) {
+                decompressionBuffer = ByteBuffer.allocate(uncompressedSize);
+            }
+            else {
+                decompressionBuffer.clear();
+            }
 
             decompressor.get().decompress(slice.toByteBuffer(), decompressionBuffer);
             decompressionBuffer.flip();
diff --git a/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java b/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java
index d3b9621b8e..a343d21ddc 100644
--- a/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java
+++ b/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java
@@ -378,10 +378,28 @@ public class PartitionedOutputOperator
         {
             requireNonNull(page, "page is null");
 
+            Block nullBlock = null;
+            if (nullChannel.isPresent()) {
+                nullBlock = page.getBlock(nullChannel.getAsInt());
+                if (nullBlock instanceof RunLengthEncodedBlock && nullBlock.isNull(0)) {
+                    // RLE nulls, so replicate all rows to all partitions
+                    for (int position = 0; position < page.getPositionCount(); position++) {
+                        for (PageBuilder pageBuilder : pageBuilders) {
+                            appendRow(pageBuilder, page, position);
+                        }
+                    }
+                    if (page.getPositionCount() > 0) {
+                        hasAnyRowBeenReplicated = true;
+                    }
+                    flush(false);
+                    return;
+                }
+            }
+
             Page partitionFunctionArgs = getPartitionFunctionArguments(page);
             for (int position = 0; position < page.getPositionCount(); position++) {
                 boolean shouldReplicate = (replicatesAnyRow && !hasAnyRowBeenReplicated) ||
-                        nullChannel.isPresent() && page.getBlock(nullChannel.getAsInt()).isNull(position);
+                        (nullBlock != null && nullBlock.isNull(position));
                 if (shouldReplicate) {
                     for (PageBuilder pageBuilder : pageBuilders) {
                         appendRow(pageBuilder, page, position);
@@ -432,11 +450,13 @@ public class PartitionedOutputOperator
 
                     operatorContext.recordOutput(pagePartition.getSizeInBytes(), pagePartition.getPositionCount());
 
-                    List<SerializedPage> serializedPages = splitPage(pagePartition, DEFAULT_MAX_PAGE_SIZE_IN_BYTES).stream()
-                            .map(serde::serialize)
-                            .collect(toImmutableList());
+                    List<Page> pages = splitPage(pagePartition, DEFAULT_MAX_PAGE_SIZE_IN_BYTES);
+                    com.google.common.collect.ImmutableList.Builder<SerializedPage> serializedPages = com.google.common.collect.ImmutableList.builderWithExpectedSize(pages.size());
+                    for (Page p : pages) {
+                        serializedPages.add(serde.serialize(p));
+                    }
 
-                    outputBuffer.enqueue(operatorContext.getDriverContext().getLifespan(), partition, serializedPages);
+                    outputBuffer.enqueue(operatorContext.getDriverContext().getLifespan(), partition, serializedPages.build());
                     pagesAdded.incrementAndGet();
                     rowsAdded.addAndGet(pagePartition.getPositionCount());
                 }
