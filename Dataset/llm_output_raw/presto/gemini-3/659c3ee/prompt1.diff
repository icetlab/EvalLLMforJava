diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
index 93aeb97e76..7c7e30344d 100644
--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
@@ -184,7 +184,7 @@ public class ByteSelectiveStreamReader
             }
 
             if (presentStream != null && !presentStream.nextBit()) {
-                if ((nonDeterministicFilter && filter.testNull()) || nullsAllowed) {
+                if (nullsAllowed) {
                     if (outputRequired) {
                         nulls[outputPositionCount] = true;
                     }
@@ -344,25 +344,22 @@ public class ByteSelectiveStreamReader
         }
 
         int positionIndex = 0;
+        int outputIndex = 0;
+        while (positionIndex < positionCount) {
             int nextPosition = positions[positionIndex];
-        for (int i = 0; i < outputPositionCount; i++) {
-            if (outputPositions[i] < nextPosition) {
-                continue;
+            while (outputPositions[outputIndex] < nextPosition) {
+                outputIndex++;
             }
 
-            assert outputPositions[i] == nextPosition;
+            assert outputPositions[outputIndex] == nextPosition;
 
-            valuesCopy[positionIndex] = this.values[i];
+            valuesCopy[positionIndex] = this.values[outputIndex];
             if (nullsCopy != null) {
-                nullsCopy[positionIndex] = this.nulls[i];
+                nullsCopy[positionIndex] = this.nulls[outputIndex];
             }
 
             positionIndex++;
-            if (positionIndex >= positionCount) {
-                break;
-            }
-
-            nextPosition = positions[positionIndex];
+            outputIndex++;
         }
 
         return new ByteArrayBlock(positionCount, Optional.ofNullable(nullsCopy), valuesCopy);
@@ -401,26 +398,26 @@ public class ByteSelectiveStreamReader
 
     private void compactValues(int[] positions, int positionCount, boolean compactNulls)
     {
-        int positionIndex = 0;
-        int nextPosition = positions[positionIndex];
-        for (int i = 0; i < outputPositionCount; i++) {
-            if (outputPositions[i] < nextPosition) {
-                continue;
+        int writeIndex = 0;
+        int readIndex = 0;
+        while (writeIndex < positionCount) {
+            int position = positions[writeIndex];
+            while (outputPositions[readIndex] < position) {
+                readIndex++;
             }
 
-            assert outputPositions[i] == nextPosition;
+            assert outputPositions[readIndex] == position;
 
-            values[positionIndex] = values[i];
+            if (readIndex != writeIndex) {
+                values[writeIndex] = values[readIndex];
                 if (compactNulls) {
-                nulls[positionIndex] = nulls[i];
+                    nulls[writeIndex] = nulls[readIndex];
                 }
-            outputPositions[positionIndex] = nextPosition;
-
-            positionIndex++;
-            if (positionIndex >= positionCount) {
-                break;
+                outputPositions[writeIndex] = position;
             }
-            nextPosition = positions[positionIndex];
+
+            readIndex++;
+            writeIndex++;
         }
 
         outputPositionCount = positionCount;
