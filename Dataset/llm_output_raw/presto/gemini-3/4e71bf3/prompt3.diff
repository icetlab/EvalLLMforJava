diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
index da887a9ba3..310a6b8b84 100644
--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
@@ -258,6 +258,26 @@ public class ByteSelectiveStreamReader
     {
         // filter == null implies outputRequired == true
         int streamPosition = 0;
+        if (presentStream == null) {
+            for (int i = 0; i < positionCount; ) {
+                int position = positions[i];
+                if (position > streamPosition) {
+                    skip(position - streamPosition);
+                    streamPosition = position;
+                }
+
+                int start = i;
+                int end = i;
+                while (end + 1 < positionCount && positions[end + 1] == positions[end] + 1) {
+                    end++;
+                }
+                int count = end - start + 1;
+                dataStream.next(values, start, count);
+                streamPosition += count;
+                i = end + 1;
+            }
+        }
+        else {
             for (int i = 0; i < positionCount; i++) {
                 int position = positions[i];
                 if (position > streamPosition) {
@@ -265,17 +285,16 @@ public class ByteSelectiveStreamReader
                     streamPosition = position;
                 }
 
-            if (presentStream != null && !presentStream.nextBit()) {
+                if (!presentStream.nextBit()) {
                     nulls[i] = true;
                 }
                 else {
                     values[i] = dataStream.next();
-                if (presentStream != null) {
                     nulls[i] = false;
                 }
-            }
                 streamPosition++;
             }
+        }
         outputPositionCount = positionCount;
         return streamPosition;
     }
diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/stream/ByteInputStream.java b/presto-orc/src/main/java/com/facebook/presto/orc/stream/ByteInputStream.java
index 21edc123eb..14f1ad2716 100644
--- a/presto-orc/src/main/java/com/facebook/presto/orc/stream/ByteInputStream.java
+++ b/presto-orc/src/main/java/com/facebook/presto/orc/stream/ByteInputStream.java
@@ -119,11 +119,37 @@ public class ByteInputStream
         return buffer[offset++];
     }
 
+    public void next(byte[] data, int offset, int length)
+            throws IOException
+    {
+        int currentOffset = offset;
+        int currentLength = length;
+        while (currentLength > 0) {
+            if (this.offset == this.length) {
+                readNextBlock();
+            }
+            int chunk = Math.min(currentLength, this.length - this.offset);
+            System.arraycopy(buffer, this.offset, data, currentOffset, chunk);
+            this.offset += chunk;
+            currentOffset += chunk;
+            currentLength -= chunk;
+        }
+    }
+
     public void nextVector(Type type, long items, BlockBuilder builder)
             throws IOException
     {
-        for (int i = 0; i < items; i++) {
-            type.writeLong(builder, next());
+        long remaining = items;
+        while (remaining > 0) {
+            if (offset == length) {
+                readNextBlock();
+            }
+            int chunk = (int) Math.min(remaining, length - offset);
+            for (int i = 0; i < chunk; i++) {
+                type.writeLong(builder, buffer[offset + i]);
+            }
+            offset += chunk;
+            remaining -= chunk;
         }
     }
 }
