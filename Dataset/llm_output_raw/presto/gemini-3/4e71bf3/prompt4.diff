diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
index da887a9ba3..8112b232b0 100644
--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
@@ -257,6 +257,18 @@ public class ByteSelectiveStreamReader
             throws IOException
     {
         // filter == null implies outputRequired == true
+
+        // Fast path for contiguous rows without nulls
+        if (presentStream == null && positionCount > 0 && positions[positionCount - 1] - positions[0] == positionCount - 1) {
+            int startPosition = positions[0];
+            if (startPosition > 0) {
+                skip(startPosition);
+            }
+            dataStream.next(values, 0, positionCount);
+            outputPositionCount = positionCount;
+            return startPosition + positionCount;
+        }
+
         int streamPosition = 0;
         for (int i = 0; i < positionCount; i++) {
             int position = positions[i];
diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/stream/ByteInputStream.java b/presto-orc/src/main/java/com/facebook/presto/orc/stream/ByteInputStream.java
index 21edc123eb..9814a494b3 100644
--- a/presto-orc/src/main/java/com/facebook/presto/orc/stream/ByteInputStream.java
+++ b/presto-orc/src/main/java/com/facebook/presto/orc/stream/ByteInputStream.java
@@ -119,6 +119,21 @@ public class ByteInputStream
         return buffer[offset++];
     }
 
+    public void next(byte[] values, int offset, int length)
+            throws IOException
+    {
+        int end = offset + length;
+        while (offset < end) {
+            if (this.offset == this.length) {
+                readNextBlock();
+            }
+            int chunk = Math.min(this.length - this.offset, end - offset);
+            System.arraycopy(this.buffer, this.offset, values, offset, chunk);
+            this.offset += chunk;
+            offset += chunk;
+        }
+    }
+
     public void nextVector(Type type, long items, BlockBuilder builder)
             throws IOException
     {
