The performance of `HashGenerator.getPartition` can be improved by avoiding the expensive modulo operator (`%`). When the `partitionCount` is a power of two, the modulo operation is equivalent to a much faster bitwise AND (`&`) operation.

This change introduces a check for a power-of-two `partitionCount`. If the check passes, it uses the faster bitwise operation. Otherwise, it falls back to the original modulo operation. This preserves the correctness for all inputs, including non-power-of-two, zero, or negative partition counts, while significantly speeding up a common case. The existing `checkState` is kept to maintain functional equivalence for edge cases.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/HashGenerator.java",
    "search": "    default int getPartition(int partitionCount, int position, Page page)\n    {\n        long rawHash = hashPosition(position, page);\n\n        // clear the sign bit\n        rawHash &= 0x7fff_ffff_ffff_ffffL;\n\n        int partition = (int) (rawHash % partitionCount);\n\n        checkState(partition >= 0 && partition < partitionCount);\n        return partition;\n    }",
    "replace": "    default int getPartition(int partitionCount, int position, Page page)\n    {\n        long rawHash = hashPosition(position, page);\n\n        // clear the sign bit\n        rawHash &= 0x7fff_ffff_ffff_ffffL;\n\n        int partition;\n        // A power of 2 partition count allows us to use a bitwise AND instead of the more expensive modulo operator\n        if (partitionCount > 0 && (partitionCount & (partitionCount - 1)) == 0) {\n            partition = (int) (rawHash & (partitionCount - 1));\n        }\n        else {\n            partition = (int) (rawHash % partitionCount);\n        }\n\n        checkState(partition >= 0 && partition < partitionCount);\n        return partition;\n    }"
  }
]
```