diff --git a/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java b/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java
index ce0ca747f2..ffbfeb2afe 100644
--- a/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java
+++ b/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java
@@ -329,6 +329,35 @@ public class TDigest
         mergeNewValues(true, publicCompression);
     }
 
+    private void mergeForQuery()
+    {
+        if (unmergedWeight > 0) {
+            if (totalWeight == 0) {
+                // all points are in the temporary buffer, and no centroids have been formed.
+                // for this case, we can compute the quantile/cdf directly from the raw data
+                // without creating centroids, which is faster for small N.
+                // We do this by treating the unmerged points as centroids without compression.
+                sort(order, tempMean, tempUsed);
+
+                activeCentroids = tempUsed;
+                totalWeight = unmergedWeight;
+
+                // copy sorted temp data to main arrays
+                for (int i = 0; i < tempUsed; i++) {
+                    int ix = order[i];
+                    mean[i] = tempMean[ix];
+                    weight[i] = tempWeight[ix];
+                }
+
+                tempUsed = 0;
+                unmergedWeight = 0;
+            }
+            else {
+                compress();
+            }
+        }
+    }
+
     public double getSize()
     {
         return totalWeight + unmergedWeight;
@@ -336,9 +365,7 @@ public class TDigest
 
     public double getCdf(double x)
     {
-        if (unmergedWeight > 0) {
-            compress();
-        }
+        mergeForQuery();
 
         if (activeCentroids == 0) {
             return Double.NaN;
@@ -461,9 +488,7 @@ public class TDigest
     public double getQuantile(double q)
     {
         checkArgument(q >= 0 && q <= 1, "q should be in [0,1], got %s", q);
-        if (unmergedWeight > 0) {
-            compress();
-        }
+        mergeForQuery();
 
         if (activeCentroids == 0) {
             return Double.NaN;
