diff --git a/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java b/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
index ea2cf982de..8065d00399 100644
--- a/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
+++ b/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
@@ -17,6 +17,7 @@ package com.facebook.presto.common.block;
 import com.facebook.presto.common.GenericInternalException;
 import com.facebook.presto.common.NotSupportedException;
 import com.facebook.presto.common.type.Type;
+import com.facebook.presto.common.block.VariableWidthBlock;
 import io.airlift.slice.Slice;
 import org.openjdk.jol.info.ClassLayout;
 
@@ -344,6 +345,8 @@ public class SingleMapBlock
         int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
         int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
+        Block rawKeyBlock = mapBlock.getRawKeyBlock();
+        boolean isVariableWidthBlock = rawKeyBlock instanceof VariableWidthBlock;
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
             if (keyPosition == -1) {
@@ -351,8 +354,17 @@ public class SingleMapBlock
             }
             Boolean match;
             try {
+                // An optimization to avoid creating a new Slice object when the key is a VariableWidthBlock.
+                if (isVariableWidthBlock) {
+                    VariableWidthBlock keyBlock = (VariableWidthBlock) rawKeyBlock;
+                    int keyPositionInBlock = offset / 2 + keyPosition;
+                    match = (keyBlock.getSliceLength(keyPositionInBlock) == nativeValue.length()) &&
+                            keyBlock.bytesEqual(keyPositionInBlock, 0, nativeValue, 0, nativeValue.length());
+                }
+                else {
                     // assuming maps with indeterminate keys are not supported
-                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), offset / 2 + keyPosition, nativeValue);
+                    match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(rawKeyBlock, offset / 2 + keyPosition, nativeValue);
+                }
             }
             catch (Throwable throwable) {
                 throw handleThrowable(throwable);
