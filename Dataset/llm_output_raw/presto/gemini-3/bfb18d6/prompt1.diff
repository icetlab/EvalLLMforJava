diff --git a/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java b/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java
index cff4f39085..ea2d04c4fb 100644
--- a/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java
+++ b/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java
@@ -222,7 +222,7 @@ public final class GeoFunctions
             double x = slice.readDouble();
             double y = slice.readDouble();
 
-            if (Double.isNaN(x) || Double.isNaN(x)) {
+            if (Double.isNaN(x) || Double.isNaN(y)) {
                 throw new PrestoException(INVALID_FUNCTION_ARGUMENT, format("Invalid input to %s: empty point at index %s", functionName, i + 1));
             }
             if (forbidDuplicates && x == lastX && y == lastY) {
@@ -695,7 +695,7 @@ public final class GeoFunctions
         while (slicesIterator.hasNext()) {
             Slice slice = slicesIterator.next();
             // Ignore null inputs
-            if (slice.getInput().available() == 0) {
+            if (slice.length() == 0) {
                 continue;
             }
 
@@ -901,10 +901,8 @@ public final class GeoFunctions
         }
         else {
             GeometryFactory geometryFactory = geometry.getFactory();
-            Coordinate[] vertices = geometry.getCoordinates();
-            for (Coordinate coordinate : vertices) {
-                GEOMETRY.writeSlice(blockBuilder, serialize(geometryFactory.createPoint(coordinate)));
-            }
+            geometry.apply((Coordinate coordinate) ->
+                    GEOMETRY.writeSlice(blockBuilder, serialize(geometryFactory.createPoint(coordinate))));
         }
     }
 
@@ -1637,15 +1635,12 @@ public final class GeoFunctions
 
     private static Iterable<OGCGeometry> flattenCollection(OGCGeometry geometry)
     {
-        if (geometry == null) {
+        if (geometry == null || geometry.isEmpty()) {
             return ImmutableList.of();
         }
         if (!(geometry instanceof OGCConcreteGeometryCollection)) {
             return ImmutableList.of(geometry);
         }
-        if (((OGCConcreteGeometryCollection) geometry).numGeometries() == 0) {
-            return ImmutableList.of();
-        }
         return () -> new GeometryCollectionIterator(geometry);
     }
 
