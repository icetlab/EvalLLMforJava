diff --git a/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayDistinctFunction.java b/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayDistinctFunction.java
index a25a5916e6..d6227b4ffa 100644
--- a/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayDistinctFunction.java
+++ b/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayDistinctFunction.java
@@ -72,13 +72,26 @@ public final class ArrayDistinctFunction
 
     public static Block distinct(Type type, Block array)
     {
-        if (array.getPositionCount() == 0) {
+        int positionCount = array.getPositionCount();
+        if (positionCount <= 1) {
             return array;
         }
 
-        TypedSet typedSet = new TypedSet(type, array.getPositionCount());
-        BlockBuilder distinctElementBlockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), array.getPositionCount());
-        for (int i = 0; i < array.getPositionCount(); i++) {
+        if (positionCount == 2) {
+            // if the two elements are equal, return a block with the first element
+            if ((array.isNull(0) && array.isNull(1)) ||
+                    (!array.isNull(0) && !array.isNull(1) && type.equalTo(array, 0, array, 1))) {
+                BlockBuilder blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1);
+                type.appendTo(array, 0, blockBuilder);
+                return blockBuilder.build();
+            }
+            // otherwise, the array is distinct
+            return array;
+        }
+
+        TypedSet typedSet = new TypedSet(type, positionCount);
+        BlockBuilder distinctElementBlockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), positionCount);
+        for (int i = 0; i < positionCount; i++) {
             if (!typedSet.contains(array, i)) {
                 typedSet.add(array, i);
                 type.appendTo(array, i, distinctElementBlockBuilder);
