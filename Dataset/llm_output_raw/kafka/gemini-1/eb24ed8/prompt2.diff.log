The performance of Zstd compression is hindered by frequent JNI context switches when handling small, single-byte read/write operations. This is because the underlying `zstd-jni` library streams are not buffered.

To address this, I will wrap the Zstd `InputStream` and `OutputStream` with `BufferedInputStream` and `BufferedOutputStream` respectively. This change introduces a 16KB buffer, which will aggregate small I/O operations into larger chunks before passing them to the native Zstd library. This significantly reduces the number of expensive JNI calls, improving throughput and reducing CPU usage, similar to the existing implementation for GZIP compression.

```json
[
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java",
    "search": "    ZSTD(4, \"zstd\", 1.0f) {\n        @Override\n        public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {\n            try {\n                return (OutputStream) ZstdConstructors.OUTPUT.invoke(buffer);\n            } catch (Throwable e) {\n                throw new KafkaException(e);\n            }\n        }\n\n        @Override\n        public InputStream wrapForInput(ByteBuffer buffer, byte messageVersion, BufferSupplier decompressionBufferSupplier) {\n            try {\n                return (InputStream) ZstdConstructors.INPUT.invoke(new ByteBufferInputStream(buffer));\n            } catch (Throwable e) {\n                throw new KafkaException(e);\n            }\n        }\n    };",
    "replace": "    ZSTD(4, \"zstd\", 1.0f) {\n        @Override\n        public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {\n            try {\n                // Set input buffer (uncompressed) to 16 KB.\n                // zstd-jni creates input and output buffers of ZSTD_CStreamInSize() and ZSTD_CStreamOutSize()\n                // respectively. We want to buffer writes to avoid frequent JNI calls.\n                return new BufferedOutputStream((OutputStream) ZstdConstructors.OUTPUT.invoke(buffer), 16 * 1024);\n            } catch (Throwable e) {\n                throw new KafkaException(e);\n            }\n        }\n\n        @Override\n        public InputStream wrapForInput(ByteBuffer buffer, byte messageVersion, BufferSupplier decompressionBufferSupplier) {\n            try {\n                // Set output buffer (uncompressed) to 16 KB.\n                // zstd-jni creates input and output buffers of ZSTD_DStreamInSize() and ZSTD_DStreamOutSize()\n                // respectively. We want to buffer reads to avoid frequent JNI calls.\n                return new BufferedInputStream((InputStream) ZstdConstructors.INPUT.invoke(new ByteBufferInputStream(buffer)), 16 * 1024);\n            } catch (Throwable e) {\n                throw new KafkaException(e);\n            }\n        }\n    };"
  }
]
```