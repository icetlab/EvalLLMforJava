The current implementation of `ReplaceField` uses `List.contains()` for checking field inclusion and exclusion, which has O(n) complexity. This is inefficient for large lists of fields. This change replaces the `List`s for `include` and `exclude` fields with `Set`s, changing the check to `Set.contains()` with O(1) average time complexity. This significantly improves performance when there are many fields to include or exclude, as demonstrated by the provided benchmark.

```json
[
  {
    "filepath": "../kafka/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/ReplaceField.java",
    "search": "    private List<String> exclude;\n    private List<String> include;\n    private Map<String, String> renames;\n    private Map<String, String> reverseRenames;\n\n    private Cache<Schema, Schema> schemaUpdateCache;\n\n    @Override\n    public void configure(Map<String, ?> configs) {\n        final SimpleConfig config = new SimpleConfig(CONFIG_DEF, ConfigUtils.translateDeprecatedConfigs(configs, new String[][]{\n            {ConfigName.INCLUDE, \"whitelist\"},\n            {ConfigName.EXCLUDE, \"blacklist\"},\n        }));\n\n        exclude = config.getList(ConfigName.EXCLUDE);\n        include = config.getList(ConfigName.INCLUDE);",
    "replace": "    private java.util.Set<String> exclude;\n    private java.util.Set<String> include;\n    private Map<String, String> renames;\n    private Map<String, String> reverseRenames;\n\n    private Cache<Schema, Schema> schemaUpdateCache;\n\n    @Override\n    public void configure(Map<String, ?> configs) {\n        final SimpleConfig config = new SimpleConfig(CONFIG_DEF, ConfigUtils.translateDeprecatedConfigs(configs, new String[][]{\n            {ConfigName.INCLUDE, \"whitelist\"},\n            {ConfigName.EXCLUDE, \"blacklist\"},\n        }));\n\n        exclude = new java.util.HashSet<>(config.getList(ConfigName.EXCLUDE));\n        include = new java.util.HashSet<>(config.getList(ConfigName.INCLUDE));"
  }
]
```