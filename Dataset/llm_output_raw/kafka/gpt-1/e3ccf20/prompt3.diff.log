Iâ€™ve replaced the deprecated `filterKeys` usage on a `Set` with an explicit iterator-based range scan (`iteratorFrom` + `takeWhile`) to filter prefixed ACLs correctly and compile without errors.

```json
[
  {
    "filepath": "../kafka/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala",
    "search": "val prefixed = aclCache\n        .from(new ResourcePattern(resourceType, resourceName, PatternType.PREFIXED))\n        .to(new ResourcePattern(resourceType, resourceName.take(1), PatternType.PREFIXED))\n        .filterKeys(resource => resourceName.startsWith(resource.name))\n        .values\n        .flatMap { _.acls }\n        .toSet",
    "replace": "val prefixed = {\n          // Efficiently collect prefixed ACLs without filterKeys\n          val iter = aclCache.iteratorFrom(new ResourcePattern(resourceType, resourceName, PatternType.PREFIXED))\n          iter.takeWhile { case (pattern, _) =>\n            pattern.resourceType == resourceType && pattern.patternType == PatternType.PREFIXED\n          }\n          .filter { case (pattern, _) => resourceName.startsWith(pattern.name) }\n          .flatMap { case (_, versioned) => versioned.acls }\n          .toSet\n        }"
  }
]
```