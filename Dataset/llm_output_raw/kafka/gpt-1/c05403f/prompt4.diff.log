I have replaced the iterative loops in sizeOfUnsignedVarint and sizeOfVarlong with constant‐time calculations based on bit‐length and ceiling division, preserving exact behavior while improving performance.

```json
[
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/utils/ByteUtils.java",
    "search": "public static int sizeOfUnsignedVarint(int value) {\n    int bytes = 1;\n    while ((value & 0xffffff80) != 0L) {\n        bytes += 1;\n        value >>>= 7;\n    }\n    return bytes;\n}",
    "replace": "public static int sizeOfUnsignedVarint(int value) {\n    // Compute the number of bytes needed to encode value in unsigned varint format\n    int bitLength = 32 - Integer.numberOfLeadingZeros(value);\n    int bytes = (bitLength + 6) / 7;\n    return bytes == 0 ? 1 : bytes;\n}"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/utils/ByteUtils.java",
    "search": "public static int sizeOfVarlong(long value) {\n    long v = (value << 1) ^ (value >> 63);\n    int bytes = 1;\n    while ((v & 0xffffffffffffff80L) != 0L) {\n        bytes += 1;\n        v >>>= 7;\n    }\n    return bytes;\n}",
    "replace": "public static int sizeOfVarlong(long value) {\n    // Compute the number of bytes needed to encode value in varlong (zigzag) format\n    long v = (value << 1) ^ (value >> 63);\n    int bitLength = 64 - Long.numberOfLeadingZeros(v);\n    int bytes = (bitLength + 6) / 7;\n    return bytes == 0 ? 1 : bytes;\n}"
  }
]
```