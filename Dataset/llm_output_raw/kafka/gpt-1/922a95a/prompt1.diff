diff --git a/core/src/main/scala/kafka/cluster/Partition.scala b/core/src/main/scala/kafka/cluster/Partition.scala
index 9cfd99e8e5..10d1cc87ae 100755
--- a/core/src/main/scala/kafka/cluster/Partition.scala
+++ b/core/src/main/scala/kafka/cluster/Partition.scala
@@ -52,9 +52,9 @@ trait PartitionStateStore {
 class ZkPartitionStateStore(topicPartition: TopicPartition,
                             zkClient: KafkaZkClient,
                             replicaManager: ReplicaManager) extends PartitionStateStore {
+  private val adminZkClient = new AdminZkClient(zkClient)
 
   override def fetchTopicConfig(): Properties = {
-    val adminZkClient = new AdminZkClient(zkClient)
     adminZkClient.fetchEntityConfig(ConfigType.Topic, topicPartition.topic)
   }
 
@@ -90,24 +90,24 @@ class DelayedOperations(topicPartition: TopicPartition,
                         produce: DelayedOperationPurgatory[DelayedProduce],
                         fetch: DelayedOperationPurgatory[DelayedFetch],
                         deleteRecords: DelayedOperationPurgatory[DelayedDeleteRecords]) {
+  private val requestKey = TopicPartitionOperationKey(topicPartition)
 
   def checkAndCompleteAll(): Unit = {
-    val requestKey = TopicPartitionOperationKey(topicPartition)
     fetch.checkAndComplete(requestKey)
     produce.checkAndComplete(requestKey)
     deleteRecords.checkAndComplete(requestKey)
   }
 
   def checkAndCompleteFetch(): Unit = {
-    fetch.checkAndComplete(TopicPartitionOperationKey(topicPartition))
+    fetch.checkAndComplete(requestKey)
   }
 
   def checkAndCompleteProduce(): Unit = {
-    produce.checkAndComplete(TopicPartitionOperationKey(topicPartition))
+    produce.checkAndComplete(requestKey)
   }
 
   def checkAndCompleteDeleteRecords(): Unit = {
-    deleteRecords.checkAndComplete(TopicPartitionOperationKey(topicPartition))
+    deleteRecords.checkAndComplete(requestKey)
   }
 
   def numDelayedDelete: Int = deleteRecords.numDelayed
