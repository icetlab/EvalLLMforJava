diff --git a/core/src/main/scala/kafka/log/LogManager.scala b/core/src/main/scala/kafka/log/LogManager.scala
index fc1e7195d7..9dc9edc17c 100755
--- a/core/src/main/scala/kafka/log/LogManager.scala
+++ b/core/src/main/scala/kafka/log/LogManager.scala
@@ -580,7 +580,23 @@ class LogManager(logDirs: Seq[File],
    * to avoid exposing data that have been deleted by DeleteRecordsRequest
    */
   def checkpointLogStartOffsets(): Unit = {
-    liveLogDirs.foreach(checkpointLogStartOffsetsInDir)
+    val byDir = logsByDir
+    liveLogDirs.foreach { dir =>
+      for {
+        partitionToLog <- byDir.get(dir.getAbsolutePath)
+        checkpoint <- logStartOffsetCheckpoints.get(dir)
+      } {
+        try {
+          val logStartOffsets = partitionToLog.collect {
+            case (k, log) if log.logStartOffset > log.logSegments.head.baseOffset => k -> log.logStartOffset
+          }
+          checkpoint.write(logStartOffsets)
+        } catch {
+          case e: IOException =>
+            logDirFailureChannel.maybeAddOfflineLogDir(dir.getAbsolutePath, s"Disk error while writing to logStartOffset file in directory $dir", e)
+        }
+      }
+    }
   }
 
   /**
@@ -1004,8 +1020,14 @@ class LogManager(logDirs: Seq[File],
    * Map of log dir to logs by topic and partitions in that dir
    */
   private def logsByDir: Map[String, Map[TopicPartition, Log]] = {
-    (this.currentLogs.toList ++ this.futureLogs.toList).toMap
-      .groupBy { case (_, log) => log.parentDir }
+    val logsByDir = new mutable.HashMap[String, mutable.Map[TopicPartition, Log]]()
+    def addToMap(tp: TopicPartition, log: Log): Unit = {
+      val dirMap = logsByDir.getOrElseUpdate(log.parentDir, new mutable.HashMap[TopicPartition, Log])
+      dirMap.put(tp, log)
+    }
+    currentLogs.foreachEntry(addToMap)
+    futureLogs.foreachEntry(addToMap)
+    logsByDir.map { case (k, v) => k -> v.toMap }.toMap
   }
 
   // logDir should be an absolute path
diff --git a/core/src/main/scala/kafka/utils/Pool.scala b/core/src/main/scala/kafka/utils/Pool.scala
index 93fd97c9f0..976f167c8a 100644
--- a/core/src/main/scala/kafka/utils/Pool.scala
+++ b/core/src/main/scala/kafka/utils/Pool.scala
@@ -69,6 +69,8 @@ class Pool[K,V](valueFactory: Option[K => V] = None) extends Iterable[(K, V)] {
 
   def remove(key: K, value: V): Boolean = pool.remove(key, value)
 
+  def foreachEntry(action: (K, V) => Unit): Unit = pool.forEach((k, v) => action(k, v))
+
   def keys: Set[K] = pool.keySet.asScala
 
   def values: Iterable[V] = pool.values.asScala
