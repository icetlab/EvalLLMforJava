The current implementation of `removeExpiredProducers` in `ProducerStateManager` is inefficient because it uses streams to collect expired producer IDs and verification state keys into intermediate lists before removing them from the maps. This process involves multiple iterations and unnecessary memory allocation for the lists.

To improve performance, I will refactor the method to use `Map.entrySet().removeIf()`. This approach allows for in-place removal of entries from the maps during a single iteration, eliminating the overhead of creating intermediate collections. This change simplifies the code, reduces memory pressure, and improves the overall efficiency of expiring producers. The logic for updating the volatile `producerIdCount` is preserved to maintain correctness.

```json
[
  {
    "filepath": "../kafka/storage/src/main/java/org/apache/kafka/storage/internals/log/ProducerStateManager.java",
    "search": "    public void removeExpiredProducers(long currentTimeMs) {\n        List<Long> keys = producers.entrySet().stream()\n                .filter(entry -> isProducerExpired(currentTimeMs, entry.getValue()))\n                .map(Map.Entry::getKey)\n                .collect(Collectors.toList());\n        removeProducerIds(keys);\n\n        List<Long> verificationKeys = verificationStates.entrySet().stream()\n                .filter(entry -> currentTimeMs - entry.getValue().timestamp() >= producerStateManagerConfig.producerIdExpirationMs())\n                .map(Map.Entry::getKey)\n                .collect(Collectors.toList());\n        verificationKeys.forEach(verificationStates::remove);\n    }",
    "replace": "    public void removeExpiredProducers(long currentTimeMs) {\n        producers.entrySet().removeIf(entry -> isProducerExpired(currentTimeMs, entry.getValue()));\n        producerIdCount = producers.size();\n\n        verificationStates.entrySet().removeIf(entry -> currentTimeMs - entry.getValue().timestamp() >= producerStateManagerConfig.producerIdExpirationMs());\n    }"
  }
]
```