diff --git a/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala b/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
index 86f06981ff..91c8093352 100644
--- a/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
+++ b/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
@@ -293,14 +293,6 @@ class AclAuthorizer extends Authorizer with Logging {
     val host = requestContext.clientAddress.getHostAddress
     val operation = action.operation
 
-    def isEmptyAclAndAuthorized(acls: Set[AclEntry]): Boolean = {
-      if (acls.isEmpty) {
-        // No ACLs found for this resource, permission is determined by value of config allow.everyone.if.no.acl.found
-        authorizerLogger.debug(s"No acl found for resource $resource, authorized = $shouldAllowEveryoneIfNoAclIsFound")
-        shouldAllowEveryoneIfNoAclIsFound
-      } else false
-    }
-
     def denyAclExists(acls: Set[AclEntry]): Boolean = {
       // Check if there are any Deny ACLs which would forbid this operation.
       matchingAclExists(operation, resource, principal, host, DENY, acls)
@@ -318,29 +310,13 @@ class AclAuthorizer extends Authorizer with Logging {
       allowOps.exists(operation => matchingAclExists(operation, resource, principal, host, ALLOW, acls))
     }
 
-    def aclsAllowAccess = {
+    def aclsAllowAccess: Boolean = {
       //we allow an operation if no acls are found and user has configured to allow all users
       //when no acls are found or if no deny acls are found and at least one allow acls matches.
-      val acls = matchingAcls(resource.resourceType, resource.name)
-      isEmptyAclAndAuthorized(acls) || (!denyAclExists(acls) && allowAclExists(acls))
-    }
-
-    // Evaluate if operation is allowed
-    val authorized = isSuperUser(principal) || aclsAllowAccess
-
-    logAuditMessage(requestContext, action, authorized)
-    if (authorized) AuthorizationResult.ALLOWED else AuthorizationResult.DENIED
-  }
-
-  def isSuperUser(principal: KafkaPrincipal): Boolean = {
-    if (superUsers.contains(principal)) {
-      authorizerLogger.debug(s"principal = $principal is a super user, allowing operation without checking acls.")
-      true
-    } else false
-  }
+      val resourceType = resource.resourceType
+      val resourceName = resource.name
 
-  private def matchingAcls(resourceType: ResourceType, resourceName: String): Set[AclEntry] = {
-    inReadLock(lock) {
+      val (wildcardAcls, prefixedAcls, literalAcls) = inReadLock(lock) {
         val wildcard = aclCache.get(new ResourcePattern(resourceType, ResourcePattern.WILDCARD_RESOURCE, PatternType.LITERAL))
           .map(_.acls)
           .getOrElse(Set.empty)
@@ -357,10 +333,41 @@ class AclAuthorizer extends Authorizer with Logging {
           .flatMap { _.acls }
           .toSet
 
-      prefixed ++ wildcard ++ literal
+        (wildcard, prefixed, literal)
+      }
+
+      if (wildcardAcls.isEmpty && prefixedAcls.isEmpty && literalAcls.isEmpty) {
+        authorizerLogger.debug(s"No acl found for resource $resource, authorized = $shouldAllowEveryoneIfNoAclIsFound")
+        shouldAllowEveryoneIfNoAclIsFound
+      } else {
+        // Check if there are any Deny ACLs which would forbid this operation.
+        val deny = denyAclExists(literalAcls) || denyAclExists(prefixedAcls) || denyAclExists(wildcardAcls)
+
+        if (deny) {
+          false
+        } else {
+          // Check if there are any Allow ACLs which would allow this operation.
+          allowAclExists(literalAcls) || allowAclExists(prefixedAcls) || allowAclExists(wildcardAcls)
+        }
+      }
+    }
+
+    // Evaluate if operation is allowed
+    val authorized = isSuperUser(principal) || aclsAllowAccess
+
+    logAuditMessage(requestContext, action, authorized)
+    if (authorized) AuthorizationResult.ALLOWED else AuthorizationResult.DENIED
   }
+
+  def isSuperUser(principal: KafkaPrincipal): Boolean = {
+    if (superUsers.contains(principal)) {
+      authorizerLogger.debug(s"principal = $principal is a super user, allowing operation without checking acls.")
+      true
+    } else false
   }
 
+
+
   private def matchingAclExists(operation: AclOperation,
                                 resource: ResourcePattern,
                                 principal: KafkaPrincipal,
