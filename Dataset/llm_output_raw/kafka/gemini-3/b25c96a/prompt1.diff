diff --git a/storage/src/main/java/org/apache/kafka/storage/internals/log/ProducerStateManager.java b/storage/src/main/java/org/apache/kafka/storage/internals/log/ProducerStateManager.java
index 6bcafd2d60..7cbb957f5b 100644
--- a/storage/src/main/java/org/apache/kafka/storage/internals/log/ProducerStateManager.java
+++ b/storage/src/main/java/org/apache/kafka/storage/internals/log/ProducerStateManager.java
@@ -233,7 +233,7 @@ public class ProducerStateManager {
      * largest stray snapshot file which was emitted during clean shutdown.
      */
     public void removeStraySnapshots(Collection<Long> segmentBaseOffsets) throws IOException {
-        OptionalLong maxSegmentBaseOffset = segmentBaseOffsets.isEmpty() ? OptionalLong.empty() : OptionalLong.of(segmentBaseOffsets.stream().max(Long::compare).get());
+        OptionalLong maxSegmentBaseOffset = segmentBaseOffsets.isEmpty() ? OptionalLong.empty() : OptionalLong.of(Collections.max(segmentBaseOffsets));
 
         HashSet<Long> baseOffsets = new HashSet<>(segmentBaseOffsets);
         Optional<SnapshotFile> latestStraySnapshot = Optional.empty();
@@ -334,8 +334,11 @@ public class ProducerStateManager {
                 SnapshotFile snapshot = latestSnapshotFileOptional.get();
                 try {
                     log.info("Loading producer state from snapshot file '{}'", snapshot);
-                    Stream<ProducerStateEntry> loadedProducers = readSnapshot(snapshot.file()).stream().filter(producerEntry -> !isProducerExpired(currentTime, producerEntry));
-                    loadedProducers.forEach(this::loadProducerEntry);
+                    for (ProducerStateEntry producerEntry : readSnapshot(snapshot.file())) {
+                        if (!isProducerExpired(currentTime, producerEntry)) {
+                            loadProducerEntry(producerEntry);
+                        }
+                    }
                     lastSnapOffset = snapshot.offset;
                     lastMapOffset = lastSnapOffset;
                     updateOldestTxnTimestamp();
@@ -369,17 +372,12 @@ public class ProducerStateManager {
      * Also expire any verification state entries that are lingering as unverified.
      */
     public void removeExpiredProducers(long currentTimeMs) {
-        List<Long> keys = producers.entrySet().stream()
-                .filter(entry -> isProducerExpired(currentTimeMs, entry.getValue()))
-                .map(Map.Entry::getKey)
-                .collect(Collectors.toList());
-        removeProducerIds(keys);
-
-        List<Long> verificationKeys = verificationStates.entrySet().stream()
-                .filter(entry -> currentTimeMs - entry.getValue().timestamp() >= producerStateManagerConfig.producerIdExpirationMs())
-                .map(Map.Entry::getKey)
-                .collect(Collectors.toList());
-        verificationKeys.forEach(verificationStates::remove);
+        if (producers.entrySet().removeIf(entry -> isProducerExpired(currentTimeMs, entry.getValue()))) {
+            producerIdCount = producers.size();
+        }
+
+        verificationStates.entrySet().removeIf(entry ->
+                currentTimeMs - entry.getValue().timestamp() >= producerStateManagerConfig.producerIdExpirationMs());
     }
 
     /**
