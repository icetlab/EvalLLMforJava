My change addresses the performance issue of `zstd-jni`'s unbuffered reads and writes, which cause excessive JNI overhead with small data chunks. To improve this, I am wrapping the Zstd `InputStream` and `OutputStream` with `BufferedInputStream` and `BufferedOutputStream` respectively, using a 16KB buffer size. This approach is consistent with the existing implementation for GZIP compression and will batch small I/O operations into larger, more efficient chunks, thereby reducing the number of expensive JNI calls and improving overall performance.

```json
[
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java",
    "search": "    ZSTD(4, \"zstd\", 1.0f) {\n        @Override\n        public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {\n            try {\n                return (OutputStream) ZstdConstructors.OUTPUT.invoke(buffer);\n            } catch (Throwable e) {\n                throw new KafkaException(e);\n            }\n        }\n\n        @Override\n        public InputStream wrapForInput(ByteBuffer buffer, byte messageVersion, BufferSupplier decompressionBufferSupplier) {\n            try {\n                return (InputStream) ZstdConstructors.INPUT.invoke(new ByteBufferInputStream(buffer));\n            } catch (Throwable e) {\n                throw new KafkaException(e);\n            }\n        }\n    };",
    "replace": "    ZSTD(4, \"zstd\", 1.0f) {\n        @Override\n        public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {\n            try {\n                // Set input buffer (uncompressed) to 16 KB (none by default) to ensure reasonable performance in\n                // cases where the caller passes a small number of bytes to write (potentially a single byte).\n                return new BufferedOutputStream((OutputStream) ZstdConstructors.OUTPUT.invoke(buffer), 16 * 1024);\n            } catch (Throwable e) {\n                throw new KafkaException(e);\n            }\n        }\n\n        @Override\n        public InputStream wrapForInput(ByteBuffer buffer, byte messageVersion, BufferSupplier decompressionBufferSupplier) {\n            try {\n                // Set output buffer (uncompressed) to 16 KB (none by default) to ensure reasonable performance in\n                // cases where the caller reads a small number of bytes (potentially a single byte).\n                return new BufferedInputStream(\n                        (InputStream) ZstdConstructors.INPUT.invoke(new ByteBufferInputStream(buffer)),\n                        16 * 1024);\n            } catch (Throwable e) {\n                throw new KafkaException(e);\n            }\n        }\n    };"
  }
]
```