This is an improvement to optimize the static factory methods `forId` and `forName` in the `CompressionType` enum.
The `forId` method is changed from a `switch` statement to a more performant array-based lookup. This is achieved by pre-calculating a lookup table in a static initializer block, which allows for O(1) retrieval of `CompressionType` by its ID.
The `forName` method is changed from an `if-else-if` chain of string comparisons to a `switch` statement on the string. This is generally more efficient as the JVM can optimize it to a lookup based on hash codes, and it also improves code readability.

```json
[
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java",
    "search": "public static CompressionType forId(int id) {\n        switch (id) {\n            case 0:\n                return NONE;\n            case 1:\n                return GZIP;\n            case 2:\n                return SNAPPY;\n            case 3:\n                return LZ4;\n            case 4:\n                return ZSTD;\n            default:\n                throw new IllegalArgumentException(\"Unknown compression type id: \" + id);\n        }\n    }",
    "replace": "private static final CompressionType[] ID_TO_TYPE;\n\n    static {\n        CompressionType[] allTypes = values();\n        int maxId = -1;\n        for (CompressionType type : allTypes) {\n            maxId = Math.max(maxId, type.id);\n        }\n        ID_TO_TYPE = new CompressionType[maxId + 1];\n        for (CompressionType type : allTypes) {\n            ID_TO_TYPE[type.id] = type;\n        }\n    }\n\n    public static CompressionType forId(int id) {\n        if (id < 0 || id >= ID_TO_TYPE.length || ID_TO_TYPE[id] == null)\n            throw new IllegalArgumentException(\"Unknown compression type id: \" + id);\n        return ID_TO_TYPE[id];\n    }"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java",
    "search": "public static CompressionType forName(String name) {\n        if (NONE.name.equals(name))\n            return NONE;\n        else if (GZIP.name.equals(name))\n            return GZIP;\n        else if (SNAPPY.name.equals(name))\n            return SNAPPY;\n        else if (LZ4.name.equals(name))\n            return LZ4;\n        else if (ZSTD.name.equals(name))\n            return ZSTD;\n        else\n            throw new IllegalArgumentException(\"Unknown compression name: \" + name);\n    }",
    "replace": "public static CompressionType forName(String name) {\n        switch (name) {\n            case \"none\":\n                return NONE;\n            case \"gzip\":\n                return GZIP;\n            case \"snappy\":\n                return SNAPPY;\n            case \"lz4\":\n                return LZ4;\n            case \"zstd\":\n                return ZSTD;\n            default:\n                throw new IllegalArgumentException(\"Unknown compression name: \" + name);\n        }\n    }"
  }
]
```