diff --git a/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala b/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
index 86f06981ff..ab0531cd8e 100644
--- a/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
+++ b/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
@@ -260,6 +260,16 @@ class AclAuthorizer extends Authorizer with Logging {
 
   override def acls(filter: AclBindingFilter): lang.Iterable[AclBinding] = {
     inReadLock(lock) {
+      if (filter == AclBindingFilter.ANY) {
+        val size = aclCache.values.iterator.map(_.acls.size).sum
+        val aclBindings = new util.ArrayList[AclBinding](size)
+        aclCache.foreach { case (resource, versionedAcls) =>
+          versionedAcls.acls.foreach { acl =>
+            aclBindings.add(new AclBinding(resource, acl.ace))
+          }
+        }
+        aclBindings
+      } else {
         val aclBindings = new util.ArrayList[AclBinding]()
         unorderedAcls.foreach { case (resource, versionedAcls) =>
           versionedAcls.acls.foreach { acl =>
@@ -271,6 +281,7 @@ class AclAuthorizer extends Authorizer with Logging {
         aclBindings
       }
     }
+  }
 
   override def close(): Unit = {
     aclChangeListeners.foreach(listener => listener.close())
@@ -349,12 +360,9 @@ class AclAuthorizer extends Authorizer with Logging {
         .map(_.acls)
         .getOrElse(Set.empty)
 
-      val prefixed = aclCache
-        .from(new ResourcePattern(resourceType, resourceName, PatternType.PREFIXED))
-        .to(new ResourcePattern(resourceType, resourceName.take(1), PatternType.PREFIXED))
-        .filterKeys(resource => resourceName.startsWith(resource.name))
-        .values
-        .flatMap { _.acls }
+      val prefixed = resourceName.inits.filter(_.nonEmpty)
+        .flatMap(prefix => aclCache.get(new ResourcePattern(resourceType, prefix, PatternType.PREFIXED)))
+        .flatMap(_.acls)
         .toSet
 
       prefixed ++ wildcard ++ literal
