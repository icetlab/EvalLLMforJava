This response improves the performance of `ByteUtils.java` by replacing loop-based implementations for varint size calculation with more efficient, branch-based logic. This avoids loop overhead and leverages better branch prediction. Additionally, a minor optimization is made to the `readUnsignedIntLE` method by removing a redundant bitwise operation. These changes are based on well-known optimizations found in libraries like Google's Protocol Buffers.

```json
[
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/utils/ByteUtils.java",
    "search": "    public static int readUnsignedIntLE(byte[] buffer, int offset) {\n        return (buffer[offset] << 0 & 0xff)\n                | ((buffer[offset + 1] & 0xff) << 8)\n                | ((buffer[offset + 2] & 0xff) << 16)\n                | ((buffer[offset + 3] & 0xff) << 24);\n    }",
    "replace": "    public static int readUnsignedIntLE(byte[] buffer, int offset) {\n        return (buffer[offset] & 0xff)\n                | ((buffer[offset + 1] & 0xff) << 8)\n                | ((buffer[offset + 2] & 0xff) << 16)\n                | ((buffer[offset + 3] & 0xff) << 24);\n    }"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/utils/ByteUtils.java",
    "search": "    public static int sizeOfUnsignedVarint(int value) {\n        int bytes = 1;\n        while ((value & 0xffffff80) != 0L) {\n            bytes += 1;\n            value >>>= 7;\n        }\n        return bytes;\n    }",
    "replace": "    public static int sizeOfUnsignedVarint(int value) {\n        if ((value & ~0x7F) == 0) {\n            return 1;\n        } else if ((value & ~0x3FFF) == 0) {\n            return 2;\n        } else if ((value & ~0x1FFFFF) == 0) {\n            return 3;\n        } else if ((value & ~0xFFFFFFF) == 0) {\n            return 4;\n        } else {\n            return 5;\n        }\n    }"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/utils/ByteUtils.java",
    "search": "    public static int sizeOfVarlong(long value) {\n        long v = (value << 1) ^ (value >> 63);\n        int bytes = 1;\n        while ((v & 0xffffffffffffff80L) != 0L) {\n            bytes += 1;\n            v >>>= 7;\n        }\n        return bytes;\n    }",
    "replace": "    public static int sizeOfVarlong(long value) {\n        long v = (value << 1) ^ (value >> 63);\n        if ((v & ~0x7FL) == 0L) {\n            return 1;\n        }\n        if (v < 0L) {\n            return 10;\n        }\n        int bytes = 2;\n        if ((v & (~0L << 35)) != 0L) {\n            bytes += 4;\n            v >>>= 28;\n        }\n        if ((v & (~0L << 21)) != 0L) {\n            bytes += 2;\n            v >>>= 14;\n        }\n        if ((v & (~0L << 14)) != 0L) {\n            bytes += 1;\n        }\n        return bytes;\n    }"
  }
]
```