The changes below optimize the non-array ByteBuffer path by copying the needed slice into a temporary byte[] and doing a bulk update, which avoids per-byte checksum calls, and similarly batch the 4 or 8 individual byte updates into a single array update in updateInt/updateLong.

```json
[
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java",
    "search": "} else {\n            int start = buffer.position() + offset;\n            for (int i = start; i < start + length; i++)\n                checksum.update(buffer.get(i));\n        }",
    "replace": "} else {\n            int start = buffer.position() + offset;\n            // bulk copy into byte[] to avoid per-byte checksum calls\n            ByteBuffer duplicate = buffer.duplicate();\n            duplicate.position(start);\n            duplicate.limit(start + length);\n            ByteBuffer slice = duplicate.slice();\n            byte[] tmp = new byte[length];\n            slice.get(tmp);\n            checksum.update(tmp, 0, length);\n        }"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java",
    "search": "public static void updateInt(Checksum checksum, int input) {\n        checksum.update((byte) (input >> 24));\n        checksum.update((byte) (input >> 16));\n        checksum.update((byte) (input >> 8));\n        checksum.update((byte) input /* >> 0 */);\n    }",
    "replace": "public static void updateInt(Checksum checksum, int input) {\n        // batch the four bytes into one array update\n        byte[] bytes = new byte[] {\n            (byte) (input >> 24),\n            (byte) (input >> 16),\n            (byte) (input >> 8),\n            (byte) input\n        };\n        checksum.update(bytes, 0, bytes.length);\n    }"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java",
    "search": "public static void updateLong(Checksum checksum, long input) {\n        checksum.update((byte) (input >> 56));\n        checksum.update((byte) (input >> 48));\n        checksum.update((byte) (input >> 40));\n        checksum.update((byte) (input >> 32));\n        checksum.update((byte) (input >> 24));\n        checksum.update((byte) (input >> 16));\n        checksum.update((byte) (input >> 8));\n        checksum.update((byte) input /* >> 0 */);\n    }",
    "replace": "public static void updateLong(Checksum checksum, long input) {\n        // batch the eight bytes into one array update\n        byte[] bytes = new byte[] {\n            (byte) (input >> 56),\n            (byte) (input >> 48),\n            (byte) (input >> 40),\n            (byte) (input >> 32),\n            (byte) (input >> 24),\n            (byte) (input >> 16),\n            (byte) (input >> 8),\n            (byte) input\n        };\n        checksum.update(bytes, 0, bytes.length);\n    }"
  }
]
```