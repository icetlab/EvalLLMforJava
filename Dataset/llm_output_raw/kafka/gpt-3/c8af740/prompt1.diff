diff --git a/storage/src/main/java/org/apache/kafka/storage/internals/log/ProducerStateManager.java b/storage/src/main/java/org/apache/kafka/storage/internals/log/ProducerStateManager.java
index da56ddaccc..f669d4d916 100644
--- a/storage/src/main/java/org/apache/kafka/storage/internals/log/ProducerStateManager.java
+++ b/storage/src/main/java/org/apache/kafka/storage/internals/log/ProducerStateManager.java
@@ -172,13 +172,19 @@ public class ProducerStateManager {
     }
 
     private void addProducerId(long producerId, ProducerStateEntry entry) {
-        producers.put(producerId, entry);
-        producerIdCount = producers.size();
+        // Only increment count if this is a new producer ID
+        if (producers.put(producerId, entry) == null) {
+            producerIdCount++;
+        }
     }
 
     private void removeProducerIds(List<Long> keys) {
-        keys.forEach(producers::remove);
-        producerIdCount = producers.size();
+        // Remove each ID and decrement count for each removed entry
+        for (Long key : keys) {
+            if (producers.remove(key) != null) {
+                producerIdCount--;
+            }
+        }
     }
 
     private void clearProducerIds() {
@@ -369,17 +375,25 @@ public class ProducerStateManager {
      * Also expire any verification state entries that are lingering as unverified.
      */
     public void removeExpiredProducers(long currentTimeMs) {
-        List<Long> keys = producers.entrySet().stream()
-                .filter(entry -> isProducerExpired(currentTimeMs, entry.getValue()))
-                .map(Map.Entry::getKey)
-                .collect(Collectors.toList());
-        removeProducerIds(keys);
-
-        List<Long> verificationKeys = verificationStates.entrySet().stream()
-                .filter(entry -> currentTimeMs - entry.getValue().timestamp() >= producerStateManagerConfig.producerIdExpirationMs())
-                .map(Map.Entry::getKey)
-                .collect(Collectors.toList());
-        verificationKeys.forEach(verificationStates::remove);
+        // Remove expired producer IDs directly via iterator to avoid temporary collections
+        Iterator<Map.Entry<Long, ProducerStateEntry>> it = producers.entrySet().iterator();
+        while (it.hasNext()) {
+            Map.Entry<Long, ProducerStateEntry> entry = it.next();
+            if (isProducerExpired(currentTimeMs, entry.getValue())) {
+                it.remove();
+            }
+        }
+        producerIdCount = producers.size();
+
+        // Remove expired verification entries directly via iterator
+        long expirationMs = producerStateManagerConfig.producerIdExpirationMs();
+        Iterator<Map.Entry<Long, VerificationStateEntry>> vit = verificationStates.entrySet().iterator();
+        while (vit.hasNext()) {
+            Map.Entry<Long, VerificationStateEntry> entry = vit.next();
+            if (currentTimeMs - entry.getValue().timestamp() >= expirationMs) {
+                vit.remove();
+            }
+        }
     }
 
     /**
