diff --git a/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala b/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
index 5f2be90535..c941597a76 100644
--- a/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
+++ b/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
@@ -70,6 +70,9 @@ object AclAuthorizer {
 
   val NoAcls = VersionedAcls(Set.empty, ZkVersion.UnknownVersion)
   val WildcardHost = "*"
+  // Precomputed operation sets to avoid reallocating in hot path
+  val describeAllowOps: Set[AclOperation] = Set(DESCRIBE, READ, WRITE, DELETE, ALTER)
+  val describeConfigsAllowOps: Set[AclOperation] = Set(DESCRIBE_CONFIGS, ALTER_CONFIGS)
 
   // Orders by resource type, then resource pattern type and finally reverse ordering by name.
   class ResourceOrdering extends Ordering[ResourcePattern] {
@@ -311,16 +314,13 @@ class AclAuthorizer extends Authorizer with Logging {
       matchingAclExists(operation, resource, principal, host, DENY, acls)
     }
 
-    def allowAclExists(acls: AclSeqs): Boolean = {
-      // Check if there are any Allow ACLs which would allow this operation.
-      // Allowing read, write, delete, or alter implies allowing describe.
-      // See #{org.apache.kafka.common.acl.AclOperation} for more details about ACL inheritance.
-      val allowOps = operation match {
-        case DESCRIBE => Set[AclOperation](DESCRIBE, READ, WRITE, DELETE, ALTER)
-        case DESCRIBE_CONFIGS => Set[AclOperation](DESCRIBE_CONFIGS, ALTER_CONFIGS)
-        case _ => Set[AclOperation](operation)
-      }
-      allowOps.exists(operation => matchingAclExists(operation, resource, principal, host, ALLOW, acls))
+    def allowAclExists(acls: AclSeqs): Boolean = operation match {
+      case DESCRIBE =>
+        AclAuthorizer.describeAllowOps.exists(op => matchingAclExists(op, resource, principal, host, ALLOW, acls))
+      case DESCRIBE_CONFIGS =>
+        AclAuthorizer.describeConfigsAllowOps.exists(op => matchingAclExists(op, resource, principal, host, ALLOW, acls))
+      case op =>
+        matchingAclExists(op, resource, principal, host, ALLOW, acls)
     }
 
     def aclsAllowAccess = {
