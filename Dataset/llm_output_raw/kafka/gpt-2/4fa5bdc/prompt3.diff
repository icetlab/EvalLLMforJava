diff --git a/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala b/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
index 58860be864..6467af8904 100644
--- a/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
+++ b/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
@@ -344,22 +344,19 @@ class AclAuthorizer extends Authorizer with Logging {
   private def matchingAcls(resourceType: ResourceType, resourceName: String): AclSets = {
     // save aclCache reference to a local val to get a consistent view of the cache during acl updates.
     val aclCacheSnapshot = aclCache
-    val wildcard = aclCacheSnapshot.get(new ResourcePattern(resourceType, ResourcePattern.WILDCARD_RESOURCE, PatternType.LITERAL))
-      .map(_.acls)
-      .getOrElse(Set.empty)
-
-    val literal = aclCacheSnapshot.get(new ResourcePattern(resourceType, resourceName, PatternType.LITERAL))
-      .map(_.acls)
-      .getOrElse(Set.empty)
-
-    val prefixed = aclCacheSnapshot
-      .from(new ResourcePattern(resourceType, resourceName, PatternType.PREFIXED))
-      .to(new ResourcePattern(resourceType, resourceName.take(1), PatternType.PREFIXED))
-      .filterKeys(resource => resourceName.startsWith(resource.name))
-      .values
-      .flatMap { _.acls }
+    val wildcardPattern = new ResourcePattern(resourceType, ResourcePattern.WILDCARD_RESOURCE, PatternType.LITERAL)
+    val literalPattern = new ResourcePattern(resourceType, resourceName, PatternType.LITERAL)
+    val wildcard = aclCacheSnapshot.get(wildcardPattern).map(_.acls).getOrElse(Set.empty)
+    val literal = aclCacheSnapshot.get(literalPattern).map(_.acls).getOrElse(Set.empty)
+    val prefixedStart = new ResourcePattern(resourceType, resourceName, PatternType.PREFIXED)
+    val prefixed = aclCacheSnapshot.iteratorFrom(prefixedStart)
+      .takeWhile { case (pattern, _) =>
+        pattern.resourceType == resourceType &&
+        pattern.patternType == PatternType.PREFIXED &&
+        resourceName.startsWith(pattern.name)
+      }
+      .flatMap(_._2.acls)
       .toSet
-
     new AclSets(prefixed, wildcard, literal)
   }
 
