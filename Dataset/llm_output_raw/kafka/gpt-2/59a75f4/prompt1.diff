diff --git a/clients/src/main/java/org/apache/kafka/common/internals/PartitionStates.java b/clients/src/main/java/org/apache/kafka/common/internals/PartitionStates.java
index c289eaa59b..490cd84eb2 100644
--- a/clients/src/main/java/org/apache/kafka/common/internals/PartitionStates.java
+++ b/clients/src/main/java/org/apache/kafka/common/internals/PartitionStates.java
@@ -139,15 +139,16 @@ public class PartitionStates<S> {
     }
 
     private void update(Map<TopicPartition, S> partitionToState) {
-        LinkedHashMap<String, List<TopicPartition>> topicToPartitions = new LinkedHashMap<>();
-        for (TopicPartition tp : partitionToState.keySet()) {
-            List<TopicPartition> partitions = topicToPartitions.computeIfAbsent(tp.topic(), k -> new ArrayList<>());
-            partitions.add(tp);
-        }
-        for (Map.Entry<String, List<TopicPartition>> entry : topicToPartitions.entrySet()) {
-            for (TopicPartition tp : entry.getValue()) {
-                S state = partitionToState.get(tp);
-                map.put(tp, state);
+        // Group entries by topic to minimize redundant lookups and preserve insertion order
+        LinkedHashMap<String, List<Map.Entry<TopicPartition, S>>> topicToEntries = new LinkedHashMap<>();
+        for (Map.Entry<TopicPartition, S> entry : partitionToState.entrySet()) {
+            List<Map.Entry<TopicPartition, S>> list = topicToEntries.computeIfAbsent(
+                    entry.getKey().topic(), k -> new ArrayList<>());
+            list.add(entry);
+        }
+        for (List<Map.Entry<TopicPartition, S>> entries : topicToEntries.values()) {
+            for (Map.Entry<TopicPartition, S> entry : entries) {
+                map.put(entry.getKey(), entry.getValue());
             }
         }
     }
