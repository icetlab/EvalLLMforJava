diff --git a/core/src/main/scala/kafka/server/AbstractFetcherThread.scala b/core/src/main/scala/kafka/server/AbstractFetcherThread.scala
index 0f3b06952a..f065aeea55 100755
--- a/core/src/main/scala/kafka/server/AbstractFetcherThread.scala
+++ b/core/src/main/scala/kafka/server/AbstractFetcherThread.scala
@@ -435,10 +435,17 @@ abstract class AbstractFetcherThread(name: String,
     * @param fetchOffsets the partitions to update fetch offset and maybe mark truncation complete
     */
   private def updateFetchOffsetAndMaybeMarkTruncationComplete(fetchOffsets: Map[TopicPartition, OffsetTruncationState]): Unit = {
-    val newStates: Map[TopicPartition, PartitionFetchState] = partitionStates.partitionStates.asScala
-      .map { state =>
-        val currentFetchState = state.value
-        val maybeTruncationComplete = fetchOffsets.get(state.topicPartition) match {
+    val newStates: Map[TopicPartition, PartitionFetchState] =
+        partitionStates.partitionStateMap.asScala.map { case (tp, currentFetchState) =>
+          val newState = fetchOffsets.get(tp) match {
+            case Some(offsetTruncationState) =>
+              val s = if (offsetTruncationState.truncationCompleted) Fetching else Truncating
+              PartitionFetchState(offsetTruncationState.offset, currentFetchState.lag,
+                currentFetchState.currentLeaderEpoch, currentFetchState.delay, s)
+            case None => currentFetchState
+          }
+          tp -> newState
+        }.toMap
           case Some(offsetTruncationState) =>
             val state = if (offsetTruncationState.truncationCompleted) Fetching else Truncating
             PartitionFetchState(offsetTruncationState.offset, currentFetchState.lag,
@@ -648,7 +655,7 @@ abstract class AbstractFetcherThread(name: String,
   }
 
   private[server] def partitionsAndOffsets: Map[TopicPartition, InitialFetchState] = inLock(partitionMapLock) {
-    partitionStates.partitionStates.asScala.map { state =>
+    partitionStates.partitionStateMap.asScala.map { case (tp, currentFetchState) =>
       val initialFetchState = InitialFetchState(sourceBroker,
         currentLeaderEpoch = state.value.currentLeaderEpoch,
         initOffset = state.value.fetchOffset)
