I have introduced a static lookup map for compression type names to replace the chain of string comparisons in `forName`, and added the necessary imports and map initialization. This should reduce the overhead of repeatedly comparing strings.

```json
[
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java",
    "search": "import java.util.zip.GZIPOutputStream;",
    "replace": "import java.util.zip.GZIPOutputStream;\nimport java.util.Map;\nimport java.util.HashMap;"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java",
    "search": "public final int id;",
    "replace": "private static final Map<String, CompressionType> NAME_TO_TYPE = new HashMap<>();\n\n    static {\n        for (CompressionType type : values()) {\n            NAME_TO_TYPE.put(type.name, type);\n        }\n    }\n\n    public final int id;"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java",
    "search": "public static CompressionType forName(String name) {\n        if (NONE.name.equals(name))\n            return NONE;\n        else if (GZIP.name.equals(name))\n            return GZIP;\n        else if (SNAPPY.name.equals(name))\n            return SNAPPY;\n        else if (LZ4.name.equals(name))\n            return LZ4;\n        else if (ZSTD.name.equals(name))\n            return ZSTD;\n        else\n            throw new IllegalArgumentException(\"Unknown compression name: \" + name);\n    }",
    "replace": "public static CompressionType forName(String name) {\n        CompressionType type = NAME_TO_TYPE.get(name);\n        if (type != null)\n            return type;\n        throw new IllegalArgumentException(\"Unknown compression name: \" + name);\n    }"
  }
]
```