I’m replacing the linear `switch` and chained `if`/`else` lookups in `forId` and `forName` with constant-time array and map lookups. To support this, I’ve added the necessary imports, static fields, and initialization block.

```json
[
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java",
    "search": "import java.nio.ByteBuffer;",
    "replace": "import java.nio.ByteBuffer;\nimport java.util.Map;\nimport java.util.HashMap;"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java",
    "search": "public final float rate;",
    "replace": "public final float rate;\n\n    private static final CompressionType[] ID_TO_TYPE;\n    private static final Map<String, CompressionType> NAME_MAP;\n\n    static {\n        ID_TO_TYPE = new CompressionType[CompressionType.values().length];\n        NAME_MAP = new HashMap<>();\n        for (CompressionType type : CompressionType.values()) {\n            ID_TO_TYPE[type.id] = type;\n            NAME_MAP.put(type.name, type);\n        }\n    }"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java",
    "search": "public static CompressionType forId(int id) {\n        switch (id) {\n            case 0:\n                return NONE;\n            case 1:\n                return GZIP;\n            case 2:\n                return SNAPPY;\n            case 3:\n                return LZ4;\n            case 4:\n                return ZSTD;\n            default:\n                throw new IllegalArgumentException(\"Unknown compression type id: \" + id);\n        }\n    }",
    "replace": "public static CompressionType forId(int id) {\n        if (id < 0 || id >= ID_TO_TYPE.length || ID_TO_TYPE[id] == null) {\n            throw new IllegalArgumentException(\"Unknown compression type id: \" + id);\n        }\n        return ID_TO_TYPE[id];\n    }"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java",
    "search": "public static CompressionType forName(String name) {\n        if (NONE.name.equals(name))\n            return NONE;\n        else if (GZIP.name.equals(name))\n            return GZIP;\n        else if (SNAPPY.name.equals(name))\n            return SNAPPY;\n        else if (LZ4.name.equals(name))\n            return LZ4;\n        else if (ZSTD.name.equals(name))\n            return ZSTD;\n        else\n            throw new IllegalArgumentException(\"Unknown compression name: \" + name);\n    }",
    "replace": "public static CompressionType forName(String name) {\n        CompressionType type = NAME_MAP.get(name);\n        if (type == null) {\n            throw new IllegalArgumentException(\"Unknown compression name: \" + name);\n        }\n        return type;\n    }"
  }
]
```