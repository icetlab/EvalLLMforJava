I’ve replaced the iterative loops in `sizeOfUnsignedVarint` and `sizeOfVarlong` with bit‐count based calculations using `numberOfLeadingZeros`, which computes the required byte count in constant time and should yield the same results more efficiently.

```json
[
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/utils/ByteUtils.java",
    "search": "public static int sizeOfUnsignedVarint(int value) {\n        int bytes = 1;\n        while ((value & 0xffffff80) != 0L) {\n            bytes += 1;\n            value >>>= 7;\n        }\n        return bytes;\n    }",
    "replace": "public static int sizeOfUnsignedVarint(int value) {\n        int bitCount = 32 - Integer.numberOfLeadingZeros(value);\n        if (bitCount <= 7) {\n            return 1;\n        } else {\n            return (bitCount + 6) / 7;\n        }\n    }"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/utils/ByteUtils.java",
    "search": "public static int sizeOfVarlong(long value) {\n        long v = (value << 1) ^ (value >> 63);\n        int bytes = 1;\n        while ((v & 0xffffffffffffff80L) != 0L) {\n            bytes += 1;\n            v >>>= 7;\n        }\n        return bytes;\n    }",
    "replace": "public static int sizeOfVarlong(long value) {\n        long v = (value << 1) ^ (value >> 63);\n        int bitCount = 64 - Long.numberOfLeadingZeros(v);\n        if (bitCount <= 7) {\n            return 1;\n        } else {\n            return (bitCount + 6) / 7;\n        }\n    }"
  }
]
```