diff --git a/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java b/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java
index 679b59249d..89fb8ea8b9 100644
--- a/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java
+++ b/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java
@@ -33,6 +33,8 @@ public final class Checksums {
     private Checksums() {
     }
 
+    private static final ThreadLocal<byte[]> BUFFER = ThreadLocal.withInitial(() -> new byte[8]);
+
     public static void update(Checksum checksum, ByteBuffer buffer, int length) {
         update(checksum, buffer, 0, length);
     }
@@ -42,26 +44,33 @@ public final class Checksums {
             checksum.update(buffer.array(), buffer.position() + buffer.arrayOffset() + offset, length);
         } else {
             int start = buffer.position() + offset;
-            for (int i = start; i < start + length; i++)
-                checksum.update(buffer.get(i));
+            ByteBuffer duplicate = buffer.duplicate();
+            duplicate.position(start).limit(start + length);
+            byte[] temp = new byte[length];
+            duplicate.get(temp);
+            checksum.update(temp, 0, length);
         }
     }
     
     public static void updateInt(Checksum checksum, int input) {
-        checksum.update((byte) (input >> 24));
-        checksum.update((byte) (input >> 16));
-        checksum.update((byte) (input >> 8));
-        checksum.update((byte) input /* >> 0 */);
+        byte[] buf = BUFFER.get();
+        buf[0] = (byte) (input >> 24);
+        buf[1] = (byte) (input >> 16);
+        buf[2] = (byte) (input >> 8);
+        buf[3] = (byte) input;
+        checksum.update(buf, 0, 4);
     }
 
     public static void updateLong(Checksum checksum, long input) {
-        checksum.update((byte) (input >> 56));
-        checksum.update((byte) (input >> 48));
-        checksum.update((byte) (input >> 40));
-        checksum.update((byte) (input >> 32));
-        checksum.update((byte) (input >> 24));
-        checksum.update((byte) (input >> 16));
-        checksum.update((byte) (input >> 8));
-        checksum.update((byte) input /* >> 0 */);
+        byte[] buf = BUFFER.get();
+        buf[0] = (byte) (input >> 56);
+        buf[1] = (byte) (input >> 48);
+        buf[2] = (byte) (input >> 40);
+        buf[3] = (byte) (input >> 32);
+        buf[4] = (byte) (input >> 24);
+        buf[5] = (byte) (input >> 16);
+        buf[6] = (byte) (input >> 8);
+        buf[7] = (byte) input;
+        checksum.update(buf, 0, 8);
     }
 }
