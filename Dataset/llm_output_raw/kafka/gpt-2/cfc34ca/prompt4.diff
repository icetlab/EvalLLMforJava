diff --git a/core/src/main/scala/kafka/log/LogManager.scala b/core/src/main/scala/kafka/log/LogManager.scala
index fc1e7195d7..3978786a58 100755
--- a/core/src/main/scala/kafka/log/LogManager.scala
+++ b/core/src/main/scala/kafka/log/LogManager.scala
@@ -568,9 +568,15 @@ class LogManager(logDirs: Seq[File],
    * to avoid recovering the whole log on startup.
    */
   def checkpointLogRecoveryOffsets(): Unit = {
-    logsByDir.foreach { case (dir, partitionToLogMap) =>
-      liveLogDirs.find(_.getAbsolutePath.equals(dir)).foreach { f =>
-        checkpointRecoveryOffsetsAndCleanSnapshot(f, partitionToLogMap.values.toSeq)
+    // Group current logs by directory without extra intermediate allocations
+    val dirToLogs = mutable.Map.empty[String, ArrayBuffer[Log]]
+    for ((_, log) <- currentLogs) {
+      val buf = dirToLogs.getOrElseUpdate(log.parentDir, ArrayBuffer.empty[Log])
+      buf += log
+    }
+    for ((dirStr, logsSeq) <- dirToLogs) {
+      liveLogDirs.find(_.getAbsolutePath == dirStr).foreach { f =>
+        checkpointRecoveryOffsetsAndCleanSnapshot(f, logsSeq)
       }
     }
   }
@@ -580,7 +586,22 @@ class LogManager(logDirs: Seq[File],
    * to avoid exposing data that have been deleted by DeleteRecordsRequest
    */
   def checkpointLogStartOffsets(): Unit = {
-    liveLogDirs.foreach(checkpointLogStartOffsetsInDir)
+    for (dir <- liveLogDirs) {
+      logStartOffsetCheckpoints.get(dir).foreach { checkpoint =>
+        // Collect start offsets for logs in this directory
+        val logStartOffsets = currentLogs.iterator.collect {
+          case (tp, log) if log.parentDirFile == dir && log.logStartOffset > log.logSegments.head.baseOffset =>
+            tp -> log.logStartOffset
+        }.toMap
+        try {
+          checkpoint.write(logStartOffsets)
+        } catch {
+          case e: IOException =>
+            logDirFailureChannel.maybeAddOfflineLogDir(dir.getAbsolutePath,
+              s"Disk error while writing to logStartOffset file in directory $dir", e)
+        }
+      }
+    }
   }
 
   /**
