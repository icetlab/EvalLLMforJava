Iâ€™ve optimized the checkpointing methods to avoid rebuilding the full `logsByDir` map on each invocation. Now they directly group active logs by directory with minimal allocations.

```json
[
  {
    "filepath": "../kafka/core/src/main/scala/kafka/log/LogManager.scala",
    "search": "def checkpointLogRecoveryOffsets(): Unit = {\n    logsByDir.foreach { case (dir, partitionToLogMap) =>\n      liveLogDirs.find(_.getAbsolutePath.equals(dir)).foreach { f =>\n        checkpointRecoveryOffsetsAndCleanSnapshot(f, partitionToLogMap.values.toSeq)\n      }\n    }\n  }",
    "replace": "def checkpointLogRecoveryOffsets(): Unit = {\n    // Group current logs by directory without extra intermediate allocations\n    val dirToLogs = mutable.Map.empty[String, ArrayBuffer[Log]]\n    for ((_, log) <- currentLogs) {\n      val buf = dirToLogs.getOrElseUpdate(log.parentDir, ArrayBuffer.empty[Log])\n      buf += log\n    }\n    for ((dirStr, logsSeq) <- dirToLogs) {\n      liveLogDirs.find(_.getAbsolutePath == dirStr).foreach { f =>\n        checkpointRecoveryOffsetsAndCleanSnapshot(f, logsSeq)\n      }\n    }\n  }"
  },
  {
    "filepath": "../kafka/core/src/main/scala/kafka/log/LogManager.scala",
    "search": "def checkpointLogStartOffsets(): Unit = {\n    liveLogDirs.foreach(checkpointLogStartOffsetsInDir)\n  }",
    "replace": "def checkpointLogStartOffsets(): Unit = {\n    for (dir <- liveLogDirs) {\n      logStartOffsetCheckpoints.get(dir).foreach { checkpoint =>\n        // Collect start offsets for logs in this directory\n        val logStartOffsets = currentLogs.iterator.collect {\n          case (tp, log) if log.parentDirFile == dir && log.logStartOffset > log.logSegments.head.baseOffset =>\n            tp -> log.logStartOffset\n        }.toMap\n        try {\n          checkpoint.write(logStartOffsets)\n        } catch {\n          case e: IOException =>\n            logDirFailureChannel.maybeAddOfflineLogDir(dir.getAbsolutePath,\n              s\"Disk error while writing to logStartOffset file in directory $dir\", e)\n        }\n      }\n    }\n  }"
  }
]
```