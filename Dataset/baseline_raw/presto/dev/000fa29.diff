commit 000fa29dcbf3958e988a20f92febe058baba9e6d
Author: Ying Su <yingsu@fb.com>
Date:   Thu Mar 5 22:59:27 2020 -0800

    Reduce positions array size in PartitionBuffer
    
    In OptimizedPartitionedOutputOperator, the PagePartioner has
    partitionCount number of PartitionBuffer, and each PartitionBuffer
    has a positions array to record the positions to be appended to this
    buffer. Previously this positions array was initialized to be the
    incoming page's positionCount size. This could waste lots of memory
    since each partition may only get a small portion of rows. This commit
    reduces the initial positions array size from positionCount to
    min(positionCount, (positionCount / partitionCount + 1) * 2) and
    grow it on the fly.
    
    JMH benchmark shows about 8-10% gain in retained size:
                            addPage         optimizedAddPage optimizedAddPage_reducePositions Gain%
    bigint                  335,715,874      424,471,312            390,497,040                8%
    ARRAY(BIGINT)           327,680,906      294,847,046            270,506,390                8%
    ROW(BIGINT,BIGINT)      315,490,496      261,529,566            236,571,362                10%

diff --git a/presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java b/presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java
index 30e0088e35..e2832a51bd 100644
--- a/presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java
+++ b/presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java
@@ -61,8 +61,10 @@ import java.util.OptionalInt;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.function.Function;
 
+import static com.facebook.presto.array.Arrays.ExpansionFactor.MEDIUM;
 import static com.facebook.presto.array.Arrays.ExpansionFactor.SMALL;
 import static com.facebook.presto.array.Arrays.ExpansionOption.INITIALIZE;
+import static com.facebook.presto.array.Arrays.ExpansionOption.PRESERVE;
 import static com.facebook.presto.array.Arrays.ensureCapacity;
 import static com.facebook.presto.operator.repartition.AbstractBlockEncodingBuffer.createBlockEncodingBuffers;
 import static com.facebook.presto.spi.block.PageBuilderStatus.DEFAULT_MAX_PAGE_SIZE_IN_BYTES;
@@ -434,8 +436,11 @@ public class OptimizedPartitionedOutputOperator
             // Populate positions to copy for each destination partition.
             int positionCount = page.getPositionCount();
 
+            // We initialize the size of the positions array in each partitionBuffers to be at most the incoming page's positionCount, or roughly two times of positionCount
+            // divided by the number of partitions. This is because the latter could be greater than the positionCount when the number of partitions is 1 or positionCount is 1.
+            int initialPositionCountForEachBuffer = min(positionCount, (positionCount / partitionFunction.getPartitionCount() + 1) * 2);
             for (int i = 0; i < partitionBuffers.length; i++) {
-                partitionBuffers[i].resetPositions(positionCount);
+                partitionBuffers[i].resetPositions(initialPositionCountForEachBuffer);
             }
 
             Block nullBlock = nullChannel.isPresent() ? page.getBlock(nullChannel.getAsInt()) : null;
@@ -559,14 +564,15 @@ public class OptimizedPartitionedOutputOperator
             this.lifespan = requireNonNull(lifespan, "lifespan is null");
         }
 
-        private void resetPositions(int positionCount)
+        private void resetPositions(int estimatedPositionCount)
         {
-            positions = ensureCapacity(positions, positionCount);
+            positions = ensureCapacity(positions, estimatedPositionCount);
             this.positionCount = 0;
         }
 
         private void addPosition(int position)
         {
+            positions = ensureCapacity(positions, positionCount + 1, MEDIUM, PRESERVE);
             positions[positionCount++] = position;
         }
 
