commit 34bce1bae5591347d1992daae0cdb041a409cc1d
Author: xtonik <antonin.janec@gmail.com>
Date:   Mon Jul 24 16:25:12 2023 +0200

    More performant integer shift left by bytes (#633)
    
    * more performant shift left on integer by bytes
    
    * benchmark for comparison existing shift left method and optimized one

diff --git a/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java b/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
index ed36adf0..58629c0a 100644
--- a/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
+++ b/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
@@ -50,9 +50,13 @@ public class IntegerUtil {
    * @return a fresh integer value
    */
   public static int shiftLeftFromSpecifiedPosition(int v, int pos, int count) {
-    byte[] initialVal = toBDBytes(v);
-    System.arraycopy(initialVal, pos + 1, initialVal, pos, count);
-    return fromBDBytes(initialVal);
+    if (count != 0) {
+      int shiftToLeft = (4 - count) << 3;
+      int shiftToRight = shiftToLeft - (pos << 3);
+      int maskShifted = 0xFFFFFFFF >>> shiftToLeft << shiftToRight;
+      v = (v & ~maskShifted) | (v << 8 & maskShifted);
+    }
+    return v;
   }
 
   /**
