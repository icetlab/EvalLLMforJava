diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringEncoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringEncoder.java
index da5080ff85..33859b1f63 100644
--- a/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringEncoder.java
+++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringEncoder.java
@@ -122,30 +122,46 @@ public class QueryStringEncoder {
     private void encodeNonUtf8Component(CharSequence s) {
         //Don't allocate memory until needed
         char[] buf = null;
-
-        for (int i = 0, len = s.length(); i < len;) {
+        int lastIndex = 0;
+        int i = 0;
+        final int len = s.length();
+        while (i < len) {
             char c = s.charAt(i);
             if (dontNeedEncoding(c)) {
-                uriBuilder.append(c);
                 i++;
-            } else {
-                int index = 0;
+                continue;
+            }
+
+            if (i > lastIndex) {
+                uriBuilder.append(s, lastIndex, i);
+            }
+
+            int firstToEncode = i;
             if (buf == null) {
-                    buf = new char[s.length() - i];
+                buf = new char[len - firstToEncode];
             }
 
+            int index = 0;
             do {
-                    buf[index] = c;
-                    index++;
+                buf[index++] = c;
                 i++;
-                } while (i < s.length() && !dontNeedEncoding(c = s.charAt(i)));
+                if (i >= len) {
+                    break;
+                }
+                c = s.charAt(i);
+            } while (!dontNeedEncoding(c));
 
             byte[] bytes = new String(buf, 0, index).getBytes(charset);
 
             for (byte b : bytes) {
                 appendEncoded(b);
             }
+
+            lastIndex = i;
         }
+
+        if (lastIndex < len) {
+            uriBuilder.append(s, lastIndex, len);
         }
     }
 
@@ -153,34 +169,47 @@ public class QueryStringEncoder {
      * @see ByteBufUtil#writeUtf8(io.netty.buffer.ByteBuf, CharSequence, int, int)
      */
     private void encodeUtf8Component(CharSequence s) {
+        int lastIndex = 0;
         for (int i = 0, len = s.length(); i < len; i++) {
             char c = s.charAt(i);
             if (c < 0x80) {
                 if (dontNeedEncoding(c)) {
-                    uriBuilder.append(c);
-                } else {
+                    continue;
+                }
+                if (i > lastIndex) {
+                    uriBuilder.append(s, lastIndex, i);
+                }
                 appendEncoded(c);
+                lastIndex = i + 1;
+            } else {
+                if (i > lastIndex) {
+                    uriBuilder.append(s, lastIndex, i);
                 }
-            } else if (c < 0x800) {
+                if (c < 0x800) {
                     appendEncoded(0xc0 | (c >> 6));
                     appendEncoded(0x80 | (c & 0x3f));
                 } else if (StringUtil.isSurrogate(c)) {
                     if (!Character.isHighSurrogate(c)) {
                         appendEncoded(WRITE_UTF_UNKNOWN);
-                    continue;
-                }
+                    } else {
                         // Surrogate Pair consumes 2 characters.
                         if (++i == s.length()) {
                             appendEncoded(WRITE_UTF_UNKNOWN);
-                    break;
-                }
+                        } else {
                             // Extra method to allow inlining the rest of writeUtf8 which is the most likely code path.
                             writeUtf8Surrogate(c, s.charAt(i));
+                        }
+                    }
                 } else {
                     appendEncoded(0xe0 | (c >> 12));
                     appendEncoded(0x80 | ((c >> 6) & 0x3f));
                     appendEncoded(0x80 | (c & 0x3f));
                 }
+                lastIndex = i + 1;
+            }
+        }
+        if (lastIndex < s.length()) {
+            uriBuilder.append(s, lastIndex, s.length());
         }
     }
 
