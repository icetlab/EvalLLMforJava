diff --git a/common/src/main/java/io/netty/util/Recycler.java b/common/src/main/java/io/netty/util/Recycler.java
index a17a9906c4..08a3e34a6a 100644
--- a/common/src/main/java/io/netty/util/Recycler.java
+++ b/common/src/main/java/io/netty/util/Recycler.java
@@ -211,7 +211,7 @@ public abstract class Recycler<T> {
     @VisibleForTesting
     final int threadLocalSize() {
         LocalPool<T> localPool = threadLocal.getIfExists();
-        return localPool == null ? 0 : localPool.pooledHandles.size() + localPool.batch.size();
+        return localPool == null ? 0 : localPool.pooledHandles.size() + localPool.batchSize;
     }
 
     /**
@@ -297,7 +297,8 @@ public abstract class Recycler<T> {
     private static final class LocalPool<T> implements MessagePassingQueue.Consumer<DefaultHandle<T>> {
         private final int ratioInterval;
         private final int chunkSize;
-        private final ArrayDeque<DefaultHandle<T>> batch;
+        private final DefaultHandle<?>[] batch;
+        private int batchSize;
         private volatile Thread owner;
         private volatile MessagePassingQueue<DefaultHandle<T>> pooledHandles;
         private int ratioCounter;
@@ -306,7 +307,7 @@ public abstract class Recycler<T> {
         LocalPool(int maxCapacity, int ratioInterval, int chunkSize) {
             this.ratioInterval = ratioInterval;
             this.chunkSize = chunkSize;
-            batch = new ArrayDeque<DefaultHandle<T>>(chunkSize);
+            batch = new DefaultHandle[chunkSize];
             Thread currentThread = Thread.currentThread();
             owner = !BATCH_FAST_TL_ONLY || currentThread instanceof FastThreadLocalThread ? currentThread : null;
             if (BLOCKING_POOL) {
@@ -322,10 +323,16 @@ public abstract class Recycler<T> {
             if (handles == null) {
                 return null;
             }
-            if (batch.isEmpty()) {
+            if (batchSize == 0) {
                 handles.drain(this, chunkSize);
+                if (batchSize == 0) {
+                    return null;
+                }
             }
-            DefaultHandle<T> handle = batch.pollFirst();
+            --batchSize;
+            @SuppressWarnings("unchecked")
+            DefaultHandle<T> handle = (DefaultHandle<T>) batch[batchSize];
+            batch[batchSize] = null;
             if (null != handle) {
                 handle.toClaimed();
             }
@@ -339,7 +346,7 @@ public abstract class Recycler<T> {
                 handle.unguardedToAvailable();
             }
             Thread owner = this.owner;
-            if (owner != null && Thread.currentThread() == owner && batch.size() < chunkSize) {
+            if (owner != null && Thread.currentThread() == owner && batchSize < chunkSize) {
                 accept(handle);
             } else if (owner != null && isTerminated(owner)) {
                 this.owner = null;
@@ -368,7 +375,7 @@ public abstract class Recycler<T> {
 
         @Override
         public void accept(DefaultHandle<T> e) {
-            batch.addLast(e);
+            batch[batchSize++] = e;
         }
     }
 
