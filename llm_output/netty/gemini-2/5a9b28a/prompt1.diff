diff --git a/common/src/main/java/io/netty/util/Recycler.java b/common/src/main/java/io/netty/util/Recycler.java
index a17a9906c4..8ee2bc3b2b 100644
--- a/common/src/main/java/io/netty/util/Recycler.java
+++ b/common/src/main/java/io/netty/util/Recycler.java
@@ -339,23 +339,31 @@ public abstract class Recycler<T> {
                 handle.unguardedToAvailable();
             }
             Thread owner = this.owner;
-            if (owner != null && Thread.currentThread() == owner && batch.size() < chunkSize) {
+            if (owner == Thread.currentThread()) {
+                if (batch.size() < chunkSize) {
                     accept(handle);
-            } else if (owner != null && isTerminated(owner)) {
+                    return;
+                }
+                // Batch is full, offer to queue.
+            } else {
+                if (owner != null && isTerminated(owner)) {
                     this.owner = null;
                     pooledHandles = null;
-            } else {
+                    return;
+                }
+                // Foreign thread, or ownerless pool.
+            }
+
             MessagePassingQueue<DefaultHandle<T>> handles = pooledHandles;
             if (handles != null) {
                 handles.relaxedOffer(handle);
             }
         }
-        }
 
         private static boolean isTerminated(Thread owner) {
             // Do not use `Thread.getState()` in J9 JVM because it's known to have a performance issue.
             // See: https://github.com/netty/netty/issues/13347#issuecomment-1518537895
-            return PlatformDependent.isJ9Jvm() ? !owner.isAlive() : owner.getState() == Thread.State.TERMINATED;
+            return !owner.isAlive();
         }
 
         DefaultHandle<T> newHandle() {
