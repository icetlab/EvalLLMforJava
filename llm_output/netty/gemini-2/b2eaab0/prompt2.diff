diff --git a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
index df45d1614a..776ee0f8be 100644
--- a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
@@ -627,7 +627,7 @@ final class PlatformDependent0 {
         }
         final long baseOffset1 = BYTE_ARRAY_BASE_OFFSET + startPos1;
         final long baseOffset2 = BYTE_ARRAY_BASE_OFFSET + startPos2;
-        int remainingBytes = length & 7;
+        final int remainingBytes = length & 7;
         final long end = baseOffset1 + remainingBytes;
         for (long i = baseOffset1 - 8 + length, j = baseOffset2 - 8 + length; i >= end; i -= 8, j -= 8) {
             if (UNSAFE.getLong(bytes1, i) != UNSAFE.getLong(bytes2, j)) {
@@ -636,17 +636,16 @@ final class PlatformDependent0 {
         }
 
         if (remainingBytes >= 4) {
-            remainingBytes -= 4;
-            if (UNSAFE.getInt(bytes1, baseOffset1 + remainingBytes) !=
-                UNSAFE.getInt(bytes2, baseOffset2 + remainingBytes)) {
-                return false;
-            }
+            return UNSAFE.getInt(bytes1, baseOffset1) == UNSAFE.getInt(bytes2, baseOffset2) &&
+                    UNSAFE.getInt(bytes1, baseOffset1 + remainingBytes - 4) ==
+                            UNSAFE.getInt(bytes2, baseOffset2 + remainingBytes - 4);
         }
         if (remainingBytes >= 2) {
             return UNSAFE.getChar(bytes1, baseOffset1) == UNSAFE.getChar(bytes2, baseOffset2) &&
-                   (remainingBytes == 2 || bytes1[startPos1 + 2] == bytes2[startPos2 + 2]);
+                    UNSAFE.getChar(bytes1, baseOffset1 + remainingBytes - 2) ==
+                            UNSAFE.getChar(bytes2, baseOffset2 + remainingBytes - 2);
         }
-        return bytes1[startPos1] == bytes2[startPos2];
+        return remainingBytes == 0 || UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
     }
 
     static int equalsConstantTime(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {
@@ -695,7 +694,7 @@ final class PlatformDependent0 {
             return true;
         }
         final long baseOffset = BYTE_ARRAY_BASE_OFFSET + startPos;
-        int remainingBytes = length & 7;
+        final int remainingBytes = length & 7;
         final long end = baseOffset + remainingBytes;
         for (long i = baseOffset - 8 + length; i >= end; i -= 8) {
             if (UNSAFE.getLong(bytes, i) != 0) {
@@ -704,16 +703,14 @@ final class PlatformDependent0 {
         }
 
         if (remainingBytes >= 4) {
-            remainingBytes -= 4;
-            if (UNSAFE.getInt(bytes, baseOffset + remainingBytes) != 0) {
-                return false;
-            }
+            return UNSAFE.getInt(bytes, baseOffset) == 0 &&
+                    UNSAFE.getInt(bytes, baseOffset + remainingBytes - 4) == 0;
         }
         if (remainingBytes >= 2) {
             return UNSAFE.getChar(bytes, baseOffset) == 0 &&
-                    (remainingBytes == 2 || bytes[startPos + 2] == 0);
+                    UNSAFE.getChar(bytes, baseOffset + remainingBytes - 2) == 0;
         }
-        return bytes[startPos] == 0;
+        return remainingBytes == 0 || UNSAFE.getByte(bytes, baseOffset) == 0;
     }
 
     static int hashCodeAscii(byte[] bytes, int startPos, int length) {
