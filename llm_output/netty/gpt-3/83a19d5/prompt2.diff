diff --git a/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
index e657ad86f8..be4e79e5b4 100644
--- a/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
+++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
@@ -27,14 +27,13 @@ import static io.netty.util.internal.ObjectUtil.checkPositive;
  */
 public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
 
-    private static final AtomicIntegerFieldUpdater<AbstractReferenceCountedByteBuf> refCntUpdater =
-            AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCountedByteBuf.class, "refCnt");
+    
 
     private volatile int refCnt;
 
     protected AbstractReferenceCountedByteBuf(int maxCapacity) {
         super(maxCapacity);
-        refCntUpdater.set(this, 1);
+        this.refCnt = 1;
     }
 
     @Override
@@ -46,7 +45,7 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
      * An unsafe operation intended for use by a subclass that sets the reference count of the buffer directly
      */
     protected final void setRefCnt(int refCnt) {
-        refCntUpdater.set(this, refCnt);
+        this.refCnt = refCnt;
     }
 
     @Override
@@ -60,18 +59,13 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
     }
 
     private ByteBuf retain0(int increment) {
-        for (;;) {
-            int refCnt = this.refCnt;
-            final int nextCnt = refCnt + increment;
-
-            // Ensure we not resurrect (which means the refCnt was 0) and also that we encountered an overflow.
+        int current = this.refCnt;
+        int nextCnt = current + increment;
+        // Ensure we not resurrect (refCnt was 0) or overflowed
         if (nextCnt <= increment) {
-                throw new IllegalReferenceCountException(refCnt, increment);
-            }
-            if (refCntUpdater.compareAndSet(this, refCnt, nextCnt)) {
-                break;
-            }
+            throw new IllegalReferenceCountException(current, increment);
         }
+        this.refCnt = nextCnt;
         return this;
     }
 
@@ -96,21 +90,18 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
     }
 
     private boolean release0(int decrement) {
-        for (;;) {
-            int refCnt = this.refCnt;
-            if (refCnt < decrement) {
-                throw new IllegalReferenceCountException(refCnt, -decrement);
+        int current = this.refCnt;
+        if (current < decrement) {
+            throw new IllegalReferenceCountException(current, -decrement);
         }
-
-            if (refCntUpdater.compareAndSet(this, refCnt, refCnt - decrement)) {
-                if (refCnt == decrement) {
+        int newCnt = current - decrement;
+        this.refCnt = newCnt;
+        if (newCnt == 0) {
             deallocate();
             return true;
         }
         return false;
     }
-        }
-    }
     /**
      * Called once {@link #refCnt()} is equals 0.
      */
diff --git a/common/src/main/java/io/netty/util/AbstractReferenceCounted.java b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
index 493bcc1872..ba984c7207 100644
--- a/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
+++ b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
@@ -24,8 +24,7 @@ import static io.netty.util.internal.ObjectUtil.checkPositive;
  */
 public abstract class AbstractReferenceCounted implements ReferenceCounted {
 
-    private static final AtomicIntegerFieldUpdater<AbstractReferenceCounted> refCntUpdater =
-            AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCounted.class, "refCnt");
+    
 
     private volatile int refCnt = 1;
 
@@ -38,7 +37,7 @@ public abstract class AbstractReferenceCounted implements ReferenceCounted {
      * An unsafe operation intended for use by a subclass that sets the reference count of the buffer directly
      */
     protected final void setRefCnt(int refCnt) {
-        refCntUpdater.set(this, refCnt);
+        this.refCnt = refCnt;
     }
 
     @Override
@@ -52,18 +51,13 @@ public abstract class AbstractReferenceCounted implements ReferenceCounted {
     }
 
     private ReferenceCounted retain0(int increment) {
-        for (;;) {
-            int refCnt = this.refCnt;
-            final int nextCnt = refCnt + increment;
-
-            // Ensure we not resurrect (which means the refCnt was 0) and also that we encountered an overflow.
+        int current = this.refCnt;
+        int nextCnt = current + increment;
+        // Ensure we not resurrect (refCnt was 0) or overflowed
         if (nextCnt <= increment) {
-                throw new IllegalReferenceCountException(refCnt, increment);
-            }
-            if (refCntUpdater.compareAndSet(this, refCnt, nextCnt)) {
-                break;
-            }
+            throw new IllegalReferenceCountException(current, increment);
         }
+        this.refCnt = nextCnt;
         return this;
     }
 
@@ -83,21 +77,18 @@ public abstract class AbstractReferenceCounted implements ReferenceCounted {
     }
 
     private boolean release0(int decrement) {
-        for (;;) {
-            int refCnt = this.refCnt;
-            if (refCnt < decrement) {
-                throw new IllegalReferenceCountException(refCnt, -decrement);
+        int current = this.refCnt;
+        if (current < decrement) {
+            throw new IllegalReferenceCountException(current, -decrement);
         }
-
-            if (refCntUpdater.compareAndSet(this, refCnt, refCnt - decrement)) {
-                if (refCnt == decrement) {
+        int newCnt = current - decrement;
+        this.refCnt = newCnt;
+        if (newCnt == 0) {
             deallocate();
             return true;
         }
         return false;
     }
-        }
-    }
 
     /**
      * Called once {@link #refCnt()} is equals 0.
