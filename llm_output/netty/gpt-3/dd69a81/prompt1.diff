diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java
index 0db8a4ce34..dff4a25b45 100644
--- a/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java
+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java
@@ -36,41 +36,47 @@ public class HttpRequestEncoder extends HttpObjectEncoder<HttpRequest> {
 
     @Override
     protected void encodeInitialLine(ByteBuf buf, HttpRequest request) throws Exception {
+        // Write method and space
         ByteBufUtil.copy(request.method().asciiName(), buf);
         buf.writeByte(SP);
 
-        // Add / as absolute path if no is present.
-        // See http://tools.ietf.org/html/rfc2616#section-5.1.2
         String uri = request.uri();
-
-        if (uri.isEmpty()) {
-            uri += SLASH;
+        int len = uri.length();
+        if (len == 0) {
+            // empty URI -> write '/'
+            buf.writeByte(SLASH);
         } else {
-            int start = uri.indexOf("://");
-            if (start != -1 && uri.charAt(0) != SLASH) {
-                int startIndex = start + 3;
-                // Correctly handle query params.
-                // See https://github.com/netty/netty/issues/2732
-                int index = uri.indexOf(QUESTION_MARK, startIndex);
-                if (index == -1) {
-                    if (uri.lastIndexOf(SLASH) <= startIndex) {
-                        uri += SLASH;
-                    }
+            int schemeEnd = uri.indexOf("://");
+            if (schemeEnd != -1 && uri.charAt(0) != SLASH) {
+                int authorityEnd = schemeEnd + 3;
+                int qm = uri.indexOf(QUESTION_MARK, authorityEnd);
+                int lastSlash = (qm == -1) ? uri.lastIndexOf(SLASH) : uri.lastIndexOf(SLASH, qm);
+                if (lastSlash <= authorityEnd) {
+                    if (qm == -1) {
+                        // no query, missing slash after authority
+                        ByteBufUtil.copy(uri, buf);
+                        buf.writeByte(SLASH);
+                        buf.writeByte(SP);
+                        request.protocolVersion().encode(buf);
+                        buf.writeBytes(CRLF);
+                        return;
                     } else {
-                    if (uri.lastIndexOf(SLASH, index) <= startIndex) {
-                        int len = uri.length();
-                        StringBuilder sb = new StringBuilder(len + 1);
-                        sb.append(uri, 0, index)
-                          .append(SLASH)
-                          .append(uri, index, len);
-                        uri = sb.toString();
-                    }
+                        // query present, missing slash before '?'
+                        ByteBufUtil.copy(uri, 0, qm, buf);
+                        buf.writeByte(SLASH);
+                        ByteBufUtil.copy(uri, qm, len - qm, buf);
+                        buf.writeByte(SP);
+                        request.protocolVersion().encode(buf);
+                        buf.writeBytes(CRLF);
+                        return;
                     }
                 }
             }
-
+            // default: write entire URI
             buf.writeCharSequence(uri, CharsetUtil.UTF_8);
+        }
 
+        // write protocol and end-of-line
         buf.writeByte(SP);
         request.protocolVersion().encode(buf);
         buf.writeBytes(CRLF);
