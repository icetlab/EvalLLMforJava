diff --git a/common/src/main/java/io/netty/util/internal/PlatformDependent.java b/common/src/main/java/io/netty/util/internal/PlatformDependent.java
index 0a70c36401..d8b9d57622 100644
--- a/common/src/main/java/io/netty/util/internal/PlatformDependent.java
+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java
@@ -1223,9 +1223,31 @@ public final class PlatformDependent {
     }
 
     private static boolean equalsSafe(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {
-        final int end = startPos1 + length;
-        for (; startPos1 < end; ++startPos1, ++startPos2) {
-            if (bytes1[startPos1] != bytes2[startPos2]) {
+        if (length <= 0) {
+            return true;
+        }
+        int end = startPos1 + length;
+        int i = startPos1;
+        int j = startPos2;
+        int limit = end - 7;
+        // Unrolled 8-byte checks
+        while (i < limit) {
+            if (bytes1[i]   != bytes2[j]   ||
+                bytes1[i+1] != bytes2[j+1] ||
+                bytes1[i+2] != bytes2[j+2] ||
+                bytes1[i+3] != bytes2[j+3] ||
+                bytes1[i+4] != bytes2[j+4] ||
+                bytes1[i+5] != bytes2[j+5] ||
+                bytes1[i+6] != bytes2[j+6] ||
+                bytes1[i+7] != bytes2[j+7]) {
+                return false;
+            }
+            i += 8;
+            j += 8;
+        }
+        // Tail
+        for (; i < end; i++, j++) {
+            if (bytes1[i] != bytes2[j]) {
                 return false;
             }
         }
@@ -1233,9 +1255,29 @@ public final class PlatformDependent {
     }
 
     private static boolean isZeroSafe(byte[] bytes, int startPos, int length) {
-        final int end = startPos + length;
-        for (; startPos < end; ++startPos) {
-            if (bytes[startPos] != 0) {
+        if (length <= 0) {
+            return true;
+        }
+        int end = startPos + length;
+        int i = startPos;
+        int limit = end - 7;
+        // Unrolled 8-byte zero checks
+        while (i < limit) {
+            if (bytes[i]   != 0 ||
+                bytes[i+1] != 0 ||
+                bytes[i+2] != 0 ||
+                bytes[i+3] != 0 ||
+                bytes[i+4] != 0 ||
+                bytes[i+5] != 0 ||
+                bytes[i+6] != 0 ||
+                bytes[i+7] != 0) {
+                return false;
+            }
+            i += 8;
+        }
+        // Tail
+        for (; i < end; i++) {
+            if (bytes[i] != 0) {
                 return false;
             }
         }
