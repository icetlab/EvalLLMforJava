diff --git a/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
index c132aa5b20..b5d7875abb 100644
--- a/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
+++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
@@ -249,12 +249,7 @@ public abstract class AbstractScheduledEventExecutor extends AbstractEventExecut
             scheduledTaskQueue().add(task.setId(nextTaskId++));
         } else {
             final long deadlineNanos = task.deadlineNanos();
-            final Runnable addToQueue = new Runnable() {
-                @Override
-                public void run() {
-                    scheduledTaskQueue().add(task.setId(nextTaskId++));
-                }
-            };
+            Runnable addToQueue = ((ScheduledFutureTask<V>) task).queueAddTask();
             if (beforeScheduledTaskSubmitted(deadlineNanos)) {
                 execute(addToQueue);
             } else {
diff --git a/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
index 5ffe824119..ebc78dd3b2 100644
--- a/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
+++ b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
@@ -214,4 +214,20 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
     public void priorityQueueIndex(DefaultPriorityQueue<?> queue, int i) {
         queueIndex = i;
     }
+
+    // Reusable Runnable to add this task into the scheduled queue without extra allocation
+    private final Runnable queueAddTask = new Runnable() {
+        @Override
+        public void run() {
+            AbstractScheduledEventExecutor e = (AbstractScheduledEventExecutor) executor();
+            e.scheduledTaskQueue().add(ScheduledFutureTask.this.setId(e.nextTaskId++));
+        }
+    };
+
+    /**
+     * Returns the pre-allocated Runnable that enqueues this task when run.
+     */
+    Runnable queueAddTask() {
+        return queueAddTask;
+    }
 }
