diff --git a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
index df45d1614a..3ded495a6c 100644
--- a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
@@ -625,28 +625,39 @@ final class PlatformDependent0 {
         if (length <= 0) {
             return true;
         }
-        final long baseOffset1 = BYTE_ARRAY_BASE_OFFSET + startPos1;
-        final long baseOffset2 = BYTE_ARRAY_BASE_OFFSET + startPos2;
-        int remainingBytes = length & 7;
-        final long end = baseOffset1 + remainingBytes;
-        for (long i = baseOffset1 - 8 + length, j = baseOffset2 - 8 + length; i >= end; i -= 8, j -= 8) {
-            if (UNSAFE.getLong(bytes1, i) != UNSAFE.getLong(bytes2, j)) {
+        long offset1 = BYTE_ARRAY_BASE_OFFSET + startPos1;
+        long offset2 = BYTE_ARRAY_BASE_OFFSET + startPos2;
+        final int longCount = length >>> 3;
+        for (int i = 0; i < longCount; i++) {
+            if (UNSAFE.getLong(bytes1, offset1) != UNSAFE.getLong(bytes2, offset2)) {
                 return false;
             }
+            offset1 += 8;
+            offset2 += 8;
         }
-
-        if (remainingBytes >= 4) {
-            remainingBytes -= 4;
-            if (UNSAFE.getInt(bytes1, baseOffset1 + remainingBytes) !=
-                UNSAFE.getInt(bytes2, baseOffset2 + remainingBytes)) {
+        int remaining = length & 7;
+        if (remaining >= 4) {
+            if (UNSAFE.getInt(bytes1, offset1) != UNSAFE.getInt(bytes2, offset2)) {
                 return false;
             }
+            offset1 += 4;
+            offset2 += 4;
+            remaining -= 4;
         }
-        if (remainingBytes >= 2) {
-            return UNSAFE.getChar(bytes1, baseOffset1) == UNSAFE.getChar(bytes2, baseOffset2) &&
-                   (remainingBytes == 2 || bytes1[startPos1 + 2] == bytes2[startPos2 + 2]);
+        if (remaining >= 2) {
+            if (UNSAFE.getChar(bytes1, offset1) != UNSAFE.getChar(bytes2, offset2)) {
+                return false;
             }
-        return bytes1[startPos1] == bytes2[startPos2];
+            offset1 += 2;
+            offset2 += 2;
+            remaining -= 2;
+        }
+        if (remaining > 0) {
+            if (UNSAFE.getByte(bytes1, offset1) != UNSAFE.getByte(bytes2, offset2)) {
+                return false;
+            }
+        }
+        return true;
     }
 
     static int equalsConstantTime(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {
@@ -694,26 +705,35 @@ final class PlatformDependent0 {
         if (length <= 0) {
             return true;
         }
-        final long baseOffset = BYTE_ARRAY_BASE_OFFSET + startPos;
-        int remainingBytes = length & 7;
-        final long end = baseOffset + remainingBytes;
-        for (long i = baseOffset - 8 + length; i >= end; i -= 8) {
-            if (UNSAFE.getLong(bytes, i) != 0) {
+        long offset = BYTE_ARRAY_BASE_OFFSET + startPos;
+        int longCount = length >>> 3;
+        for (int i = 0; i < longCount; i++) {
+            if (UNSAFE.getLong(bytes, offset) != 0) {
                 return false;
             }
+            offset += 8;
         }
-
-        if (remainingBytes >= 4) {
-            remainingBytes -= 4;
-            if (UNSAFE.getInt(bytes, baseOffset + remainingBytes) != 0) {
+        int remaining = length & 7;
+        if (remaining >= 4) {
+            if (UNSAFE.getInt(bytes, offset) != 0) {
+                return false;
+            }
+            offset += 4;
+            remaining -= 4;
+        }
+        if (remaining >= 2) {
+            if (UNSAFE.getChar(bytes, offset) != 0) {
                 return false;
             }
+            offset += 2;
+            remaining -= 2;
         }
-        if (remainingBytes >= 2) {
-            return UNSAFE.getChar(bytes, baseOffset) == 0 &&
-                    (remainingBytes == 2 || bytes[startPos + 2] == 0);
+        if (remaining > 0) {
+            if (UNSAFE.getByte(bytes, offset) != 0) {
+                return false;
             }
-        return bytes[startPos] == 0;
+        }
+        return true;
     }
 
     static int hashCodeAscii(byte[] bytes, int startPos, int length) {
