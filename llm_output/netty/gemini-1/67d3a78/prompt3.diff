diff --git a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
index 3c6012601f..1a5dca07d8 100644
--- a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
@@ -437,33 +437,37 @@ final class PlatformDependent0 {
     static boolean equals(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {
         final long baseOffset1 = BYTE_ARRAY_BASE_OFFSET + startPos1;
         final long baseOffset2 = BYTE_ARRAY_BASE_OFFSET + startPos2;
-        final int remainingBytes = length & 7;
-        final long end = baseOffset1 + remainingBytes;
-        for (long i = baseOffset1 - 8 + length, j = baseOffset2 - 8 + length; i >= end; i -= 8, j -= 8) {
-            if (UNSAFE.getLong(bytes1, i) != UNSAFE.getLong(bytes2, j)) {
+        final int longCount = length >>> 3;
+        final int byteCount = length & 7;
+
+        long i = 0;
+        for (int k = longCount; k > 0; k--) {
+            if (UNSAFE.getLong(bytes1, baseOffset1 + i) != UNSAFE.getLong(bytes2, baseOffset2 + i)) {
                 return false;
             }
+            i += 8;
         }
-        switch (remainingBytes) {
+
+        switch (byteCount) {
         case 7:
-            return UNSAFE.getInt(bytes1, baseOffset1 + 3) == UNSAFE.getInt(bytes2, baseOffset2 + 3) &&
-                   UNSAFE.getChar(bytes1, baseOffset1 + 1) == UNSAFE.getChar(bytes2, baseOffset2 + 1) &&
-                   UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
+            return UNSAFE.getInt(bytes1, baseOffset1 + i + 3) == UNSAFE.getInt(bytes2, baseOffset2 + i + 3) &&
+                   UNSAFE.getChar(bytes1, baseOffset1 + i + 1) == UNSAFE.getChar(bytes2, baseOffset2 + i + 1) &&
+                   UNSAFE.getByte(bytes1, baseOffset1 + i) == UNSAFE.getByte(bytes2, baseOffset2 + i);
         case 6:
-            return UNSAFE.getInt(bytes1, baseOffset1 + 2) == UNSAFE.getInt(bytes2, baseOffset2 + 2) &&
-                   UNSAFE.getChar(bytes1, baseOffset1) == UNSAFE.getChar(bytes2, baseOffset2);
+            return UNSAFE.getInt(bytes1, baseOffset1 + i + 2) == UNSAFE.getInt(bytes2, baseOffset2 + i + 2) &&
+                   UNSAFE.getChar(bytes1, baseOffset1 + i) == UNSAFE.getChar(bytes2, baseOffset2 + i);
         case 5:
-            return UNSAFE.getInt(bytes1, baseOffset1 + 1) == UNSAFE.getInt(bytes2, baseOffset2 + 1) &&
-                   UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
+            return UNSAFE.getInt(bytes1, baseOffset1 + i + 1) == UNSAFE.getInt(bytes2, baseOffset2 + i + 1) &&
+                   UNSAFE.getByte(bytes1, baseOffset1 + i) == UNSAFE.getByte(bytes2, baseOffset2 + i);
         case 4:
-            return UNSAFE.getInt(bytes1, baseOffset1) == UNSAFE.getInt(bytes2, baseOffset2);
+            return UNSAFE.getInt(bytes1, baseOffset1 + i) == UNSAFE.getInt(bytes2, baseOffset2 + i);
         case 3:
-            return UNSAFE.getChar(bytes1, baseOffset1 + 1) == UNSAFE.getChar(bytes2, baseOffset2 + 1) &&
-                   UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
+            return UNSAFE.getChar(bytes1, baseOffset1 + i + 1) == UNSAFE.getChar(bytes2, baseOffset2 + i + 1) &&
+                   UNSAFE.getByte(bytes1, baseOffset1 + i) == UNSAFE.getByte(bytes2, baseOffset2 + i);
         case 2:
-            return UNSAFE.getChar(bytes1, baseOffset1) == UNSAFE.getChar(bytes2, baseOffset2);
+            return UNSAFE.getChar(bytes1, baseOffset1 + i) == UNSAFE.getChar(bytes2, baseOffset2 + i);
         case 1:
-            return UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
+            return UNSAFE.getByte(bytes1, baseOffset1 + i) == UNSAFE.getByte(bytes2, baseOffset2 + i);
         default:
             return true;
         }
