diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackEncoder.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackEncoder.java
index 301a2c51cf..ecf2501f56 100644
--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackEncoder.java
+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackEncoder.java
@@ -58,7 +58,6 @@ final class HpackEncoder {
     private final HeaderEntry[] headerFields;
     private final HeaderEntry head = new HeaderEntry(-1, AsciiString.EMPTY_STRING,
             AsciiString.EMPTY_STRING, Integer.MAX_VALUE, null);
-    private final HpackHuffmanEncoder hpackHuffmanEncoder = new HpackHuffmanEncoder();
     private final byte hashMask;
     private final boolean ignoreMaxHeaderListSize;
     private long size;
@@ -93,6 +92,15 @@ final class HpackEncoder {
         head.before = head.after = head;
     }
 
+    /**
+     * Creates a new encoder.
+     * @deprecated Huffman encoding is no longer supported and this constructor will be removed in a future release.
+     */
+    @Deprecated
+    HpackEncoder(boolean ignoreMaxHeaderListSize, int arraySizeHint, @SuppressWarnings("unused") int huffmanEncodeThreshold) {
+        this(ignoreMaxHeaderListSize, arraySizeHint);
+    }
+
     /**
      * Encode the header field into the header block.
      *
@@ -250,11 +258,6 @@ final class HpackEncoder {
      * Encode string literal according to Section 5.2.
      */
     private void encodeStringLiteral(ByteBuf out, CharSequence string) {
-        int huffmanLength = hpackHuffmanEncoder.getEncodedLength(string);
-        if (huffmanLength < string.length()) {
-            encodeInteger(out, 0x80, 7, huffmanLength);
-            hpackHuffmanEncoder.encode(out, string);
-        } else {
         encodeInteger(out, 0x00, 7, string.length());
         if (string instanceof AsciiString) {
             // Fast-path
@@ -266,7 +269,6 @@ final class HpackEncoder {
             out.writeCharSequence(string, CharsetUtil.ISO_8859_1);
         }
     }
-    }
 
     /**
      * Encode literal header field according to Section 6.2.
