diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackEncoder.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackEncoder.java
index 301a2c51cf..c112ccf1a3 100644
--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackEncoder.java
+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackEncoder.java
@@ -112,17 +112,29 @@ final class HpackEncoder {
             throws Http2Exception {
         long headerSize = 0;
         // To ensure we stay consistent with our peer check the size is valid before we potentially modify HPACK state.
-        for (Map.Entry<CharSequence, CharSequence> header : headers) {
-            CharSequence name = header.getKey();
-            CharSequence value = header.getValue();
-            // OK to increment now and check for bounds after because this value is limited to unsigned int and will not
-            // overflow.
-            headerSize += HpackHeaderField.sizeOf(name, value);
+        // To avoid iterating over the headers twice, we store them in a temporary list.
+        java.util.List<Map.Entry<CharSequence, CharSequence>> headerEntries =
+                new java.util.ArrayList<Map.Entry<CharSequence, CharSequence>>();
+        for (Map.Entry<CharSequence, CharSequence> e : headers) {
+            headerEntries.add(e);
+        }
+
+        long[] headerSizes = new long[headerEntries.size()];
+        for (int i = 0; i < headerEntries.size(); i++) {
+            Map.Entry<CharSequence, CharSequence> header = headerEntries.get(i);
+            long currentHeaderSize = HpackHeaderField.sizeOf(header.getKey(), header.getValue());
+            headerSize += currentHeaderSize;
             if (headerSize > maxHeaderListSize) {
                 headerListSizeExceeded(streamId, maxHeaderListSize, false);
             }
+            headerSizes[i] = currentHeaderSize;
+        }
+
+        for (int i = 0; i < headerEntries.size(); i++) {
+            Map.Entry<CharSequence, CharSequence> header = headerEntries.get(i);
+            encodeHeader(out, header.getKey(), header.getValue(),
+                    sensitivityDetector.isSensitive(header.getKey(), header.getValue()), headerSizes[i]);
         }
-        encodeHeadersIgnoreMaxHeaderListSize(out, headers, sensitivityDetector);
     }
 
     private void encodeHeadersIgnoreMaxHeaderListSize(ByteBuf out, Http2Headers headers,
