diff --git a/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java
index e7afab3672..e5aa28f56f 100644
--- a/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java
+++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java
@@ -760,6 +760,28 @@ public final class ByteBufUtil {
         if (len == 0) {
             return StringUtil.EMPTY_STRING;
         }
+        if (charset.equals(CharsetUtil.US_ASCII)) {
+            if (src.forEachByte(readerIndex, len, FIND_NON_ASCII) == -1) {
+                // All bytes are ASCII so we can use a fast-path.
+                CharBuffer dst = CHAR_BUFFERS.get();
+                if (dst.length() < len) {
+                    dst = CharBuffer.allocate(len);
+                    if (len <= MAX_CHAR_BUFFER_SIZE) {
+                        CHAR_BUFFERS.set(dst);
+                    }
+                } else {
+                    dst.clear();
+                }
+                if (src.nioBufferCount() == 1) {
+                    decodeAscii(src.nioBuffer(readerIndex, len), dst);
+                } else {
+                    for (ByteBuffer nioBuffer : src.nioBuffers(readerIndex, len)) {
+                        decodeAscii(nioBuffer, dst);
+                    }
+                }
+                return dst.flip().toString();
+            }
+        }
         final CharsetDecoder decoder = CharsetUtil.decoder(charset);
         final int maxLength = (int) ((double) len * decoder.maxCharsPerByte());
         CharBuffer dst = CHAR_BUFFERS.get();
@@ -804,6 +826,22 @@ public final class ByteBufUtil {
         }
     }
 
+    private static void decodeAscii(ByteBuffer src, CharBuffer dst) {
+        final int remaining = src.remaining();
+        if (src.hasArray()) {
+            final byte[] array = src.array();
+            final int offset = src.arrayOffset() + src.position();
+            for (int i = 0; i < remaining; i++) {
+                dst.put((char) array[offset + i]);
+            }
+            src.position(src.position() + remaining);
+        } else {
+            for (int i = 0; i < remaining; i++) {
+                dst.put((char) src.get());
+            }
+        }
+    }
+
     /**
      * Returns a cached thread-local direct buffer, if available.
      *
