Iâ€™ve optimized the thread-termination check to avoid costly `Thread.getState()` calls and accelerated the common-case path in `LocalPool.claim()` by first attempting a single-element poll before falling back to bulk draining.

```json
[
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/Recycler.java",
    "search": "private static boolean isTerminated(Thread owner) {\n    // Do not use `Thread.getState()` in J9 JVM because it's known to have a performance issue.\n    // See: https://github.com/netty/netty/issues/13347#issuecomment-1518537895\n    return PlatformDependent.isJ9Jvm() ? !owner.isAlive() : owner.getState() == Thread.State.TERMINATED;\n}",
    "replace": "private static boolean isTerminated(Thread owner) {\n    // Simplify termination check to avoid expensive getState() calls\n    return !owner.isAlive();\n}"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/Recycler.java",
    "search": "DefaultHandle<T> claim() {\n            MessagePassingQueue<DefaultHandle<T>> handles = pooledHandles;\n            if (handles == null) {\n                return null;\n            }\n            if (batch.isEmpty()) {\n                handles.drain(this, chunkSize);\n            }\n            DefaultHandle<T> handle = batch.pollFirst();\n            if (null != handle) {\n                handle.toClaimed();\n            }\n            return handle;\n        }",
    "replace": "DefaultHandle<T> claim() {\n            MessagePassingQueue<DefaultHandle<T>> handles = pooledHandles;\n            if (handles == null) {\n                return null;\n            }\n            // Fast-path: try single poll before bulk draining\n            DefaultHandle<T> handle = handles.relaxedPoll();\n            if (handle != null) {\n                handle.toClaimed();\n                return handle;\n            }\n            if (batch.isEmpty()) {\n                handles.drain(this, chunkSize);\n            }\n            handle = batch.pollFirst();\n            if (null != handle) {\n                handle.toClaimed();\n            }\n            return handle;\n        }"
  }
]
```