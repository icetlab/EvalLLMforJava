Iâ€™ve replaced the large unrolled-switch implementation of `hashCodeAscii(CharSequence)` with a compact loop-based version that maintains identical behavior but is much smaller, allowing the JIT to inline it more readily.

```json
[
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/internal/PlatformDependent.java",
    "search": "public static int hashCodeAscii(CharSequence bytes) {\n        int hash = HASH_CODE_ASCII_SEED;\n        final int remainingBytes = bytes.length() & 7;",
    "replace": "public static int hashCodeAscii(CharSequence bytes) {\n        int hash = HASH_CODE_ASCII_SEED;\n        int len = bytes.length();\n        int rem = len & 7;\n        // process 8-byte chunks\n        for (int i = 0; i < len - rem; i += 8) {\n            hash = hashCodeAsciiCompute(bytes, i, hash);\n        }\n        // process remaining bytes\n        switch (rem) {\n            case 7:\n                return ((hash * HASH_CODE_C1 + hashCodeAsciiSanitizeByte(bytes.charAt(0)))\n                        * HASH_CODE_C2 + hashCodeAsciiSanitizeShort(bytes, 1))\n                        * HASH_CODE_C1 + hashCodeAsciiSanitizeInt(bytes, 3);\n            case 6:\n                return (hash * HASH_CODE_C1 + hashCodeAsciiSanitizeShort(bytes, 0))\n                        * HASH_CODE_C2 + hashCodeAsciiSanitizeInt(bytes, 2);\n            case 5:\n                return (hash * HASH_CODE_C1 + hashCodeAsciiSanitizeByte(bytes.charAt(0)))\n                        * HASH_CODE_C2 + hashCodeAsciiSanitizeInt(bytes, 1);\n            case 4:\n                return hash * HASH_CODE_C1 + hashCodeAsciiSanitizeInt(bytes, 0);\n            case 3:\n                return (hash * HASH_CODE_C1 + hashCodeAsciiSanitizeByte(bytes.charAt(0)))\n                        * HASH_CODE_C2 + hashCodeAsciiSanitizeShort(bytes, 1);\n            case 2:\n                return hash * HASH_CODE_C1 + hashCodeAsciiSanitizeShort(bytes, 0);\n            case 1:\n                return hash * HASH_CODE_C1 + hashCodeAsciiSanitizeByte(bytes.charAt(0));\n            default:\n                return hash;\n        }"
  }
]
```