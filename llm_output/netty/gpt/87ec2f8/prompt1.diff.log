Iâ€™ve optimized the hot-path hex-dump routines by eliminating the per-iteration System.arraycopy calls and replacing them with direct array accesses. This reduces call overhead and inlines the copy of two chars. 

```json
[
  {
    "filepath": "../netty/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java",
    "search": "private static String hexDump(ByteBuf buffer, int fromIndex, int length) {\n            if (length < 0) {\n              throw new IllegalArgumentException(\"length: \" + length);\n            }\n            if (length == 0) {\n              return \"\";\n            }\n\n            int endIndex = fromIndex + length;\n            char[] buf = new char[length << 1];\n\n            int srcIdx = fromIndex;\n            int dstIdx = 0;\n            for (; srcIdx < endIndex; srcIdx ++, dstIdx += 2) {\n              System.arraycopy(\n                  HEXDUMP_TABLE, buffer.getUnsignedByte(srcIdx) << 1,\n                  buf, dstIdx, 2);\n            }\n\n            return new String(buf);\n        }",
    "replace": "private static String hexDump(ByteBuf buffer, int fromIndex, int length) {\n            if (length < 0) {\n              throw new IllegalArgumentException(\"length: \" + length);\n            }\n            if (length == 0) {\n              return \"\";\n            }\n\n            int endIndex = fromIndex + length;\n            char[] buf = new char[length << 1];\n\n            int srcIdx = fromIndex;\n            int dstIdx = 0;\n            for (; srcIdx < endIndex; srcIdx ++, dstIdx += 2) {\n              int tableIndex = buffer.getUnsignedByte(srcIdx) << 1;\n              buf[dstIdx]     = HEXDUMP_TABLE[tableIndex];\n              buf[dstIdx + 1] = HEXDUMP_TABLE[tableIndex + 1];\n            }\n\n            return new String(buf);\n        }"
  },
  {
    "filepath": "../netty/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java",
    "search": "private static String hexDump(byte[] array, int fromIndex, int length) {\n            if (length < 0) {\n              throw new IllegalArgumentException(\"length: \" + length);\n            }\n            if (length == 0) {\n                return \"\";\n            }\n\n            int endIndex = fromIndex + length;\n            char[] buf = new char[length << 1];\n\n            int srcIdx = fromIndex;\n            int dstIdx = 0;\n            for (; srcIdx < endIndex; srcIdx ++, dstIdx += 2) {\n                System.arraycopy(\n                    HEXDUMP_TABLE, (array[srcIdx] & 0xFF) << 1,\n                    buf, dstIdx, 2);\n            }\n\n            return new String(buf);\n        }",
    "replace": "private static String hexDump(byte[] array, int fromIndex, int length) {\n            if (length < 0) {\n              throw new IllegalArgumentException(\"length: \" + length);\n            }\n            if (length == 0) {\n                return \"\";\n            }\n\n            int endIndex = fromIndex + length;\n            char[] buf = new char[length << 1];\n\n            int srcIdx = fromIndex;\n            int dstIdx = 0;\n            for (; srcIdx < endIndex; srcIdx ++, dstIdx += 2) {\n                int tableIndex = (array[srcIdx] & 0xFF) << 1;\n                buf[dstIdx]     = HEXDUMP_TABLE[tableIndex];\n                buf[dstIdx + 1] = HEXDUMP_TABLE[tableIndex + 1];\n            }\n\n            return new String(buf);\n        }"
  }
]
```