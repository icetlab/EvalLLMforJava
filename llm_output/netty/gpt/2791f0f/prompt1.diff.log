Iâ€™ve introduced the following micro-optimizations to reduce object allocations and simplify code paths:

1. Replaced the anonymous Comparator class with a lambda.
2. Changed toArray(new T[0]) to toArray(new T[size()]) to avoid the zero-length array allocation.
3. Replaced anonymous Runnables in scheduling/removal helpers with lambdas.

```json
[
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java",
    "search": "private static final Comparator<ScheduledFutureTask<?>> SCHEDULED_FUTURE_TASK_COMPARATOR =\n            new Comparator<ScheduledFutureTask<?>>() {\n                @Override\n                public int compare(ScheduledFutureTask<?> o1, ScheduledFutureTask<?> o2) {\n                    return o1.compareTo(o2);\n                }\n            };",
    "replace": "private static final Comparator<ScheduledFutureTask<?>> SCHEDULED_FUTURE_TASK_COMPARATOR =\n            (o1, o2) -> o1.compareTo(o2);"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java",
    "search": "final ScheduledFutureTask<?>[] scheduledTasks =\n                scheduledTaskQueue.toArray(new ScheduledFutureTask<?>[0]);",
    "replace": "final ScheduledFutureTask<?>[] scheduledTasks =\n                scheduledTaskQueue.toArray(new ScheduledFutureTask<?>[scheduledTaskQueue.size()]);"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java",
    "search": "executeScheduledRunnable(new Runnable() {\n                @Override\n                public void run() {\n                    scheduledTaskQueue().add(task);\n                }\n            }, true, task.deadlineNanos());",
    "replace": "executeScheduledRunnable(() -> scheduledTaskQueue().add(task), true, task.deadlineNanos());"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java",
    "search": "executeScheduledRunnable(new Runnable() {\n                @Override\n                public void run() {\n                    scheduledTaskQueue().removeTyped(task);\n                }\n            }, false, task.deadlineNanos());",
    "replace": "executeScheduledRunnable(() -> scheduledTaskQueue().removeTyped(task), false, task.deadlineNanos());"
  }
]
```