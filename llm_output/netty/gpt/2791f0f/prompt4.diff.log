The goal is to replace the single global AtomicLong used for task IDs with a per-executor counter, eliminating cross-executor contention while preserving task ordering and uniqueness.

```json
[
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java",
    "search": "import java.util.concurrent.TimeUnit;",
    "replace": "import java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicLong;"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java",
    "search": "protected AbstractScheduledEventExecutor(EventExecutorGroup parent) {\n        super(parent);\n    }",
    "replace": "protected AbstractScheduledEventExecutor(EventExecutorGroup parent) {\n        super(parent);\n    }\n\n    private final AtomicLong scheduledTaskIdGenerator = new AtomicLong();\n\n    final long nextTaskId() {\n        return scheduledTaskIdGenerator.getAndIncrement();\n    }"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java",
    "search": "private static final AtomicLong nextTaskId = new AtomicLong();",
    "replace": ""
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java",
    "search": "private final long id = nextTaskId.getAndIncrement();",
    "replace": "private final long id;"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java",
    "search": "ScheduledFutureTask(\n            AbstractScheduledEventExecutor executor,\n            Runnable runnable, V result, long nanoTime) {",
    "replace": "ScheduledFutureTask(\n            AbstractScheduledEventExecutor executor,\n            Runnable runnable, V result, long nanoTime) {\n        this.id = executor.nextTaskId();"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java",
    "search": "ScheduledFutureTask(\n            AbstractScheduledEventExecutor executor,\n            Callable<V> callable, long nanoTime, long period) {",
    "replace": "ScheduledFutureTask(\n            AbstractScheduledEventExecutor executor,\n            Callable<V> callable, long nanoTime, long period) {\n        this.id = executor.nextTaskId();"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java",
    "search": "ScheduledFutureTask(\n            AbstractScheduledEventExecutor executor,\n            Callable<V> callable, long nanoTime) {",
    "replace": "ScheduledFutureTask(\n            AbstractScheduledEventExecutor executor,\n            Callable<V> callable, long nanoTime) {\n        this.id = executor.nextTaskId();"
  }
]
```