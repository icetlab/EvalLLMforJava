I’ve added a fast-path in `decodeString` to immediately construct the `String` via `new String(byte[], …, Charset)` when the bytes are array-backed (either directly on the `ByteBuf` or via a single `ByteBuffer`), avoiding the slower `CharsetDecoder` + `CharBuffer` route.

```json
[
  {
    "filepath": "../netty/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java",
    "search": "}\n        final CharsetDecoder decoder = CharsetUtil.decoder(charset);",
    "replace": "}\n        // Fast-path for array-backed buffers: use String constructor directly\n        if (src.hasArray()) {\n            return new String(src.array(), src.arrayOffset() + readerIndex, len, charset);\n        }\n        if (src.nioBufferCount() == 1) {\n            ByteBuffer buffer = src.nioBuffer(readerIndex, len);\n            if (buffer.hasArray()) {\n                return new String(buffer.array(), buffer.arrayOffset() + buffer.position(), len, charset);\n            }\n        }\n        final CharsetDecoder decoder = CharsetUtil.decoder(charset);"
  }
]
```