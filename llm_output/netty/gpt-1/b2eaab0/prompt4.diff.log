Iâ€™ve reduced the size of the hot methods by hoisting the unsafe/unaligned check into a single static final flag and simplifying the per-call branches. This should make the methods smaller and more JIT-inlineable.

```json
[
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/internal/PlatformDependent.java",
    "search": "public static final boolean BIG_ENDIAN_NATIVE_ORDER = ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN;",
    "replace": "private static final boolean USE_UNSAFE_FAST_PATH = hasUnsafe() && unalignedAccess();\npublic static final boolean BIG_ENDIAN_NATIVE_ORDER = ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN;"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/internal/PlatformDependent.java",
    "search": "public static boolean equals(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {\n        return !hasUnsafe() || !unalignedAccess() ?\n                  equalsSafe(bytes1, startPos1, bytes2, startPos2, length) :\n                  PlatformDependent0.equals(bytes1, startPos1, bytes2, startPos2, length);\n    }",
    "replace": "public static boolean equals(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {\n        return USE_UNSAFE_FAST_PATH ?\n                  PlatformDependent0.equals(bytes1, startPos1, bytes2, startPos2, length) :\n                  equalsSafe(bytes1, startPos1, bytes2, startPos2, length);\n    }"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/internal/PlatformDependent.java",
    "search": "public static int equalsConstantTime(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {\n        return !hasUnsafe() || !unalignedAccess() ?\n                  ConstantTimeUtils.equalsConstantTime(bytes1, startPos1, bytes2, startPos2, length) :\n                  PlatformDependent0.equalsConstantTime(bytes1, startPos1, bytes2, startPos2, length);\n    }",
    "replace": "public static int equalsConstantTime(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {\n        return USE_UNSAFE_FAST_PATH ?\n                  PlatformDependent0.equalsConstantTime(bytes1, startPos1, bytes2, startPos2, length) :\n                  ConstantTimeUtils.equalsConstantTime(bytes1, startPos1, bytes2, startPos2, length);\n    }"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/internal/PlatformDependent.java",
    "search": "public static boolean isZero(byte[] bytes, int startPos, int length) {\n        return !hasUnsafe() || !unalignedAccess() ?\n                isZeroSafe(bytes, startPos, length) :\n                PlatformDependent0.isZero(bytes, startPos, length);\n    }",
    "replace": "public static boolean isZero(byte[] bytes, int startPos, int length) {\n        return USE_UNSAFE_FAST_PATH ?\n                PlatformDependent0.isZero(bytes, startPos, length) :\n                isZeroSafe(bytes, startPos, length);\n    }"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/internal/PlatformDependent.java",
    "search": "public static int hashCodeAscii(byte[] bytes, int startPos, int length) {\n        return !hasUnsafe() || !unalignedAccess() ?\n                hashCodeAsciiSafe(bytes, startPos, length) :\n                PlatformDependent0.hashCodeAscii(bytes, startPos, length);\n    }",
    "replace": "public static int hashCodeAscii(byte[] bytes, int startPos, int length) {\n        return USE_UNSAFE_FAST_PATH ?\n                PlatformDependent0.hashCodeAscii(bytes, startPos, length) :\n                hashCodeAsciiSafe(bytes, startPos, length);\n    }"
  }
]
```