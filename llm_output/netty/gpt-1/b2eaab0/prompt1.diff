diff --git a/common/src/main/java/io/netty/util/internal/PlatformDependent.java b/common/src/main/java/io/netty/util/internal/PlatformDependent.java
index 0a70c36401..f68115eccb 100644
--- a/common/src/main/java/io/netty/util/internal/PlatformDependent.java
+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java
@@ -1223,9 +1223,31 @@ public final class PlatformDependent {
     }
 
     private static boolean equalsSafe(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {
-        final int end = startPos1 + length;
-        for (; startPos1 < end; ++startPos1, ++startPos2) {
-            if (bytes1[startPos1] != bytes2[startPos2]) {
+        if (length <= 0) {
+            return true;
+        }
+        int pos1 = startPos1;
+        int pos2 = startPos2;
+        int end = pos1 + length;
+        int limit = end - 7;
+        // Unroll 8-byte comparisons
+        while (pos1 < limit) {
+            if (bytes1[pos1]   != bytes2[pos2]   ||
+                bytes1[pos1+1] != bytes2[pos2+1] ||
+                bytes1[pos1+2] != bytes2[pos2+2] ||
+                bytes1[pos1+3] != bytes2[pos2+3] ||
+                bytes1[pos1+4] != bytes2[pos2+4] ||
+                bytes1[pos1+5] != bytes2[pos2+5] ||
+                bytes1[pos1+6] != bytes2[pos2+6] ||
+                bytes1[pos1+7] != bytes2[pos2+7]) {
+                return false;
+            }
+            pos1 += 8;
+            pos2 += 8;
+        }
+        // Tail comparison
+        while (pos1 < end) {
+            if (bytes1[pos1++] != bytes2[pos2++]) {
                 return false;
             }
         }
@@ -1233,9 +1255,29 @@ public final class PlatformDependent {
     }
 
     private static boolean isZeroSafe(byte[] bytes, int startPos, int length) {
-        final int end = startPos + length;
-        for (; startPos < end; ++startPos) {
-            if (bytes[startPos] != 0) {
+        if (length <= 0) {
+            return true;
+        }
+        int pos = startPos;
+        int end = pos + length;
+        int limit = end - 7;
+        // Unroll 8-byte zero checks
+        while (pos < limit) {
+            if (bytes[pos]   != 0 ||
+                bytes[pos+1] != 0 ||
+                bytes[pos+2] != 0 ||
+                bytes[pos+3] != 0 ||
+                bytes[pos+4] != 0 ||
+                bytes[pos+5] != 0 ||
+                bytes[pos+6] != 0 ||
+                bytes[pos+7] != 0) {
+                return false;
+            }
+            pos += 8;
+        }
+        // Tail check
+        while (pos < end) {
+            if (bytes[pos++] != 0) {
                 return false;
             }
         }
