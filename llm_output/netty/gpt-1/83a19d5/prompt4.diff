diff --git a/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
index e657ad86f8..4ddf6ce4a0 100644
--- a/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
+++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
@@ -60,6 +60,16 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
     }
 
     private ByteBuf retain0(int increment) {
+        // fast-path for single retain
+        if (increment == 1) {
+            int prev = refCntUpdater.getAndAdd(this, 1);
+            if (prev > 0) {
+                return this;
+            }
+            // undo and error on invalid state
+            refCntUpdater.getAndAdd(this, -1);
+            throw new IllegalReferenceCountException(prev, 1);
+        }
         for (;;) {
             int refCnt = this.refCnt;
             final int nextCnt = refCnt + increment;
@@ -96,6 +106,20 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
     }
 
     private boolean release0(int decrement) {
+        // fast-path for single release
+        if (decrement == 1) {
+            int prev = refCntUpdater.getAndAdd(this, -1);
+            if (prev > 1) {
+                return false;
+            }
+            if (prev == 1) {
+                deallocate();
+                return true;
+            }
+            // undo and error on invalid state
+            refCntUpdater.getAndAdd(this, 1);
+            throw new IllegalReferenceCountException(prev, -1);
+        }
         for (;;) {
             int refCnt = this.refCnt;
             if (refCnt < decrement) {
diff --git a/common/src/main/java/io/netty/util/AbstractReferenceCounted.java b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
index 493bcc1872..6bebf8534f 100644
--- a/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
+++ b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java
@@ -52,6 +52,16 @@ public abstract class AbstractReferenceCounted implements ReferenceCounted {
     }
 
     private ReferenceCounted retain0(int increment) {
+        // fast-path for single retain
+        if (increment == 1) {
+            int prev = refCntUpdater.getAndAdd(this, 1);
+            if (prev > 0) {
+                return this;
+            }
+            // undo and error on invalid state
+            refCntUpdater.getAndAdd(this, -1);
+            throw new IllegalReferenceCountException(prev, 1);
+        }
         for (;;) {
             int refCnt = this.refCnt;
             final int nextCnt = refCnt + increment;
@@ -83,6 +93,20 @@ public abstract class AbstractReferenceCounted implements ReferenceCounted {
     }
 
     private boolean release0(int decrement) {
+        // fast-path for single release
+        if (decrement == 1) {
+            int prev = refCntUpdater.getAndAdd(this, -1);
+            if (prev > 1) {
+                return false;
+            }
+            if (prev == 1) {
+                deallocate();
+                return true;
+            }
+            // undo and error on invalid state
+            refCntUpdater.getAndAdd(this, 1);
+            throw new IllegalReferenceCountException(prev, -decrement);
+        }
         for (;;) {
             int refCnt = this.refCnt;
             if (refCnt < decrement) {
