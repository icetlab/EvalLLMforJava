diff --git a/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java
index c8c40a5d24..6da870bb28 100644
--- a/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java
+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java
@@ -46,8 +46,10 @@ public abstract class AbstractByteBuf extends ByteBuf {
     private static final String LEGACY_PROP_CHECK_ACCESSIBLE = "io.netty.buffer.bytebuf.checkAccessible";
     private static final String PROP_CHECK_ACCESSIBLE = "io.netty.buffer.checkAccessible";
     private static final boolean checkAccessible;
+    private static final boolean CHECK_ACCESSIBLE = checkAccessible;
     private static final String PROP_CHECK_BOUNDS = "io.netty.buffer.checkBounds";
     private static final boolean checkBounds;
+    private static final boolean CHECK_BOUNDS = checkBounds;
 
     static {
         if (SystemPropertyUtil.contains(PROP_CHECK_ACCESSIBLE)) {
@@ -1385,7 +1387,7 @@ public abstract class AbstractByteBuf extends ByteBuf {
     }
 
     final void checkIndex0(int index, int fieldLength) {
-        if (checkBounds) {
+        if (CHECK_BOUNDS) {
             checkRangeBounds(index, fieldLength, capacity());
         }
     }
@@ -1442,7 +1444,10 @@ public abstract class AbstractByteBuf extends ByteBuf {
      * if the buffer was released before.
      */
     protected final void ensureAccessible() {
-        if (checkAccessible && refCnt() == 0) {
+        if (!CHECK_ACCESSIBLE) {
+            return;
+        }
+        if (refCnt() == 0) {
             throw new IllegalReferenceCountException(0);
         }
     }
