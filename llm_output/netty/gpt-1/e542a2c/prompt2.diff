diff --git a/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java
index c8c40a5d24..985b2a9da9 100644
--- a/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java
+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java
@@ -25,6 +25,7 @@ import io.netty.util.internal.StringUtil;
 import io.netty.util.internal.SystemPropertyUtil;
 import io.netty.util.internal.logging.InternalLogger;
 import io.netty.util.internal.logging.InternalLoggerFactory;
+import io.netty.buffer.AbstractReferenceCountedByteBuf;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -1442,7 +1443,16 @@ public abstract class AbstractByteBuf extends ByteBuf {
      * if the buffer was released before.
      */
     protected final void ensureAccessible() {
-        if (checkAccessible && refCnt() == 0) {
+        if (!checkAccessible) {
+            return;
+        }
+        int cnt;
+        if (this instanceof AbstractReferenceCountedByteBuf) {
+            cnt = ((AbstractReferenceCountedByteBuf) this).refCntNonVolatile();
+        } else {
+            cnt = refCnt();
+        }
+        if (cnt == 0) {
             throw new IllegalReferenceCountException(0);
         }
     }
diff --git a/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
index d624d855f4..aca0524ed0 100644
--- a/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
+++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java
@@ -31,10 +31,14 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
             AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCountedByteBuf.class, "refCnt");
 
     private volatile int refCnt;
+    // non-volatile mirror for best-effort accessible checks
+    private int lastRefCnt;
 
     protected AbstractReferenceCountedByteBuf(int maxCapacity) {
         super(maxCapacity);
         refCntUpdater.set(this, 1);
+        // initialize non-volatile mirror
+        lastRefCnt = 1;
     }
 
     @Override
@@ -61,11 +65,14 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
 
     private ByteBuf retain0(final int increment) {
         int oldRef = refCntUpdater.getAndAdd(this, increment);
-        if (oldRef <= 0 || oldRef + increment < oldRef) {
-            // Ensure we don't resurrect (which means the refCnt was 0) and also that we encountered an overflow.
+        int newRef = oldRef + increment;
+        if (oldRef <= 0 || newRef < oldRef) {
+            // rollback on error
             refCntUpdater.getAndAdd(this, -increment);
             throw new IllegalReferenceCountException(oldRef, increment);
         }
+        // update non-volatile mirror
+        lastRefCnt = newRef;
         return this;
     }
 
@@ -91,11 +98,14 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
 
     private boolean release0(int decrement) {
         int oldRef = refCntUpdater.getAndAdd(this, -decrement);
+        int newRef = oldRef - decrement;
+        // update non-volatile mirror
+        lastRefCnt = newRef;
         if (oldRef == decrement) {
             deallocate();
             return true;
-        } else if (oldRef < decrement || oldRef - decrement > oldRef) {
-            // Ensure we don't over-release, and avoid underflow.
+        } else if (oldRef < decrement || newRef > oldRef) {
+            // rollback on error
             refCntUpdater.getAndAdd(this, decrement);
             throw new IllegalReferenceCountException(oldRef, -decrement);
         }
@@ -105,4 +115,11 @@ public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {
      * Called once {@link #refCnt()} is equals 0.
      */
     protected abstract void deallocate();
+
+    /**
+     * Expose the non-volatile mirror of the reference count for best-effort accessible checks.
+     */
+    final int refCntNonVolatile() {
+        return lastRefCnt;
+    }
 }
