diff --git a/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
index c132aa5b20..e595e42605 100644
--- a/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
+++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java
@@ -249,17 +249,10 @@ public abstract class AbstractScheduledEventExecutor extends AbstractEventExecut
             scheduledTaskQueue().add(task.setId(nextTaskId++));
         } else {
             final long deadlineNanos = task.deadlineNanos();
-            final Runnable addToQueue = new Runnable() {
-                @Override
-                public void run() {
-                    scheduledTaskQueue().add(task.setId(nextTaskId++));
-                }
-            };
             if (beforeScheduledTaskSubmitted(deadlineNanos)) {
-                execute(addToQueue);
+                execute(task);
             } else {
-                lazyExecute(addToQueue);
-                // Second hook after scheduling to facilitate race-avoidance
+                lazyExecute(task);
                 if (afterScheduledTaskSubmitted(deadlineNanos)) {
                     execute(WAKEUP_TASK);
                 }
@@ -282,6 +275,11 @@ public abstract class AbstractScheduledEventExecutor extends AbstractEventExecut
         }
     }
 
+    // Internal helper: first run of a ScheduledFutureTask enqueues it
+    void addScheduledTask(ScheduledFutureTask<?> task) {
+        scheduledTaskQueue().add(task.setId(nextTaskId++));
+    }
+
     /**
      * Called from arbitrary non-{@link EventExecutor} threads prior to scheduled task submission.
      * Returns {@code true} if the {@link EventExecutor} thread should be woken immediately to
diff --git a/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
index 5ffe824119..8c416696e2 100644
--- a/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
+++ b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java
@@ -50,6 +50,8 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
     private final long periodNanos;
 
     private int queueIndex = INDEX_NOT_IN_QUEUE;
+    // first-run flag: initial scheduling into the queue
+    private boolean initial = true;
 
     ScheduledFutureTask(AbstractScheduledEventExecutor executor,
             Runnable runnable, long nanoTime) {
@@ -144,6 +146,11 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
     @Override
     public void run() {
         assert executor().inEventLoop();
+        if (initial) {
+            initial = false;
+            ((AbstractScheduledEventExecutor) executor()).addScheduledTask(this);
+            return;
+        }
         try {
             if (periodNanos == 0) {
                 if (setUncancellableInternal()) {
@@ -161,10 +168,8 @@ final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFu
                             deadlineNanos = nanoTime() - periodNanos;
                         }
                         if (!isCancelled()) {
-                            // scheduledTaskQueue can never be null as we lazy init it before submit the task!
                             Queue<ScheduledFutureTask<?>> scheduledTaskQueue =
-                                    ((AbstractScheduledEventExecutor) executor()).scheduledTaskQueue;
-                            assert scheduledTaskQueue != null;
+                                    ((AbstractScheduledEventExecutor) executor()).scheduledTaskQueue();
                             scheduledTaskQueue.add(this);
                         }
                     }
