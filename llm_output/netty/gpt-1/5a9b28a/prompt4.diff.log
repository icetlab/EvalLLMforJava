I’ve replaced the blocking ArrayDeque-based “batch” in LocalPool with a simple array-backed stack (“stack” + “stackSize”), and updated all references accordingly to eliminate costly `pollFirst` and streamline push/pop. All changes are scoped to `Recycler.java` and preserve existing behavior and tests.

```json
[
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/Recycler.java",
    "search": "private final ArrayDeque<DefaultHandle<T>> batch;",
    "replace": "@SuppressWarnings(\"unchecked\")\nprivate final DefaultHandle<T>[] stack;\nprivate int stackSize;"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/Recycler.java",
    "search": "batch = new ArrayDeque<DefaultHandle<T>>(chunkSize);",
    "replace": "stack = (DefaultHandle<T>[]) new DefaultHandle[chunkSize];\nstackSize = 0;"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/Recycler.java",
    "search": "if (batch.isEmpty()) {\n                handles.drain(this, chunkSize);\n            }",
    "replace": "if (stackSize == 0) {\n                handles.drain(this, chunkSize);\n            }"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/Recycler.java",
    "search": "DefaultHandle<T> handle = batch.pollFirst();",
    "replace": "DefaultHandle<T> handle;\n            if (stackSize > 0) {\n                handle = stack[--stackSize];\n                stack[stackSize] = null;\n                handle.toClaimed();\n            } else {\n                handle = null;\n            }"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/Recycler.java",
    "search": "if (null != handle) {\n                handle.toClaimed();\n            }",
    "replace": ""
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/Recycler.java",
    "search": "public void accept(DefaultHandle<T> e) {\n            batch.addLast(e);\n        }",
    "replace": "public void accept(DefaultHandle<T> e) {\n            stack[stackSize++] = e;\n        }"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/Recycler.java",
    "search": "if (owner != null && Thread.currentThread() == owner && batch.size() < chunkSize) {",
    "replace": "if (owner != null && Thread.currentThread() == owner && stackSize < chunkSize) {"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/Recycler.java",
    "search": "return localPool == null ? 0 : localPool.pooledHandles.size() + localPool.batch.size();",
    "replace": "return localPool == null ? 0 : localPool.pooledHandles.size() + localPool.stackSize;"
  }
]
```