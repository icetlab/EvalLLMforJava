diff --git a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
index 3c6012601f..2d12ce4f5b 100644
--- a/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java
@@ -435,38 +435,37 @@ final class PlatformDependent0 {
     }
 
     static boolean equals(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {
-        final long baseOffset1 = BYTE_ARRAY_BASE_OFFSET + startPos1;
-        final long baseOffset2 = BYTE_ARRAY_BASE_OFFSET + startPos2;
-        final int remainingBytes = length & 7;
-        final long end = baseOffset1 + remainingBytes;
+        long baseOffset1 = BYTE_ARRAY_BASE_OFFSET + startPos1;
+        long baseOffset2 = BYTE_ARRAY_BASE_OFFSET + startPos2;
+        final long end = baseOffset1 + (length & 7);
         for (long i = baseOffset1 - 8 + length, j = baseOffset2 - 8 + length; i >= end; i -= 8, j -= 8) {
             if (UNSAFE.getLong(bytes1, i) != UNSAFE.getLong(bytes2, j)) {
                 return false;
             }
         }
-        switch (remainingBytes) {
-        case 7:
-            return UNSAFE.getInt(bytes1, baseOffset1 + 3) == UNSAFE.getInt(bytes2, baseOffset2 + 3) &&
-                   UNSAFE.getChar(bytes1, baseOffset1 + 1) == UNSAFE.getChar(bytes2, baseOffset2 + 1) &&
-                   UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
-        case 6:
-            return UNSAFE.getInt(bytes1, baseOffset1 + 2) == UNSAFE.getInt(bytes2, baseOffset2 + 2) &&
-                   UNSAFE.getChar(bytes1, baseOffset1) == UNSAFE.getChar(bytes2, baseOffset2);
-        case 5:
-            return UNSAFE.getInt(bytes1, baseOffset1 + 1) == UNSAFE.getInt(bytes2, baseOffset2 + 1) &&
-                   UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
-        case 4:
-            return UNSAFE.getInt(bytes1, baseOffset1) == UNSAFE.getInt(bytes2, baseOffset2);
-        case 3:
-            return UNSAFE.getChar(bytes1, baseOffset1 + 1) == UNSAFE.getChar(bytes2, baseOffset2 + 1) &&
-                   UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
-        case 2:
-            return UNSAFE.getChar(bytes1, baseOffset1) == UNSAFE.getChar(bytes2, baseOffset2);
-        case 1:
-            return UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);
-        default:
-            return true;
+        int remainingBytes = length & 7;
+        if (remainingBytes >= 4) {
+            if (UNSAFE.getInt(bytes1, baseOffset1) != UNSAFE.getInt(bytes2, baseOffset2)) {
+                return false;
+            }
+            baseOffset1 += 4;
+            baseOffset2 += 4;
+            remainingBytes -= 4;
+        }
+        if (remainingBytes >= 2) {
+            if (UNSAFE.getShort(bytes1, baseOffset1) != UNSAFE.getShort(bytes2, baseOffset2)) {
+                return false;
             }
+            baseOffset1 += 2;
+            baseOffset2 += 2;
+            remainingBytes -= 2;
+        }
+        if (remainingBytes == 1) {
+            if (UNSAFE.getByte(bytes1, baseOffset1) != UNSAFE.getByte(bytes2, baseOffset2)) {
+                return false;
+            }
+        }
+        return true;
     }
 
     static int equalsConstantTime(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {
