Here is a set of changes to introduce a per-executor task‚ÄêID generator (using an `AtomicLong` per executor) and remove the global `AtomicLong` in `ScheduledFutureTask`. This preserves thread safety for ID generation while eliminating the global contention hotspot.

```json
[
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java",
    "search": "import java.util.concurrent.TimeUnit;",
    "replace": "import java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicLong;"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java",
    "search": "PriorityQueue<ScheduledFutureTask<?>> scheduledTaskQueue;",
    "replace": "PriorityQueue<ScheduledFutureTask<?>> scheduledTaskQueue;\n    // Per-executor task id generator to reduce cross-executor contention\n    private final AtomicLong nextTaskId = new AtomicLong();\n\n    /** Return next task id for this executor. */\n    long nextTaskId() { return nextTaskId.getAndIncrement(); }"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java",
    "search": "import java.util.concurrent.atomic.AtomicLong;",
    "replace": ""
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java",
    "search": "private static final AtomicLong nextTaskId = new AtomicLong();",
    "replace": ""
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java",
    "search": "private final long id = nextTaskId.getAndIncrement();",
    "replace": "private final long id;"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java",
    "search": "super(executor, callable);\n        if (period == 0) {",
    "replace": "super(executor, callable);\n        // assign per-executor task id\n        id = executor.nextTaskId();\n        if (period == 0) {"
  },
  {
    "filepath": "../netty/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java",
    "search": "super(executor, callable);\n        deadlineNanos = nanoTime;",
    "replace": "super(executor, callable);\n        // assign per-executor task id\n        id = executor.nextTaskId();\n        deadlineNanos = nanoTime;"
  }
]
```