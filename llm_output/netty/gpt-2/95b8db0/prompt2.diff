diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java
index 01b747b3f2..9333c8dd16 100644
--- a/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java
+++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java
@@ -351,48 +351,25 @@ public class QueryStringDecoder {
             return s.substring(from, toExcluded);
         }
 
-        CharsetDecoder decoder = CharsetUtil.decoder(charset);
-
-        // Each encoded byte takes 3 characters (e.g. "%20")
-        int decodedCapacity = (toExcluded - firstEscaped) / 3;
-        ByteBuffer byteBuf = ByteBuffer.allocate(decodedCapacity);
-        CharBuffer charBuf = CharBuffer.allocate(decodedCapacity);
-
         StringBuilder strBuf = new StringBuilder(len);
         strBuf.append(s, from, firstEscaped);
-
-        for (int i = firstEscaped; i < toExcluded; i++) {
+        int i = firstEscaped;
+        while (i < toExcluded) {
             char c = s.charAt(i);
             if (c != '%') {
                 strBuf.append(c != '+' || isPath ? c : SPACE);
-                continue;
-            }
-
-            byteBuf.clear();
-            do {
-                if (i + 3 > toExcluded) {
-                    throw new IllegalArgumentException("unterminated escape sequence at index " + i + " of: " + s);
-                }
-                byteBuf.put(decodeHexByte(s, i + 1));
+                i++;
+            } else {
+                int start = i;
+                int maxBytes = (toExcluded - start) / 3;
+                byte[] bytes = new byte[maxBytes];
+                int bytesCount = 0;
+                while (i + 3 <= toExcluded && s.charAt(i) == '%') {
+                    bytes[bytesCount++] = decodeHexByte(s, i + 1);
                     i += 3;
-            } while (i < toExcluded && s.charAt(i) == '%');
-            i--;
-
-            byteBuf.flip();
-            charBuf.clear();
-            CoderResult result = decoder.reset().decode(byteBuf, charBuf, true);
-            try {
-                if (!result.isUnderflow()) {
-                    result.throwException();
-                }
-                result = decoder.flush(charBuf);
-                if (!result.isUnderflow()) {
-                    result.throwException();
                 }
-            } catch (CharacterCodingException ex) {
-                throw new IllegalStateException(ex);
+                strBuf.append(new String(bytes, 0, bytesCount, charset));
             }
-            strBuf.append(charBuf.flip());
         }
         return strBuf.toString();
     }
