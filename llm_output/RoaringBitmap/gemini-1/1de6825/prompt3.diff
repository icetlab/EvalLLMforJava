diff --git a/RoaringBitmap/src/main/java/org/roaringbitmap/art/Node16.java b/RoaringBitmap/src/main/java/org/roaringbitmap/art/Node16.java
index de6dddea..76e79e45 100644
--- a/RoaringBitmap/src/main/java/org/roaringbitmap/art/Node16.java
+++ b/RoaringBitmap/src/main/java/org/roaringbitmap/art/Node16.java
@@ -19,16 +19,14 @@ public class Node16 extends Node {
 
   @Override
   public int getChildPos(byte k) {
-    byte[] firstBytes = LongUtils.toBDBytes(firstV);
     if (count <= 8) {
-      return Node.binarySearch(firstBytes, 0, count, k);
+      return binarySearch(firstV, 0, count, k);
     } else {
-      int pos = Node.binarySearch(firstBytes, 0, 8, k);
+      int pos = binarySearch(firstV, 0, 8, k);
       if (pos != ILLEGAL_IDX) {
         return pos;
       } else {
-        byte[] secondBytes = LongUtils.toBDBytes(secondV);
-        pos = Node.binarySearch(secondBytes, 0, (count - 8), k);
+        pos = binarySearch(secondV, 0, (count - 8), k);
         if (pos != ILLEGAL_IDX) {
           return 8 + pos;
         } else {
@@ -40,21 +38,19 @@ public class Node16 extends Node {
 
   @Override
   public SearchResult getNearestChildPos(byte k) {
-    byte[] firstBytes = LongUtils.toBDBytes(firstV);
     if (count <= 8) {
-      return Node.binarySearchWithResult(firstBytes, 0, count, k);
+      return binarySearchWithResult(firstV, 0, count, k);
     } else {
-      SearchResult firstResult = Node.binarySearchWithResult(
-              firstBytes, 0, 8, k);
+      SearchResult firstResult = binarySearchWithResult(
+              firstV, 0, 8, k);
       // given the values are "in order" if we found a match or a value larger than
       // the target we are done.
       if (firstResult.outcome == SearchResult.Outcome.FOUND
               || firstResult.hasNextLargerPos()) {
         return firstResult;
       } else {
-        byte[] secondBytes = LongUtils.toBDBytes(secondV);
-        SearchResult secondResult = Node.binarySearchWithResult(
-                secondBytes, 0, (count - 8), k);
+        SearchResult secondResult = binarySearchWithResult(
+                secondV, 0, (count - 8), k);
 
         switch(secondResult.outcome) {
           case FOUND:
@@ -84,15 +80,11 @@ public class Node16 extends Node {
 
   @Override
   public byte getChildKey(int pos) {
-    int posInLong;
     if (pos <= 7) {
-      posInLong = pos;
-      byte[] firstBytes = LongUtils.toBDBytes(firstV);
-      return firstBytes[posInLong];
+      return (byte) (firstV >>> ((7 - pos) << 3));
     } else {
-      posInLong = pos - 8;
-      byte[] secondBytes = LongUtils.toBDBytes(secondV);
-      return secondBytes[posInLong];
+      int posInLong = pos - 8;
+      return (byte) (secondV >>> ((7 - posInLong) << 3));
     }
   }
 
@@ -148,7 +140,6 @@ public class Node16 extends Node {
       //first
       byte[] bytes = LongUtils.toBDBytes(currentNode16.firstV);
       bytes[currentNode16.count] = key;
-      currentNode16.firstV = LongUtils.fromBDBytes(bytes);
       currentNode16.children[currentNode16.count] = child;
       sortSmallByteArray(bytes, currentNode16.children, 0, currentNode16.count);
       currentNode16.count++;
@@ -168,17 +159,15 @@ public class Node16 extends Node {
       return currentNode16;
     } else {
       Node48 node48 = new Node48(currentNode16.prefixLength);
-      byte[] firtBytes = LongUtils.toBDBytes(currentNode16.firstV);
       for (int i = 0; i < 8; i++) {
-        byte v = firtBytes[i];
+        byte v = (byte) (currentNode16.firstV >>> ((7 - i) << 3));
         int unsignedIdx = Byte.toUnsignedInt(v);
         //i won't be beyond 48
         Node48.setOneByte(unsignedIdx, (byte) i, node48.childIndex);
         node48.children[i] = currentNode16.children[i];
       }
-      byte[] secondBytes = LongUtils.toBDBytes(currentNode16.secondV);
       for (int i = 8; i < currentNode16.count; i++) {
-        byte v = secondBytes[i - 8];
+        byte v = (byte) (currentNode16.secondV >>> ((7 - (i - 8)) << 3));
         int unsignedIdx = Byte.toUnsignedInt(v);
         //i won't be beyond 48
         Node48.setOneByte(unsignedIdx, (byte) i, node48.childIndex);
@@ -254,4 +243,48 @@ public class Node16 extends Node {
       offset++;
     }
   }
+
+  private static int binarySearch(long val, int from, int to, byte key) {
+    int low = from;
+    int high = to - 1;
+    int unsignedKey = Byte.toUnsignedInt(key);
+
+    while (low <= high) {
+      int mid = (low + high) >>> 1;
+      byte midVal = (byte) (val >>> ((7 - mid) << 3));
+      int unsignedMidVal = Byte.toUnsignedInt(midVal);
+
+      if (unsignedMidVal < unsignedKey) {
+        low = mid + 1;
+      } else if (unsignedMidVal > unsignedKey) {
+        high = mid - 1;
+      } else {
+        return mid;
+      }
+    }
+    return ILLEGAL_IDX;
+  }
+
+  private static SearchResult binarySearchWithResult(long val, int from, int to, byte key) {
+    int low = from;
+    int high = to - 1;
+    int unsignedKey = Byte.toUnsignedInt(key);
+
+    while (low <= high) {
+      int mid = (low + high) >>> 1;
+      byte midVal = (byte) (val >>> ((7 - mid) << 3));
+      int unsignedMidVal = Byte.toUnsignedInt(midVal);
+
+      if (unsignedMidVal < unsignedKey) {
+        low = mid + 1;
+      } else if (unsignedMidVal > unsignedKey) {
+        high = mid - 1;
+      } else {
+        return SearchResult.found(mid);
+      }
+    }
+    int nextLargerPos = low < to ? low : ILLEGAL_IDX;
+    int nextSmallerPos = high >= from ? high : ILLEGAL_IDX;
+    return SearchResult.notFound(nextSmallerPos, nextLargerPos);
+  }
 }
