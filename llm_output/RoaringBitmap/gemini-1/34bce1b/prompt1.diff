diff --git a/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java b/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
index ed36adf0..8367e59b 100644
--- a/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
+++ b/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
@@ -50,9 +50,23 @@ public class IntegerUtil {
    * @return a fresh integer value
    */
   public static int shiftLeftFromSpecifiedPosition(int v, int pos, int count) {
-    byte[] initialVal = toBDBytes(v);
-    System.arraycopy(initialVal, pos + 1, initialVal, pos, count);
-    return fromBDBytes(initialVal);
+    if (count == 0) {
+      return v;
+    }
+    // This bitwise implementation is a faster equivalent of the previous byte array-based one.
+    // It avoids object allocation. The original System.arraycopy implies pos + count <= 3.
+
+    long rawMask = (1L << (count * 8)) - 1;
+
+    // Mask for the source bytes to be shifted left. This is `count` bytes starting at `pos + 1`.
+    int sourceShift = (3 - pos - count) * 8;
+    int sourceMask = (int) (rawMask << sourceShift);
+
+    // The hole mask is the source mask shifted left by one byte.
+    int holeMask = sourceMask << 8;
+
+    // Clear the hole area, then OR with the shifted source bytes.
+    return (v & ~holeMask) | ((v & sourceMask) << 8);
   }
 
   /**
