diff --git a/bsi/src/main/java/org/roaringbitmap/bsi/buffer/BitSliceIndexBase.java b/bsi/src/main/java/org/roaringbitmap/bsi/buffer/BitSliceIndexBase.java
index c40c836b..79892c6c 100644
--- a/bsi/src/main/java/org/roaringbitmap/bsi/buffer/BitSliceIndexBase.java
+++ b/bsi/src/main/java/org/roaringbitmap/bsi/buffer/BitSliceIndexBase.java
@@ -318,14 +318,20 @@ public class BitSliceIndexBase {
     MutableRoaringBitmap F = ImmutableRoaringBitmap.or(G, E);
     long n = F.getLongCardinality() - k;
     if (n > 0) {
-      // TODO: make faster
+      // Faster removal of smallest n elements.
+      // This avoids creating a large temporary bitmap for the andNot operation.
+      final int limit;
+      if (n <= Integer.MAX_VALUE) { // select takes an int for rank
+        limit = F.select((int) (n - 1));
+      } else {
         IntIterator i = F.getIntIterator();
-      MutableRoaringBitmap turnoff = new MutableRoaringBitmap();
-      while (i.hasNext() && n > 0) {
-        turnoff.add(i.next());
-        --n;
+        for (long toSkip = n - 1; toSkip > 0; --toSkip) {
+          i.next();
+        }
+        limit = i.next();
       }
-      F.andNot(turnoff);
+      // remove all elements up to and including limit
+      F.remove((long) F.first(), (long) limit + 1);
     }
 
     if (F.getCardinality() != k)
