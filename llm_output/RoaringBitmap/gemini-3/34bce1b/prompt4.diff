diff --git a/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java b/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
index ed36adf0..819c08b4 100644
--- a/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
+++ b/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
@@ -50,9 +50,32 @@ public class IntegerUtil {
    * @return a fresh integer value
    */
   public static int shiftLeftFromSpecifiedPosition(int v, int pos, int count) {
-    byte[] initialVal = toBDBytes(v);
-    System.arraycopy(initialVal, pos + 1, initialVal, pos, count);
-    return fromBDBytes(initialVal);
+    if (count == 0) {
+      return v;
+    }
+
+    // This is a branch-free implementation which is faster than converting to a byte array.
+    // It handles all cases, including those where pos/count would be out of bounds
+    // for the original byte array implementation.
+
+    // Mask for bytes to be cleared (destination of shift)
+    int clear_start_bit = (4 - pos - count) * 8;
+    int clear_end_bit_exclusive = (4 - pos) * 8;
+    int upper_clear_mask = clear_end_bit_exclusive >= 32 ? -1 : ~(-1 << clear_end_bit_exclusive);
+    int clearMask = (clear_start_bit < 0 ? -1 : (-1 << clear_start_bit))
+        & upper_clear_mask;
+
+    // Mask for source bytes to be shifted
+    int source_start_bit = (3 - pos - count) * 8;
+    int source_end_bit_exclusive = (3 - pos) * 8;
+    int sourceMask = (source_start_bit < 0 ? -1 : (-1 << source_start_bit))
+        & ~(-1 << source_end_bit_exclusive);
+
+    int cleared_v = v & ~clearMask;
+    int sourcePart = v & sourceMask;
+    int shiftedSource = sourcePart << 8;
+
+    return cleared_v | shiftedSource;
   }
 
   /**
