diff --git a/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java b/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
index ed36adf0..611d90cd 100644
--- a/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
+++ b/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
@@ -50,9 +50,29 @@ public class IntegerUtil {
    * @return a fresh integer value
    */
   public static int shiftLeftFromSpecifiedPosition(int v, int pos, int count) {
-    byte[] initialVal = toBDBytes(v);
-    System.arraycopy(initialVal, pos + 1, initialVal, pos, count);
-    return fromBDBytes(initialVal);
+    if (count == 0) {
+      return v;
+    }
+    // This implementation uses bitwise operations to avoid object allocation
+    // and is based on the invariant that pos + count <= 3 from the original code.
+
+    // Mask for bytes 0 to pos-1.
+    int highMask = (pos == 0) ? 0 : (-1 << (32 - pos * 8));
+
+    int p = pos + count;
+    // Mask for bytes p to 3.
+    int lowMask = (1 << (32 - p * 8)) - 1;
+
+    // Mask for destination bytes pos to p-1.
+    int highMaskPosCount = -1 << (32 - p * 8);
+    int destMask = highMask ^ highMaskPosCount;
+
+    int vHigh = v & highMask;
+    int vLow = v & lowMask;
+    // Shift v left by one byte and apply destination mask.
+    int vMid = (v << 8) & destMask;
+
+    return vHigh | vLow | vMid;
   }
 
   /**
