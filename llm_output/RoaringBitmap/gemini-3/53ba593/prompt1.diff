diff --git a/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java b/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java
index 9ae064da..b0b038c0 100644
--- a/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java
+++ b/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java
@@ -433,7 +433,7 @@ public class RoaringBitmap implements Cloneable, Serializable, Iterable<Integer>
         final int nextPos1 = x1.highLowContainer.advanceUntil(s2, pos1);
         answer.highLowContainer.appendCopy(x1.highLowContainer, pos1, nextPos1);
         pos1 = nextPos1;
-      } else { 
+      } else { // s1 > s2
         pos2 = x2.highLowContainer.advanceUntil(s1, pos2);
       }
     }
@@ -809,42 +809,28 @@ public class RoaringBitmap implements Cloneable, Serializable, Iterable<Integer>
     final RoaringBitmap answer = new RoaringBitmap();
     int pos1 = 0, pos2 = 0;
     final int length1 = x1.highLowContainer.size(), length2 = x2.highLowContainer.size();
-    main: if (pos1 < length1 && pos2 < length2) {
-      char s1 = x1.highLowContainer.getKeyAtIndex(pos1);
-      char s2 = x2.highLowContainer.getKeyAtIndex(pos2);
-
-      while (true) {
+    while (pos1 < length1 && pos2 < length2) {
+      final char s1 = x1.highLowContainer.getKeyAtIndex(pos1);
+      final char s2 = x2.highLowContainer.getKeyAtIndex(pos2);
       if (s1 == s2) {
         answer.highLowContainer.append(s1, x1.highLowContainer.getContainerAtIndex(pos1)
             .or(x2.highLowContainer.getContainerAtIndex(pos2)));
         pos1++;
         pos2++;
-          if ((pos1 == length1) || (pos2 == length2)) {
-            break main;
-          }
-          s1 = x1.highLowContainer.getKeyAtIndex(pos1);
-          s2 = x2.highLowContainer.getKeyAtIndex(pos2);
       } else if (s1 < s2) {
-          answer.highLowContainer.appendCopy(x1.highLowContainer, pos1);
-          pos1++;
-          if (pos1 == length1) {
-            break main;
-          }
-          s1 = x1.highLowContainer.getKeyAtIndex(pos1);
-        } else { 
-          answer.highLowContainer.appendCopy(x2.highLowContainer, pos2);
-          pos2++;
-          if (pos2 == length2) {
-            break main;
-          }
-          s2 = x2.highLowContainer.getKeyAtIndex(pos2);
-        }
+        int nextPos1 = x1.highLowContainer.advanceUntil(s2, pos1);
+        answer.highLowContainer.appendCopy(x1.highLowContainer, pos1, nextPos1);
+        pos1 = nextPos1;
+      } else { // s1 > s2
+        int nextPos2 = x2.highLowContainer.advanceUntil(s1, pos2);
+        answer.highLowContainer.appendCopy(x2.highLowContainer, pos2, nextPos2);
+        pos2 = nextPos2;
       }
     }
-    if (pos1 == length1) {
-      answer.highLowContainer.appendCopy(x2.highLowContainer, pos2, length2);
-    } else if (pos2 == length2) {
+    if (pos1 < length1) {
       answer.highLowContainer.appendCopy(x1.highLowContainer, pos1, length1);
+    } else if (pos2 < length2) {
+      answer.highLowContainer.appendCopy(x2.highLowContainer, pos2, length2);
     }
     return answer;
   }
@@ -910,14 +896,9 @@ public class RoaringBitmap implements Cloneable, Serializable, Iterable<Integer>
         ++pos1;
         ++pos2;
       } else if (s1 < s2) {
-        while (s1 < s2 && pos1 < length1) {
+        int nextPos1 = x1.highLowContainer.advanceUntil(s2, pos1);
+        for (; pos1 < nextPos1; ++pos1) {
           cardinality += x1.highLowContainer.getContainerAtIndex(pos1).getCardinality();
-          ++pos1;
-          // If executed in the last digit, the array will be out of bounds
-          if (pos1 == length1) {
-            break;
-          }
-          s1 = x1.highLowContainer.getKeyAtIndex(pos1);
         }
       } else {
         pos2 = x2.highLowContainer.advanceUntil(s1, pos2);
@@ -1021,11 +1002,9 @@ public class RoaringBitmap implements Cloneable, Serializable, Iterable<Integer>
     int pos1 = 0, pos2 = 0;
     final int length1 = x1.highLowContainer.size(), length2 = x2.highLowContainer.size();
 
-    main: if (pos1 < length1 && pos2 < length2) {
-      char s1 = x1.highLowContainer.getKeyAtIndex(pos1);
-      char s2 = x2.highLowContainer.getKeyAtIndex(pos2);
-
-      while (true) {
+    while (pos1 < length1 && pos2 < length2) {
+      final char s1 = x1.highLowContainer.getKeyAtIndex(pos1);
+      final char s2 = x2.highLowContainer.getKeyAtIndex(pos2);
       if (s1 == s2) {
         final Container c = x1.highLowContainer.getContainerAtIndex(pos1)
             .xor(x2.highLowContainer.getContainerAtIndex(pos2));
@@ -1034,32 +1013,20 @@ public class RoaringBitmap implements Cloneable, Serializable, Iterable<Integer>
         }
         pos1++;
         pos2++;
-          if ((pos1 == length1) || (pos2 == length2)) {
-            break main;
-          }
-          s1 = x1.highLowContainer.getKeyAtIndex(pos1);
-          s2 = x2.highLowContainer.getKeyAtIndex(pos2);
       } else if (s1 < s2) {
-          answer.highLowContainer.appendCopy(x1.highLowContainer, pos1);
-          pos1++;
-          if (pos1 == length1) {
-            break main;
-          }
-          s1 = x1.highLowContainer.getKeyAtIndex(pos1);
-        } else { 
-          answer.highLowContainer.appendCopy(x2.highLowContainer, pos2);
-          pos2++;
-          if (pos2 == length2) {
-            break main;
-          }
-          s2 = x2.highLowContainer.getKeyAtIndex(pos2);
-        }
+        int nextPos1 = x1.highLowContainer.advanceUntil(s2, pos1);
+        answer.highLowContainer.appendCopy(x1.highLowContainer, pos1, nextPos1);
+        pos1 = nextPos1;
+      } else { // s1 > s2
+        int nextPos2 = x2.highLowContainer.advanceUntil(s1, pos2);
+        answer.highLowContainer.appendCopy(x2.highLowContainer, pos2, nextPos2);
+        pos2 = nextPos2;
       }
     }
-    if (pos1 == length1) {
-      answer.highLowContainer.appendCopy(x2.highLowContainer, pos2, length2);
-    } else if (pos2 == length2) {
+    if (pos1 < length1) {
       answer.highLowContainer.appendCopy(x1.highLowContainer, pos1, length1);
+    } else if (pos2 < length2) {
+      answer.highLowContainer.appendCopy(x2.highLowContainer, pos2, length2);
     }
 
     return answer;
@@ -2718,10 +2685,10 @@ public class RoaringBitmap implements Cloneable, Serializable, Iterable<Integer>
         }
         ++pos1;
         ++pos2;
-      } else if (s1 - s2 > 0) {
+      } else if (s1 > s2) { // s1 > s2
         return false;
-      } else {
-        pos1 = subset.highLowContainer.advanceUntil(s2, pos1);
+      } else { // s1 < s2
+        pos1 = this.highLowContainer.advanceUntil(s2, pos1);
       }
     }
     return pos2 == length2;
diff --git a/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java b/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java
index fb9e35b4..bd2db35b 100644
--- a/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java
+++ b/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java
@@ -565,44 +565,28 @@ public class MutableRoaringBitmap extends ImmutableRoaringBitmap
     final MutableRoaringBitmap answer = new MutableRoaringBitmap();
     int pos1 = 0, pos2 = 0;
     final int length1 = x1.highLowContainer.size(), length2 = x2.highLowContainer.size();
-    main: if (pos1 < length1 && pos2 < length2) {
-      char s1 = x1.highLowContainer.getKeyAtIndex(pos1);
-      char s2 = x2.highLowContainer.getKeyAtIndex(pos2);
-
-      while (true) {
+    while (pos1 < length1 && pos2 < length2) {
+      final char s1 = x1.highLowContainer.getKeyAtIndex(pos1);
+      final char s2 = x2.highLowContainer.getKeyAtIndex(pos2);
       if (s1 == s2) {
         answer.getMappeableRoaringArray().append(s1, x1.highLowContainer.getContainerAtIndex(pos1)
             .or(x2.highLowContainer.getContainerAtIndex(pos2)));
         pos1++;
         pos2++;
-          if ((pos1 == length1) || (pos2 == length2)) {
-            break main;
-          }
-          s1 = x1.highLowContainer.getKeyAtIndex(pos1);
-          s2 = x2.highLowContainer.getKeyAtIndex(pos2);
       } else if (s1 < s2) {
-          answer.getMappeableRoaringArray().appendCopy(x1.highLowContainer.getKeyAtIndex(pos1),
-              x1.highLowContainer.getContainerAtIndex(pos1));
-          pos1++;
-          if (pos1 == length1) {
-            break main;
-          }
-          s1 = x1.highLowContainer.getKeyAtIndex(pos1);
+        int nextPos1 = x1.highLowContainer.advanceUntil(s2, pos1);
+        answer.getMappeableRoaringArray().appendCopy(x1.highLowContainer, pos1, nextPos1);
+        pos1 = nextPos1;
       } else { // s1 > s2
-          answer.getMappeableRoaringArray().appendCopy(x2.highLowContainer.getKeyAtIndex(pos2),
-              x2.highLowContainer.getContainerAtIndex(pos2));
-          pos2++;
-          if (pos2 == length2) {
-            break main;
-          }
-          s2 = x2.highLowContainer.getKeyAtIndex(pos2);
-        }
+        int nextPos2 = x2.highLowContainer.advanceUntil(s1, pos2);
+        answer.getMappeableRoaringArray().appendCopy(x2.highLowContainer, pos2, nextPos2);
+        pos2 = nextPos2;
       }
     }
-    if (pos1 == length1) {
-      answer.getMappeableRoaringArray().appendCopy(x2.highLowContainer, pos2, length2);
-    } else if (pos2 == length2) {
+    if (pos1 < length1) {
       answer.getMappeableRoaringArray().appendCopy(x1.highLowContainer, pos1, length1);
+    } else if (pos2 < length2) {
+      answer.getMappeableRoaringArray().appendCopy(x2.highLowContainer, pos2, length2);
     }
     return answer;
   }
@@ -698,11 +682,9 @@ public class MutableRoaringBitmap extends ImmutableRoaringBitmap
     int pos1 = 0, pos2 = 0;
     final int length1 = x1.highLowContainer.size(), length2 = x2.highLowContainer.size();
 
-    main: if (pos1 < length1 && pos2 < length2) {
-      char s1 = x1.highLowContainer.getKeyAtIndex(pos1);
-      char s2 = x2.highLowContainer.getKeyAtIndex(pos2);
-
-      while (true) {
+    while (pos1 < length1 && pos2 < length2) {
+      final char s1 = x1.highLowContainer.getKeyAtIndex(pos1);
+      final char s2 = x2.highLowContainer.getKeyAtIndex(pos2);
       if (s1 == s2) {
         final MappeableContainer c = x1.highLowContainer.getContainerAtIndex(pos1)
             .xor(x2.highLowContainer.getContainerAtIndex(pos2));
@@ -711,34 +693,20 @@ public class MutableRoaringBitmap extends ImmutableRoaringBitmap
         }
         pos1++;
         pos2++;
-          if ((pos1 == length1) || (pos2 == length2)) {
-            break main;
-          }
-          s1 = x1.highLowContainer.getKeyAtIndex(pos1);
-          s2 = x2.highLowContainer.getKeyAtIndex(pos2);
       } else if (s1 < s2) {
-          answer.getMappeableRoaringArray().appendCopy(x1.highLowContainer.getKeyAtIndex(pos1),
-              x1.highLowContainer.getContainerAtIndex(pos1));
-          pos1++;
-          if (pos1 == length1) {
-            break main;
-          }
-          s1 = x1.highLowContainer.getKeyAtIndex(pos1);
-        } else if (s1 - s2 > 0) {
-          answer.getMappeableRoaringArray().appendCopy(x2.highLowContainer.getKeyAtIndex(pos2),
-              x2.highLowContainer.getContainerAtIndex(pos2));
-          pos2++;
-          if (pos2 == length2) {
-            break main;
-          }
-          s2 = x2.highLowContainer.getKeyAtIndex(pos2);
-        }
+        int nextPos1 = x1.highLowContainer.advanceUntil(s2, pos1);
+        answer.getMappeableRoaringArray().appendCopy(x1.highLowContainer, pos1, nextPos1);
+        pos1 = nextPos1;
+      } else { // s1 > s2
+        int nextPos2 = x2.highLowContainer.advanceUntil(s1, pos2);
+        answer.getMappeableRoaringArray().appendCopy(x2.highLowContainer, pos2, nextPos2);
+        pos2 = nextPos2;
       }
     }
-    if (pos1 == length1) {
-      answer.getMappeableRoaringArray().appendCopy(x2.highLowContainer, pos2, length2);
-    } else if (pos2 == length2) {
+    if (pos1 < length1) {
       answer.getMappeableRoaringArray().appendCopy(x1.highLowContainer, pos1, length1);
+    } else if (pos2 < length2) {
+      answer.getMappeableRoaringArray().appendCopy(x2.highLowContainer, pos2, length2);
     }
     return answer;
   }
