diff --git a/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java b/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java
index 9ae064da..e44c810b 100644
--- a/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java
+++ b/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java
@@ -2706,6 +2706,9 @@ public class RoaringBitmap implements Cloneable, Serializable, Iterable<Integer>
   public boolean contains(RoaringBitmap subset) {
     final int length1 = this.highLowContainer.size;
     final int length2 = subset.highLowContainer.size;
+    if (length1 < length2) {
+      return false;
+    }
     int pos1 = 0, pos2 = 0;
     while (pos1 < length1 && pos2 < length2) {
       final char s1 = this.highLowContainer.getKeyAtIndex(pos1);
@@ -2713,15 +2716,15 @@ public class RoaringBitmap implements Cloneable, Serializable, Iterable<Integer>
       if (s1 == s2) {
         Container c1 = this.highLowContainer.getContainerAtIndex(pos1);
         Container c2 = subset.highLowContainer.getContainerAtIndex(pos2);
-        if(!c1.contains(c2)) {
+        if (!c1.isFull() && !c1.contains(c2)) {
           return false;
         }
         ++pos1;
         ++pos2;
-      } else if (s1 - s2 > 0) {
+      } else if (s1 > s2) {
         return false;
       } else {
-        pos1 = subset.highLowContainer.advanceUntil(s2, pos1);
+        pos1 = this.highLowContainer.advanceUntil(s2, pos1);
       }
     }
     return pos2 == length2;
diff --git a/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java b/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java
index fb9e35b4..b4f571f9 100644
--- a/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java
+++ b/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java
@@ -1563,6 +1563,38 @@ public class MutableRoaringBitmap extends ImmutableRoaringBitmap
     return answer;
   }
 
+  /**
+   * Checks whether the parameter is a subset of this RoaringBitmap or not
+   * @param subset the potential subset
+   * @return true if the parameter is a subset of this RoaringBitmap
+   */
+  public boolean contains(ImmutableRoaringBitmap subset) {
+    final int length1 = this.highLowContainer.size();
+    final int length2 = subset.highLowContainer.size();
+    if (length1 < length2) {
+      return false;
+    }
+    int pos1 = 0, pos2 = 0;
+    while (pos1 < length1 && pos2 < length2) {
+      final char s1 = this.highLowContainer.getKeyAtIndex(pos1);
+      final char s2 = subset.highLowContainer.getKeyAtIndex(pos2);
+      if (s1 == s2) {
+        MappeableContainer c1 = this.highLowContainer.getContainerAtIndex(pos1);
+        MappeableContainer c2 = subset.highLowContainer.getContainerAtIndex(pos2);
+        if (!c1.isFull() && !c1.contains(c2)) {
+          return false;
+        }
+        ++pos1;
+        ++pos2;
+      } else if (s1 > s2) {
+        return false;
+      } else { // s1 < s2
+        pos1 = this.highLowContainer.advanceUntil(s2, pos1);
+      }
+    }
+    return pos2 == length2;
+  }
+
   /**
    * Convenience method, effectively casts the object to an object of class ImmutableRoaringBitmap.
    *
