diff --git a/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java b/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java
index 9ae064da..46691444 100644
--- a/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java
+++ b/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java
@@ -1561,19 +1561,16 @@ public class RoaringBitmap implements Cloneable, Serializable, Iterable<Integer>
     if (i >= 0) {
       Container c = highLowContainer.getContainerAtIndex(i);
       int oldCard = c.getCardinality();
-      // we need to keep the newContainer if a switch between containers type
-      // occur, in order to get the new cardinality
       Container newCont = c.add(Util.lowbits(x));
+      if (newCont != c) {
         highLowContainer.setContainerAtIndex(i, newCont);
-      if (newCont.getCardinality() > oldCard) {
-        return true;
       }
+      return newCont.getCardinality() > oldCard;
     } else {
       final ArrayContainer newac = new ArrayContainer();
       highLowContainer.insertNewKeyValueAt(-i - 1, hb, newac.add(Util.lowbits(x)));
       return true;
     }
-    return false;
   }
 
   /**
@@ -2718,10 +2715,10 @@ public class RoaringBitmap implements Cloneable, Serializable, Iterable<Integer>
         }
         ++pos1;
         ++pos2;
-      } else if (s1 - s2 > 0) {
+      } else if (s1 > s2) {
         return false;
-      } else {
-        pos1 = subset.highLowContainer.advanceUntil(s2, pos1);
+      } else { // s1 < s2
+        pos1 = this.highLowContainer.advanceUntil(s2, pos1);
       }
     }
     return pos2 == length2;
diff --git a/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java b/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java
index fb9e35b4..ab4adfff 100644
--- a/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java
+++ b/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java
@@ -1021,11 +1021,13 @@ public class MutableRoaringBitmap extends ImmutableRoaringBitmap
     final char hb = BufferUtil.highbits(x);
     final int i = highLowContainer.getIndex(hb);
     if (i >= 0) {
-      MappeableContainer C = highLowContainer.getContainerAtIndex(i);
-      int oldcard = C.getCardinality();
-      C = C.add(BufferUtil.lowbits(x));
-      getMappeableRoaringArray().setContainerAtIndex(i, C);
-      return C.getCardinality() > oldcard;
+      MappeableContainer c = highLowContainer.getContainerAtIndex(i);
+      int oldcard = c.getCardinality();
+      MappeableContainer newCont = c.add(BufferUtil.lowbits(x));
+      if (newCont != c) {
+        getMappeableRoaringArray().setContainerAtIndex(i, newCont);
+      }
+      return newCont.getCardinality() > oldcard;
     } else {
       final MappeableArrayContainer newac = new MappeableArrayContainer();
       getMappeableRoaringArray().insertNewKeyValueAt(-i - 1, hb, newac.add(BufferUtil.lowbits(x)));
