diff --git a/bsi/src/main/java/org/roaringbitmap/bsi/buffer/BitSliceIndexBase.java b/bsi/src/main/java/org/roaringbitmap/bsi/buffer/BitSliceIndexBase.java
index c40c836b..6bd1f8ed 100644
--- a/bsi/src/main/java/org/roaringbitmap/bsi/buffer/BitSliceIndexBase.java
+++ b/bsi/src/main/java/org/roaringbitmap/bsi/buffer/BitSliceIndexBase.java
@@ -318,14 +318,14 @@ public class BitSliceIndexBase {
     MutableRoaringBitmap F = ImmutableRoaringBitmap.or(G, E);
     long n = F.getLongCardinality() - k;
     if (n > 0) {
-      // TODO: make faster
-      IntIterator i = F.getIntIterator();
-      MutableRoaringBitmap turnoff = new MutableRoaringBitmap();
-      while (i.hasNext() && n > 0) {
-        turnoff.add(i.next());
-        --n;
-      }
-      F.andNot(turnoff);
+      if (n >= F.getLongCardinality()) {
+        F.clear();
+      } else {
+        // This is much faster than iterating and creating a new bitmap.
+        // It is correct as long as n fits in an int, which is the common case.
+        int limit = F.select((int) (n - 1));
+        F.remove((long) F.first(), (long) limit + 1);
+      }
     }
 
     if (F.getCardinality() != k)
