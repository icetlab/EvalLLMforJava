diff --git a/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java b/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
index ed36adf0..d7daed9e 100644
--- a/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
+++ b/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java
@@ -50,9 +50,27 @@ public class IntegerUtil {
    * @return a fresh integer value
    */
   public static int shiftLeftFromSpecifiedPosition(int v, int pos, int count) {
-    byte[] initialVal = toBDBytes(v);
-    System.arraycopy(initialVal, pos + 1, initialVal, pos, count);
-    return fromBDBytes(initialVal);
+    // The original implementation's use of System.arraycopy implies bounds checks.
+    // For a byte[4] array, this means pos >= 0, count >= 0, and pos + count <= 3.
+    if (pos < 0 || count < 0 || pos + count > 3) {
+      throw new IndexOutOfBoundsException();
+    }
+
+    if (count == 0) {
+      return v;
+    }
+
+    // Create a mask for the bytes that will be replaced (from pos to pos+count-1).
+    long replaceMaskLong = ((1L << (count * 8)) - 1) << ((4 - pos - count) * 8);
+    int replaceMask = (int) replaceMaskLong;
+
+    // The source mask can be derived by shifting the replace mask.
+    int sourceMask = (int) (replaceMaskLong >>> 8);
+
+    int clearedV = v & ~replaceMask;
+    int shiftedSourcePart = (v & sourceMask) << 8;
+
+    return clearedV | shiftedSourcePart;
   }
 
   /**
