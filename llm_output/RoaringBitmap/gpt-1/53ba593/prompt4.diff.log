I added an early `contains` check in both `checkedAdd` methods to skip expensive cardinality calls when the element is already present, and updated the subsequent `add` to reuse the computed low bits. These are localized edits preserving existing control flow.

```json
[
  {
    "filepath": "../RoaringBitmap/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java",
    "search": "Container c = highLowContainer.getContainerAtIndex(i);\n      int oldCard = c.getCardinality();",
    "replace": "Container c = highLowContainer.getContainerAtIndex(i);\n      char lb = Util.lowbits(x);\n      if (c.contains(lb)) {\n        return false;\n      }\n      int oldCard = c.getCardinality();"
  },
  {
    "filepath": "../RoaringBitmap/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java",
    "search": "Container newCont = c.add(Util.lowbits(x));",
    "replace": "Container newCont = c.add(lb);"
  },
  {
    "filepath": "../RoaringBitmap/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java",
    "search": "MappeableContainer C = highLowContainer.getContainerAtIndex(i);\n      int oldcard = C.getCardinality();",
    "replace": "MappeableContainer C = highLowContainer.getContainerAtIndex(i);\n      char lb = BufferUtil.lowbits(x);\n      if (C.contains(lb)) {\n        return false;\n      }\n      int oldcard = C.getCardinality();"
  },
  {
    "filepath": "../RoaringBitmap/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java",
    "search": "C = C.add(BufferUtil.lowbits(x));",
    "replace": "C = C.add(lb);"
  }
]
```