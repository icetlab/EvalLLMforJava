diff --git a/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java b/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java
index 9ae064da..b76acd6b 100644
--- a/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java
+++ b/RoaringBitmap/src/main/java/org/roaringbitmap/RoaringBitmap.java
@@ -1560,10 +1560,14 @@ public class RoaringBitmap implements Cloneable, Serializable, Iterable<Integer>
     final int i = highLowContainer.getIndex(hb);
     if (i >= 0) {
       Container c = highLowContainer.getContainerAtIndex(i);
+      char lb = Util.lowbits(x);
+      if (c.contains(lb)) {
+        return false;
+      }
       int oldCard = c.getCardinality();
       // we need to keep the newContainer if a switch between containers type
       // occur, in order to get the new cardinality
-      Container newCont = c.add(Util.lowbits(x));
+      Container newCont = c.add(lb);
       highLowContainer.setContainerAtIndex(i, newCont);
       if (newCont.getCardinality() > oldCard) {
         return true;
diff --git a/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java b/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java
index fb9e35b4..749b8e21 100644
--- a/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java
+++ b/RoaringBitmap/src/main/java/org/roaringbitmap/buffer/MutableRoaringBitmap.java
@@ -1022,8 +1022,12 @@ public class MutableRoaringBitmap extends ImmutableRoaringBitmap
     final int i = highLowContainer.getIndex(hb);
     if (i >= 0) {
       MappeableContainer C = highLowContainer.getContainerAtIndex(i);
+      char lb = BufferUtil.lowbits(x);
+      if (C.contains(lb)) {
+        return false;
+      }
       int oldcard = C.getCardinality();
-      C = C.add(BufferUtil.lowbits(x));
+      C = C.add(lb);
       getMappeableRoaringArray().setContainerAtIndex(i, C);
       return C.getCardinality() > oldcard;
     } else {
