The updated implementation of `shiftLeftFromSpecifiedPosition` avoids byte‐array allocations and copy operations by performing direct bit‐wise manipulation in a simple loop, significantly reducing garbage and improving throughput.

```json
[
  {
    "filepath": "../RoaringBitmap/RoaringBitmap/src/main/java/org/roaringbitmap/longlong/IntegerUtil.java",
    "search": "  public static int shiftLeftFromSpecifiedPosition(int v, int pos, int count) {\n    byte[] initialVal = toBDBytes(v);\n    System.arraycopy(initialVal, pos + 1, initialVal, pos, count);\n    return fromBDBytes(initialVal);\n  }",
    "replace": "  public static int shiftLeftFromSpecifiedPosition(int v, int pos, int count) {\n    int result = v;\n    for (int i = 0; i < count; i++) {\n      int srcPos = pos + 1 + i;\n      int dstPos = pos + i;\n      int byteVal = (v >> ((3 - srcPos) * 8)) & 0xFF;\n      result = (result & ~(0xFF << ((3 - dstPos) * 8))) | (byteVal << ((3 - dstPos) * 8));\n    }\n    return result;\n  }"
  }
]
```