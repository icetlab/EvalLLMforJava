diff --git a/bsi/src/main/java/org/roaringbitmap/bsi/buffer/BitSliceIndexBase.java b/bsi/src/main/java/org/roaringbitmap/bsi/buffer/BitSliceIndexBase.java
index c40c836b..979357ba 100644
--- a/bsi/src/main/java/org/roaringbitmap/bsi/buffer/BitSliceIndexBase.java
+++ b/bsi/src/main/java/org/roaringbitmap/bsi/buffer/BitSliceIndexBase.java
@@ -318,13 +318,7 @@ public class BitSliceIndexBase {
     MutableRoaringBitmap F = ImmutableRoaringBitmap.or(G, E);
     long n = F.getLongCardinality() - k;
     if (n > 0) {
-      // TODO: make faster
-      IntIterator i = F.getIntIterator();
-      MutableRoaringBitmap turnoff = new MutableRoaringBitmap();
-      while (i.hasNext() && n > 0) {
-        turnoff.add(i.next());
-        --n;
-      }
+      MutableRoaringBitmap turnoff = F.limit((int) n);
       F.andNot(turnoff);
     }
 
@@ -518,9 +512,10 @@ public class BitSliceIndexBase {
     }
     long count = foundSet.getLongCardinality();
 
-    Long sum = IntStream.range(0, this.bitCount())
-        .mapToLong(x -> (long) (1 << x) * ImmutableRoaringBitmap.andCardinality(this.bA[x], foundSet))
-        .sum();
+    long sum = 0L;
+for (int x = 0; x < this.bitCount(); x++) {
+    sum += (1L << x) * ImmutableRoaringBitmap.andCardinality(this.bA[x], foundSet);
+}
 
     return Pair.newPair(sum, count);
   }
