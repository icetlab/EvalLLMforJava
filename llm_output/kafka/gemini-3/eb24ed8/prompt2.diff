diff --git a/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java b/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java
index 352d12d834..976c25a52d 100644
--- a/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java
+++ b/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java
@@ -119,7 +119,11 @@ public enum CompressionType {
         @Override
         public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {
             try {
-                return (OutputStream) ZstdConstructors.OUTPUT.invoke(buffer);
+                // To ensure reasonable performance in cases where the caller passes a small number of bytes to write
+                // (potentially a single byte), we need to buffer the data before writing it to the Zstd JNI.
+                // The Zstd JNI is more efficient if the writes of uncompressed data are flushed in large pieces
+                // rather than for each byte.
+                return new BufferedOutputStream((OutputStream) ZstdConstructors.OUTPUT.invoke(buffer), 16 * 1024);
             } catch (Throwable e) {
                 throw new KafkaException(e);
             }
@@ -128,7 +132,11 @@ public enum CompressionType {
         @Override
         public InputStream wrapForInput(ByteBuffer buffer, byte messageVersion, BufferSupplier decompressionBufferSupplier) {
             try {
-                return (InputStream) ZstdConstructors.INPUT.invoke(new ByteBufferInputStream(buffer));
+                // To ensure reasonable performance in cases where the caller reads a small number of bytes
+                // (potentially a single byte), we need to buffer the data read from the Zstd JNI.
+                // The Zstd JNI is more efficient if the reads of uncompressed data are flushed in large pieces
+                // rather than for each byte.
+                return new BufferedInputStream((InputStream) ZstdConstructors.INPUT.invoke(new ByteBufferInputStream(buffer)), 16 * 1024);
             } catch (Throwable e) {
                 throw new KafkaException(e);
             }
