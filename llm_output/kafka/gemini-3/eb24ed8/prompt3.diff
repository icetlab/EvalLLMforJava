diff --git a/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java b/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java
index 352d12d834..6f0ea20b40 100644
--- a/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java
+++ b/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java
@@ -166,37 +166,39 @@ public enum CompressionType {
      */
     public abstract InputStream wrapForInput(ByteBuffer buffer, byte messageVersion, BufferSupplier decompressionBufferSupplier);
 
+    private static final CompressionType[] ID_TO_TYPE;
+    private static final java.util.Map<String, CompressionType> NAME_TO_TYPE;
+
+    static {
+        CompressionType[] allTypes = values();
+        int maxId = -1;
+        for (CompressionType type : allTypes) {
+            maxId = Math.max(maxId, type.id);
+        }
+
+        ID_TO_TYPE = new CompressionType[maxId + 1];
+        java.util.Map<String, CompressionType> nameToType = new java.util.HashMap<>();
+        for (CompressionType type : allTypes) {
+            ID_TO_TYPE[type.id] = type;
+            nameToType.put(type.name, type);
+        }
+        NAME_TO_TYPE = java.util.Collections.unmodifiableMap(nameToType);
+    }
+
     public static CompressionType forId(int id) {
-        switch (id) {
-            case 0:
-                return NONE;
-            case 1:
-                return GZIP;
-            case 2:
-                return SNAPPY;
-            case 3:
-                return LZ4;
-            case 4:
-                return ZSTD;
-            default:
+        if (id < 0 || id >= ID_TO_TYPE.length || ID_TO_TYPE[id] == null) {
             throw new IllegalArgumentException("Unknown compression type id: " + id);
         }
+        return ID_TO_TYPE[id];
     }
 
     public static CompressionType forName(String name) {
-        if (NONE.name.equals(name))
-            return NONE;
-        else if (GZIP.name.equals(name))
-            return GZIP;
-        else if (SNAPPY.name.equals(name))
-            return SNAPPY;
-        else if (LZ4.name.equals(name))
-            return LZ4;
-        else if (ZSTD.name.equals(name))
-            return ZSTD;
-        else
+        CompressionType type = NAME_TO_TYPE.get(name);
+        if (type == null) {
             throw new IllegalArgumentException("Unknown compression name: " + name);
         }
+        return type;
+    }
 
     // We should only have a runtime dependency on compression algorithms in case the native libraries don't support
     // some platforms.
