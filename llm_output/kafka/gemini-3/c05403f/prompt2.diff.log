The performance issue is that the `sizeOfUnsignedVarint` and `sizeOfVarlong` methods in `ByteUtils.java` use iterative `while` loops to calculate the size of variable-length encoded integers. These loops can be replaced with a series of `if-else` checks, which is generally more performant as it avoids looping and branching on every 7-bit chunk. This pattern is common in high-performance serialization libraries like Protocol Buffers.

I will replace the `while` loops in both `sizeOfUnsignedVarint` and `sizeOfVarlong` with equivalent but faster conditional checks. This change preserves the logic while improving execution speed by eliminating loop overhead.

```json
[
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/utils/ByteUtils.java",
    "search": "    public static int sizeOfUnsignedVarint(int value) {\n        int bytes = 1;\n        while ((value & 0xffffff80) != 0L) {\n            bytes += 1;\n            value >>>= 7;\n        }\n        return bytes;\n    }",
    "replace": "    public static int sizeOfUnsignedVarint(int value) {\n        if ((value & 0xffffff80) == 0) {\n            return 1;\n        } else if ((value & 0xffffc000) == 0) {\n            return 2;\n        } else if ((value & 0xffe00000) == 0) {\n            return 3;\n        } else if ((value & 0xf0000000) == 0) {\n            return 4;\n        } else {\n            return 5;\n        }\n    }"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/utils/ByteUtils.java",
    "search": "    public static int sizeOfVarlong(long value) {\n        long v = (value << 1) ^ (value >> 63);\n        int bytes = 1;\n        while ((v & 0xffffffffffffff80L) != 0L) {\n            bytes += 1;\n            v >>>= 7;\n        }\n        return bytes;\n    }",
    "replace": "    public static int sizeOfVarlong(long value) {\n        long v = (value << 1) ^ (value >> 63);\n        if ((v & 0xffffffffffffff80L) == 0L) {\n            return 1;\n        } else if ((v & 0xffffffffffffc000L) == 0L) {\n            return 2;\n        } else if ((v & 0xffffffffffe00000L) == 0L) {\n            return 3;\n        } else if ((v & 0xfffffffff0000000L) == 0L) {\n            return 4;\n        } else if ((v & 0xfffffff800000000L) == 0L) {\n            return 5;\n        } else if ((v & 0xfffffc0000000000L) == 0L) {\n            return 6;\n        } else if ((v & 0xfffe000000000000L) == 0L) {\n            return 7;\n        } else if ((v & 0xff00000000000000L) == 0L) {\n            return 8;\n        } else if ((v & 0x8000000000000000L) == 0L) {\n            return 9;\n        } else {\n            return 10;\n        }\n    }"
  }
]
```