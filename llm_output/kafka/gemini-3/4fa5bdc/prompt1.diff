diff --git a/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala b/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
index 58860be864..2d8d6f5387 100644
--- a/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
+++ b/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
@@ -58,12 +58,15 @@ object AclAuthorizer {
   // If set to true when no acls are found for a resource, authorizer allows access to everyone. Defaults to false.
   val AllowEveryoneIfNoAclIsFoundProp = "allow.everyone.if.no.acl.found"
 
+  private val DescribeOps = Set[AclOperation](DESCRIBE, READ, WRITE, DELETE, ALTER)
+  private val DescribeConfigsOps = Set[AclOperation](DESCRIBE_CONFIGS, ALTER_CONFIGS)
+
   case class VersionedAcls(acls: Set[AclEntry], zkVersion: Int) {
     def exists: Boolean = zkVersion != ZkVersion.UnknownVersion
   }
 
-  class AclSets(sets: Set[AclEntry]*) {
-    def find(p: AclEntry => Boolean): Option[AclEntry] = sets.flatMap(_.find(p)).headOption
+  class AclSets(sets: Iterable[AclEntry]*) {
+    def find(p: AclEntry => Boolean): Option[AclEntry] = sets.view.flatMap(_.find(p)).headOption
     def isEmpty: Boolean = !sets.exists(_.nonEmpty)
   }
 
@@ -312,12 +315,11 @@ class AclAuthorizer extends Authorizer with Logging {
       // Check if there are any Allow ACLs which would allow this operation.
       // Allowing read, write, delete, or alter implies allowing describe.
       // See #{org.apache.kafka.common.acl.AclOperation} for more details about ACL inheritance.
-      val allowOps = operation match {
-        case DESCRIBE => Set[AclOperation](DESCRIBE, READ, WRITE, DELETE, ALTER)
-        case DESCRIBE_CONFIGS => Set[AclOperation](DESCRIBE_CONFIGS, ALTER_CONFIGS)
-        case _ => Set[AclOperation](operation)
+      operation match {
+        case DESCRIBE => AclAuthorizer.DescribeOps.exists(op => matchingAclExists(op, resource, principal, host, ALLOW, acls))
+        case DESCRIBE_CONFIGS => AclAuthorizer.DescribeConfigsOps.exists(op => matchingAclExists(op, resource, principal, host, ALLOW, acls))
+        case _ => matchingAclExists(operation, resource, principal, host, ALLOW, acls)
       }
-      allowOps.exists(operation => matchingAclExists(operation, resource, principal, host, ALLOW, acls))
     }
 
     def aclsAllowAccess = {
@@ -358,7 +360,6 @@ class AclAuthorizer extends Authorizer with Logging {
       .filterKeys(resource => resourceName.startsWith(resource.name))
       .values
       .flatMap { _.acls }
-      .toSet
 
     new AclSets(prefixed, wildcard, literal)
   }
