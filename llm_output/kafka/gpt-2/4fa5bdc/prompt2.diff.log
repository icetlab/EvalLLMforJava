The changes below replace the AclSets.find and isEmpty implementations to use simple imperative loops instead of Scala collection operations that allocate intermediate collections. This eliminates the flatMap and headOption allocations on each ACL check, improving hot‐path performance without altering behavior.

```json
[
  {
    "filepath": "../kafka/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala",
    "search": "class AclSets(sets: Set[AclEntry]*) {\n    def find(p: AclEntry => Boolean): Option[AclEntry] = sets.flatMap(_.find(p)).headOption\n    def isEmpty: Boolean = !sets.exists(_.nonEmpty)\n  }",
    "replace": "class AclSets(sets: Set[AclEntry]*) {\n    def find(p: AclEntry => Boolean): Option[AclEntry] = {\n      for (s <- sets; acl <- s) {\n        if (p(acl)) return Some(acl)\n      }\n      None\n    }\n    def isEmpty: Boolean = {\n      for (s <- sets) {\n        if (s.nonEmpty) return false\n      }\n      true\n    }\n  }"
  }
]
```