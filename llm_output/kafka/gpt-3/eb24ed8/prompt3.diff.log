I have optimized the `forId` and `forName` methods to use O(1) lookups via a precomputed array and map, improving performance and reducing branching. 

```json
[
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java",
    "search": "};\n\n    public final int id;",
    "replace": "};\n\n    private static final CompressionType[] BY_ID;\n    private static final java.util.Map<String, CompressionType> BY_NAME;\n\n    static {\n        CompressionType[] types = values();\n        BY_ID = new CompressionType[types.length];\n        BY_NAME = new java.util.HashMap<>(types.length);\n        for (CompressionType type : types) {\n            BY_ID[type.id] = type;\n            BY_NAME.put(type.name, type);\n        }\n    }\n\n    public final int id;"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java",
    "search": "public static CompressionType forId(int id) {\n        switch (id) {\n            case 0:\n                return NONE;\n            case 1:\n                return GZIP;\n            case 2:\n                return SNAPPY;\n            case 3:\n                return LZ4;\n            case 4:\n                return ZSTD;\n            default:\n                throw new IllegalArgumentException(\"Unknown compression type id: \" + id);\n        }\n    }",
    "replace": "public static CompressionType forId(int id) {\n        if (id < 0 || id >= BY_ID.length || BY_ID[id] == null) {\n            throw new IllegalArgumentException(\"Unknown compression type id: \" + id);\n        }\n        return BY_ID[id];\n    }"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java",
    "search": "public static CompressionType forName(String name) {\n        if (NONE.name.equals(name))\n            return NONE;\n        else if (GZIP.name.equals(name))\n            return GZIP;\n        else if (SNAPPY.name.equals(name))\n            return SNAPPY;\n        else if (LZ4.name.equals(name))\n            return LZ4;\n        else if (ZSTD.name.equals(name))\n            return ZSTD;\n        else\n            throw new IllegalArgumentException(\"Unknown compression name: \" + name);\n    }",
    "replace": "public static CompressionType forName(String name) {\n        CompressionType type = BY_NAME.get(name);\n        if (type == null) {\n            throw new IllegalArgumentException(\"Unknown compression name: \" + name);\n        }\n        return type;\n    }"
  }
]
```