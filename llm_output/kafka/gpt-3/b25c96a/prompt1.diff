diff --git a/storage/src/main/java/org/apache/kafka/storage/internals/log/ProducerStateManager.java b/storage/src/main/java/org/apache/kafka/storage/internals/log/ProducerStateManager.java
index 6bcafd2d60..9e50b31dce 100644
--- a/storage/src/main/java/org/apache/kafka/storage/internals/log/ProducerStateManager.java
+++ b/storage/src/main/java/org/apache/kafka/storage/internals/log/ProducerStateManager.java
@@ -177,7 +177,10 @@ public class ProducerStateManager {
     }
 
     private void removeProducerIds(List<Long> keys) {
-        producers.keySet().removeAll(keys);
+        // Remove each producer ID individually to avoid bulk keySet removal overhead
+        for (Long key : keys) {
+            producers.remove(key);
+        }
         producerIdCount = producers.size();
     }
 
@@ -369,17 +372,24 @@ public class ProducerStateManager {
      * Also expire any verification state entries that are lingering as unverified.
      */
     public void removeExpiredProducers(long currentTimeMs) {
-        List<Long> keys = producers.entrySet().stream()
-                .filter(entry -> isProducerExpired(currentTimeMs, entry.getValue()))
-                .map(Map.Entry::getKey)
-                .collect(Collectors.toList());
-        removeProducerIds(keys);
-
-        List<Long> verificationKeys = verificationStates.entrySet().stream()
-                .filter(entry -> currentTimeMs - entry.getValue().timestamp() >= producerStateManagerConfig.producerIdExpirationMs())
-                .map(Map.Entry::getKey)
-                .collect(Collectors.toList());
-        verificationKeys.forEach(verificationStates::remove);
+        // Remove expired producer entries in-place to avoid stream allocations
+        Iterator<Map.Entry<Long, ProducerStateEntry>> producerIter = producers.entrySet().iterator();
+        while (producerIter.hasNext()) {
+            Map.Entry<Long, ProducerStateEntry> entry = producerIter.next();
+            if (isProducerExpired(currentTimeMs, entry.getValue())) {
+                producerIter.remove();
+            }
+        }
+        producerIdCount = producers.size();
+
+        // Remove expired verification state entries in-place
+        Iterator<Map.Entry<Long, VerificationStateEntry>> verIter = verificationStates.entrySet().iterator();
+        while (verIter.hasNext()) {
+            Map.Entry<Long, VerificationStateEntry> entry = verIter.next();
+            if (currentTimeMs - entry.getValue().timestamp() >= producerStateManagerConfig.producerIdExpirationMs()) {
+                verIter.remove();
+            }
+        }
     }
 
     /**
