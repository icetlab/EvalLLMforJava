diff --git a/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/ReplaceField.java b/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/ReplaceField.java
index fb02577e99..05ce9fde16 100644
--- a/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/ReplaceField.java
+++ b/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/ReplaceField.java
@@ -35,6 +35,8 @@ import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
+import java.util.HashSet;
 
 import static org.apache.kafka.connect.transforms.util.Requirements.requireMap;
 import static org.apache.kafka.connect.transforms.util.Requirements.requireStruct;
@@ -82,6 +84,8 @@ public abstract class ReplaceField<R extends ConnectRecord<R>> implements Transf
 
     private List<String> exclude;
     private List<String> include;
+    private Set<String> excludeSet;
+    private Set<String> includeSet;
     private Map<String, String> renames;
     private Map<String, String> reverseRenames;
 
@@ -100,6 +104,8 @@ public abstract class ReplaceField<R extends ConnectRecord<R>> implements Transf
         reverseRenames = invert(renames);
 
         schemaUpdateCache = new SynchronizedCache<>(new LRUCache<>(16));
+        excludeSet = new HashSet<>(exclude);
+        includeSet = new HashSet<>(include);
     }
 
     static Map<String, String> parseRenameMappings(List<String> mappings) {
@@ -123,7 +129,7 @@ public abstract class ReplaceField<R extends ConnectRecord<R>> implements Transf
     }
 
     boolean filter(String fieldName) {
-        return !exclude.contains(fieldName) && (include.isEmpty() || include.contains(fieldName));
+        return !excludeSet.contains(fieldName) && (includeSet.isEmpty() || includeSet.contains(fieldName));
     }
 
     String renamed(String fieldName) {
