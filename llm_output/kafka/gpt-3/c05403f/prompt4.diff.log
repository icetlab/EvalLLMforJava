The loop-based implementations of sizeOfUnsignedVarint and sizeOfVarlong have been replaced with bit-twiddling formulas using leading-zero counts to compute the needed byte lengths in constant time, reducing branching and improving performance.

```json
[
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/utils/ByteUtils.java",
    "search": "public static int sizeOfUnsignedVarint(int value) {\n        int bytes = 1;\n        while ((value & 0xffffff80) != 0L) {\n            bytes += 1;\n            value >>>= 7;\n        }\n        return bytes;\n    }",
    "replace": "public static int sizeOfUnsignedVarint(int value) {\n        if (value == 0) {\n            return 1;\n        }\n        int highestBit = 32 - Integer.numberOfLeadingZeros(value);\n        int bytes = (highestBit + 6) / 7;\n        return bytes;\n    }"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/utils/ByteUtils.java",
    "search": "public static int sizeOfVarlong(long value) {\n        long v = (value << 1) ^ (value >> 63);\n        int bytes = 1;\n        while ((v & 0xffffffffffffff80L) != 0L) {\n            bytes += 1;\n            v >>>= 7;\n        }\n        return bytes;\n    }",
    "replace": "public static int sizeOfVarlong(long value) {\n        long v = (value << 1) ^ (value >> 63);\n        if (v == 0L) {\n            return 1;\n        }\n        int highestBit = 64 - Long.numberOfLeadingZeros(v);\n        return (highestBit + 6) / 7;\n    }"
  }
]
```