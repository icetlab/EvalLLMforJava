I have replaced the loop-based implementations of `sizeOfUnsignedVarint` and `sizeOfVarlong` with constant-time bit-operation formulas, reducing branch overhead while preserving correctness and test compatibility.

```json
[
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/utils/ByteUtils.java",
    "search": "public static int sizeOfUnsignedVarint(int value) {\n        int bytes = 1;\n        while ((value & 0xffffff80) != 0L) {\n            bytes += 1;\n            value >>>= 7;\n        }\n        return bytes;\n    }",
    "replace": "public static int sizeOfUnsignedVarint(int value) {\n        // Use bit operations to compute size without loop for performance\n        return (32 - Integer.numberOfLeadingZeros(value | 1) + 6) / 7;\n    }"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/utils/ByteUtils.java",
    "search": "public static int sizeOfVarlong(long value) {\n        long v = (value << 1) ^ (value >> 63);\n        int bytes = 1;\n        while ((v & 0xffffffffffffff80L) != 0L) {\n            bytes += 1;\n            v >>>= 7;\n        }\n        return bytes;\n    }",
    "replace": "public static int sizeOfVarlong(long value) {\n        // Use bit operations to compute size without loop for performance\n        long v = (value << 1) ^ (value >> 63);\n        return (64 - Long.numberOfLeadingZeros(v | 1) + 6) / 7;\n    }"
  }
]
```