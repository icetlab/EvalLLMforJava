Iâ€™ve optimized `PartitionStates` to avoid unnecessary `updateSize()` calls by checking if the map actually changed size before updating the volatile `size` field. This reduces overhead when moving or touching existing entries.

```json
[
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/internals/PartitionStates.java",
    "search": "public void updateAndMoveToEnd(TopicPartition topicPartition, S state) {\n        map.remove(topicPartition);\n        map.put(topicPartition, state);\n        updateSize();\n    }",
    "replace": "public void updateAndMoveToEnd(TopicPartition topicPartition, S state) {\n        S prev = map.remove(topicPartition);\n        map.put(topicPartition, state);\n        if (prev == null)\n            updateSize();\n    }"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/internals/PartitionStates.java",
    "search": "public void remove(TopicPartition topicPartition) {\n        map.remove(topicPartition);\n        updateSize();\n    }",
    "replace": "public void remove(TopicPartition topicPartition) {\n        if (map.remove(topicPartition) != null)\n            updateSize();\n    }"
  }
]
```