I’ve added a thread-local scratch buffer to batch-copy direct ByteBuffers into a byte array and then call the bulk `checksum.update(byte[],…)` method instead of invoking `checksum.update(byte)` per byte. This reduces JNI crossings and boosts throughput, while preserving the buffer’s position and ensuring all tests still pass.

```json
[
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java",
    "search": "private Checksums() {\n    }",
    "replace": "private Checksums() {\n    }\n\n    // Thread-local buffer for bulk reads of direct ByteBuffers\n    private static final ThreadLocal<byte[]> TEMP_BUFFER = ThreadLocal.withInitial(() -> new byte[4096]);"
  },
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java",
    "search": "public static void update(Checksum checksum, ByteBuffer buffer, int offset, int length) {\n        if (buffer.hasArray()) {\n            checksum.update(buffer.array(), buffer.position() + buffer.arrayOffset() + offset, length);\n        } else {\n            int start = buffer.position() + offset;\n            for (int i = start; i < start + length; i++)\n                checksum.update(buffer.get(i));\n        }\n    }",
    "replace": "public static void update(Checksum checksum, ByteBuffer buffer, int offset, int length) {\n        if (buffer.hasArray()) {\n            checksum.update(buffer.array(), buffer.position() + buffer.arrayOffset() + offset, length);\n        } else {\n            int start = buffer.position() + offset;\n            // Bulk-copy direct buffer into thread-local byte[] to avoid per-byte JNI calls\n            ByteBuffer duplicate = buffer.duplicate();\n            duplicate.position(start);\n            duplicate.limit(start + length);\n            byte[] tmp = TEMP_BUFFER.get();\n            if (tmp.length < length) {\n                tmp = new byte[length];\n                TEMP_BUFFER.set(tmp);\n            }\n            duplicate.get(tmp, 0, length);\n            checksum.update(tmp, 0, length);\n        }\n    }"
  }
]
```