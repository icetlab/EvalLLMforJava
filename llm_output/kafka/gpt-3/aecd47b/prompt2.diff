diff --git a/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java b/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java
index 679b59249d..8fe8be9f50 100644
--- a/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java
+++ b/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java
@@ -18,6 +18,8 @@ package org.apache.kafka.common.utils;
 
 import java.nio.ByteBuffer;
 import java.util.zip.Checksum;
+import java.lang.reflect.Method;
+import java.lang.reflect.InvocationTargetException;
 
 /**
  * Utility methods for `Checksum` instances.
@@ -33,6 +35,18 @@ public final class Checksums {
     private Checksums() {
     }
 
+    private static final Method UPDATE_BYTE_BUFFER_METHOD;
+
+    static {
+        Method method = null;
+        try {
+            method = Checksum.class.getMethod("update", ByteBuffer.class);
+        } catch (NoSuchMethodException e) {
+            // method not available
+        }
+        UPDATE_BYTE_BUFFER_METHOD = method;
+    }
+
     public static void update(Checksum checksum, ByteBuffer buffer, int length) {
         update(checksum, buffer, 0, length);
     }
@@ -41,11 +55,23 @@ public final class Checksums {
         if (buffer.hasArray()) {
             checksum.update(buffer.array(), buffer.position() + buffer.arrayOffset() + offset, length);
         } else {
+            if (UPDATE_BYTE_BUFFER_METHOD != null) {
+                try {
+                    ByteBuffer duplicate = buffer.duplicate();
+                    duplicate.position(buffer.position() + offset);
+                    duplicate.limit(buffer.position() + offset + length);
+                    UPDATE_BYTE_BUFFER_METHOD.invoke(checksum, duplicate);
+                    return;
+                } catch (IllegalAccessException | InvocationTargetException e) {
+                    // fallback to byte-by-byte
+                }
+            }
             int start = buffer.position() + offset;
-            for (int i = start; i < start + length; i++)
+            for (int i = start; i < start + length; i++) {
                 checksum.update(buffer.get(i));
             }
         }
+    }
     
     public static void updateInt(Checksum checksum, int input) {
         checksum.update((byte) (input >> 24));
