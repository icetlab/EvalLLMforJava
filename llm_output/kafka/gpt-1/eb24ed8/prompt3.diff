diff --git a/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java b/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java
index 352d12d834..282604ab6a 100644
--- a/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java
+++ b/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java
@@ -30,6 +30,9 @@ import java.lang.invoke.MethodType;
 import java.nio.ByteBuffer;
 import java.util.zip.GZIPInputStream;
 import java.util.zip.GZIPOutputStream;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.Collections;
 
 /**
  * The compression type to use
@@ -135,6 +138,20 @@ public enum CompressionType {
         }
     };
 
+    private static final CompressionType[] ID_MAP;
+    private static final Map<String, CompressionType> NAME_MAP;
+
+    static {
+        CompressionType[] types = values();
+        ID_MAP = new CompressionType[types.length];
+        Map<String, CompressionType> nameMap = new HashMap<>();
+        for (CompressionType type : types) {
+            ID_MAP[type.id] = type;
+            nameMap.put(type.name, type);
+        }
+        NAME_MAP = Collections.unmodifiableMap(nameMap);
+    }
+
     public final int id;
     public final String name;
     public final float rate;
@@ -167,36 +184,20 @@ public enum CompressionType {
     public abstract InputStream wrapForInput(ByteBuffer buffer, byte messageVersion, BufferSupplier decompressionBufferSupplier);
 
     public static CompressionType forId(int id) {
-        switch (id) {
-            case 0:
-                return NONE;
-            case 1:
-                return GZIP;
-            case 2:
-                return SNAPPY;
-            case 3:
-                return LZ4;
-            case 4:
-                return ZSTD;
-            default:
+        if (id >= 0 && id < ID_MAP.length) {
+            return ID_MAP[id];
+        } else {
             throw new IllegalArgumentException("Unknown compression type id: " + id);
         }
     }
 
     public static CompressionType forName(String name) {
-        if (NONE.name.equals(name))
-            return NONE;
-        else if (GZIP.name.equals(name))
-            return GZIP;
-        else if (SNAPPY.name.equals(name))
-            return SNAPPY;
-        else if (LZ4.name.equals(name))
-            return LZ4;
-        else if (ZSTD.name.equals(name))
-            return ZSTD;
-        else
+        CompressionType type = NAME_MAP.get(name);
+        if (type == null) {
             throw new IllegalArgumentException("Unknown compression name: " + name);
         }
+        return type;
+    }
 
     // We should only have a runtime dependency on compression algorithms in case the native libraries don't support
     // some platforms.
