diff --git a/core/src/main/scala/kafka/log/LogManager.scala b/core/src/main/scala/kafka/log/LogManager.scala
index fc1e7195d7..875dc8fb04 100755
--- a/core/src/main/scala/kafka/log/LogManager.scala
+++ b/core/src/main/scala/kafka/log/LogManager.scala
@@ -568,10 +568,15 @@ class LogManager(logDirs: Seq[File],
    * to avoid recovering the whole log on startup.
    */
   def checkpointLogRecoveryOffsets(): Unit = {
-    logsByDir.foreach { case (dir, partitionToLogMap) =>
-      liveLogDirs.find(_.getAbsolutePath.equals(dir)).foreach { f =>
-        checkpointRecoveryOffsetsAndCleanSnapshot(f, partitionToLogMap.values.toSeq)
-      }
+    for {
+      dir <- liveLogDirs
+      checkpoint <- recoveryPointCheckpoints.get(dir)
+    } {
+      // collect all logs in this directory without materializing the full logsByDir map
+      val logsInDir = (currentLogs.iterator ++ futureLogs.iterator).collect {
+        case (_, log) if log.parentDir == dir.getAbsolutePath => log
+      }.toSeq
+      checkpointRecoveryOffsetsAndCleanSnapshot(dir, logsInDir)
     }
   }
 
@@ -580,7 +585,23 @@ class LogManager(logDirs: Seq[File],
    * to avoid exposing data that have been deleted by DeleteRecordsRequest
    */
   def checkpointLogStartOffsets(): Unit = {
-    liveLogDirs.foreach(checkpointLogStartOffsetsInDir)
+    for {
+      dir <- liveLogDirs
+      checkpoint <- logStartOffsetCheckpoints.get(dir)
+    } {
+      // collect start offsets directly without grouping all logs
+      val startOffsets = (currentLogs.iterator ++ futureLogs.iterator).collect {
+        case (tp, log) if log.parentDir == dir.getAbsolutePath && log.logStartOffset > log.logSegments.head.baseOffset =>
+          tp -> log.logStartOffset
+      }.toMap
+      try {
+        checkpoint.write(startOffsets)
+      } catch {
+        case e: IOException =>
+          logDirFailureChannel.maybeAddOfflineLogDir(dir.getAbsolutePath,
+            s"Disk error while writing to logStartOffset file in directory $dir", e)
+      }
+    }
   }
 
   /**
@@ -602,11 +623,12 @@ class LogManager(logDirs: Seq[File],
   }
 
   private def checkpointLogRecoveryOffsetsInDir(dir: File): Unit = {
-    for {
-      partitionToLog <- logsByDir.get(dir.getAbsolutePath)
-      checkpoint <- recoveryPointCheckpoints.get(dir)
-    } {
-      checkpoint.write(partitionToLog.map { case (tp, log) => tp -> log.recoveryPoint })
+    // write recovery points by directly filtering the pools
+    for (checkpoint <- recoveryPointCheckpoints.get(dir)) {
+      val recoveryPoints = (currentLogs.iterator ++ futureLogs.iterator).collect {
+        case (tp, log) if log.parentDir == dir.getAbsolutePath => tp -> log.recoveryPoint
+      }.toMap
+      checkpoint.write(recoveryPoints)
     }
   }
 
@@ -614,18 +636,18 @@ class LogManager(logDirs: Seq[File],
    * Checkpoint log start offset for all logs in provided directory.
    */
   private def checkpointLogStartOffsetsInDir(dir: File): Unit = {
-    for {
-      partitionToLog <- logsByDir.get(dir.getAbsolutePath)
-      checkpoint <- logStartOffsetCheckpoints.get(dir)
-    } {
+    // write start offsets by scanning pools directly
+    for (checkpoint <- logStartOffsetCheckpoints.get(dir)) {
       try {
-        val logStartOffsets = partitionToLog.collect {
-          case (k, log) if log.logStartOffset > log.logSegments.head.baseOffset => k -> log.logStartOffset
-        }
-        checkpoint.write(logStartOffsets)
+        val startOffsets = (currentLogs.iterator ++ futureLogs.iterator).collect {
+          case (tp, log) if log.parentDir == dir.getAbsolutePath && log.logStartOffset > log.logSegments.head.baseOffset =>
+            tp -> log.logStartOffset
+        }.toMap
+        checkpoint.write(startOffsets)
       } catch {
         case e: IOException =>
-          logDirFailureChannel.maybeAddOfflineLogDir(dir.getAbsolutePath, s"Disk error while writing to logStartOffset file in directory $dir", e)
+          logDirFailureChannel.maybeAddOfflineLogDir(dir.getAbsolutePath,
+            s"Disk error while writing to logStartOffset file in directory $dir", e)
       }
     }
   }
