diff --git a/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java b/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java
index 352d12d834..16f7af3036 100644
--- a/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java
+++ b/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java
@@ -119,7 +119,9 @@ public enum CompressionType {
         @Override
         public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {
             try {
-                return (OutputStream) ZstdConstructors.OUTPUT.invoke(buffer);
+                // Zstd-jni's ZstdOutputStream doesn't buffer writes well, so we wrap it in a
+                // BufferedOutputStream to avoid expensive JNI calls for every byte written.
+                return new BufferedOutputStream((OutputStream) ZstdConstructors.OUTPUT.invoke(buffer), 16 * 1024);
             } catch (Throwable e) {
                 throw new KafkaException(e);
             }
@@ -128,7 +130,10 @@ public enum CompressionType {
         @Override
         public InputStream wrapForInput(ByteBuffer buffer, byte messageVersion, BufferSupplier decompressionBufferSupplier) {
             try {
-                return (InputStream) ZstdConstructors.INPUT.invoke(new ByteBufferInputStream(buffer));
+                // Zstd-jni's ZstdInputStream doesn't buffer reads well, so we wrap it in a
+                // BufferedInputStream to avoid expensive JNI calls for every byte read.
+                return new BufferedInputStream((InputStream) ZstdConstructors.INPUT.invoke(new ByteBufferInputStream(buffer)),
+                        16 * 1024);
             } catch (Throwable e) {
                 throw new KafkaException(e);
             }
