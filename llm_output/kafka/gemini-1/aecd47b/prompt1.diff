diff --git a/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java b/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java
index 679b59249d..a4e3b2a37d 100644
--- a/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java
+++ b/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java
@@ -41,27 +41,39 @@ public final class Checksums {
         if (buffer.hasArray()) {
             checksum.update(buffer.array(), buffer.position() + buffer.arrayOffset() + offset, length);
         } else {
-            int start = buffer.position() + offset;
-            for (int i = start; i < start + length; i++)
-                checksum.update(buffer.get(i));
+            int originalPosition = buffer.position();
+            buffer.position(originalPosition + offset);
+
+            int remaining = length;
+            byte[] chunk = ThreadLocalChunk.CHUNK.get();
+            while (remaining > 0) {
+                int toRead = Math.min(remaining, chunk.length);
+                buffer.get(chunk, 0, toRead);
+                checksum.update(chunk, 0, toRead);
+                remaining -= toRead;
+            }
+
+            buffer.position(originalPosition);
+        }
     }
+
+    private static class ThreadLocalChunk {
+        private static final ThreadLocal<byte[]> CHUNK = ThreadLocal.withInitial(() -> new byte[8192]);
+    }
+    
+    private static class ThreadLocalBuffers {
+        private static final ThreadLocal<ByteBuffer> BYTE_BUFFER = ThreadLocal.withInitial(() -> ByteBuffer.allocate(8));
     }
 
     public static void updateInt(Checksum checksum, int input) {
-        checksum.update((byte) (input >> 24));
-        checksum.update((byte) (input >> 16));
-        checksum.update((byte) (input >> 8));
-        checksum.update((byte) input /* >> 0 */);
+        ByteBuffer buffer = ThreadLocalBuffers.BYTE_BUFFER.get();
+        buffer.putInt(0, input);
+        checksum.update(buffer.array(), 0, 4);
     }
 
     public static void updateLong(Checksum checksum, long input) {
-        checksum.update((byte) (input >> 56));
-        checksum.update((byte) (input >> 48));
-        checksum.update((byte) (input >> 40));
-        checksum.update((byte) (input >> 32));
-        checksum.update((byte) (input >> 24));
-        checksum.update((byte) (input >> 16));
-        checksum.update((byte) (input >> 8));
-        checksum.update((byte) input /* >> 0 */);
+        ByteBuffer buffer = ThreadLocalBuffers.BYTE_BUFFER.get();
+        buffer.putLong(0, input);
+        checksum.update(buffer.array(), 0, 8);
     }
 }
