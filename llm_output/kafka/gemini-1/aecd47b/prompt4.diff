diff --git a/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java b/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java
index 679b59249d..7c1b201555 100644
--- a/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java
+++ b/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java
@@ -16,6 +16,8 @@
  */
 package org.apache.kafka.common.utils;
 
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.nio.ByteBuffer;
 import java.util.zip.Checksum;
 
@@ -30,6 +32,20 @@ import java.util.zip.Checksum;
  */
 public final class Checksums {
 
+    private static final Method CHECKSUM_UPDATE_METHOD = getChecksumUpdateMethod();
+
+    private static Method getChecksumUpdateMethod() {
+        if (Java.IS_JAVA9_COMPATIBLE) {
+            try {
+                return Checksum.class.getMethod("update", ByteBuffer.class);
+            } catch (NoSuchMethodException e) {
+                // Should not happen on Java 9+
+                throw new RuntimeException("Unable to find Checksum.update(ByteBuffer) method", e);
+            }
+        }
+        return null;
+    }
+
     private Checksums() {
     }
 
@@ -40,12 +56,28 @@ public final class Checksums {
     public static void update(Checksum checksum, ByteBuffer buffer, int offset, int length) {
         if (buffer.hasArray()) {
             checksum.update(buffer.array(), buffer.position() + buffer.arrayOffset() + offset, length);
+        } else {
+            if (CHECKSUM_UPDATE_METHOD != null) {
+                int originalPosition = buffer.position();
+                try {
+                    // Create a slice of the buffer. This allows us to checksum a sub-range of the buffer without
+                    // modifying the buffer's own position and limit.
+                    buffer.position(originalPosition + offset);
+                    ByteBuffer slice = buffer.slice();
+                    slice.limit(length);
+                    CHECKSUM_UPDATE_METHOD.invoke(checksum, slice);
+                } catch (IllegalAccessException | InvocationTargetException e) {
+                    throw new RuntimeException("Unable to invoke Checksum.update(ByteBuffer) method", e);
+                } finally {
+                    buffer.position(originalPosition);
+                }
             } else {
                 int start = buffer.position() + offset;
                 for (int i = start; i < start + length; i++)
                     checksum.update(buffer.get(i));
             }
         }
+    }
     
     public static void updateInt(Checksum checksum, int input) {
         checksum.update((byte) (input >> 24));
