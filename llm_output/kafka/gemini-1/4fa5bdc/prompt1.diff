diff --git a/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala b/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
index 58860be864..8166230a59 100644
--- a/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
+++ b/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
@@ -63,7 +63,7 @@ object AclAuthorizer {
   }
 
   class AclSets(sets: Set[AclEntry]*) {
-    def find(p: AclEntry => Boolean): Option[AclEntry] = sets.flatMap(_.find(p)).headOption
+    def find(p: AclEntry => Boolean): Option[AclEntry] = sets.view.flatMap(_.find(p)).headOption
     def isEmpty: Boolean = !sets.exists(_.nonEmpty)
   }
 
@@ -222,7 +222,7 @@ class AclAuthorizer extends Authorizer with Logging {
     val filters = aclBindingFilters.asScala.zipWithIndex
     lock synchronized {
       // Find all potentially matching resource patterns from the provided filters and ACL cache and apply the filters
-      val resources = aclCache.keys ++ filters.map(_._1.patternFilter).filter(_.matchesAtMostOne).flatMap(filterToResources)
+      val resources = (aclCache.keys.view ++ filters.view.map(_._1.patternFilter).filter(_.matchesAtMostOne).flatMap(filterToResources)).toSet
       val resourcesToUpdate = resources.map { resource =>
         val matchingFilters = filters.filter { case (filter, _) =>
           filter.patternFilter.matches(resource)
@@ -312,12 +312,21 @@ class AclAuthorizer extends Authorizer with Logging {
       // Check if there are any Allow ACLs which would allow this operation.
       // Allowing read, write, delete, or alter implies allowing describe.
       // See #{org.apache.kafka.common.acl.AclOperation} for more details about ACL inheritance.
-      val allowOps = operation match {
-        case DESCRIBE => Set[AclOperation](DESCRIBE, READ, WRITE, DELETE, ALTER)
-        case DESCRIBE_CONFIGS => Set[AclOperation](DESCRIBE_CONFIGS, ALTER_CONFIGS)
-        case _ => Set[AclOperation](operation)
+      if (matchingAclExists(operation, resource, principal, host, ALLOW, acls)) {
+        true
+      } else {
+        operation match {
+          case DESCRIBE =>
+            matchingAclExists(READ, resource, principal, host, ALLOW, acls) ||
+            matchingAclExists(WRITE, resource, principal, host, ALLOW, acls) ||
+            matchingAclExists(DELETE, resource, principal, host, ALLOW, acls) ||
+            matchingAclExists(ALTER, resource, principal, host, ALLOW, acls)
+          case DESCRIBE_CONFIGS =>
+            matchingAclExists(ALTER_CONFIGS, resource, principal, host, ALLOW, acls)
+          case _ =>
+            false
+        }
       }
-      allowOps.exists(operation => matchingAclExists(operation, resource, principal, host, ALLOW, acls))
     }
 
     def aclsAllowAccess = {
