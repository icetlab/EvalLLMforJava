The performance issue is that `Partition.makeFollower()` can be blocked by ongoing log appends on a follower replica. This is because `makeFollower()` acquires a write lock on `leaderIsrUpdateLock`, while `doAppendRecordsToFollowerOrFutureReplica()` (which handles appends on followers) acquires a read lock on the same lock.

The read lock in `doAppendRecordsToFollowerOrFutureReplica` is primarily to synchronize with `maybeReplaceCurrentWithFutureReplica`, which is part of the "alter log dirs" feature. This feature allows moving a replica's log directory. During a critical phase of this process, log appends and truncations to the replica must be paused.

To resolve this contention, I will introduce a new `ReentrantReadWriteLock` called `futureLogLock`. This lock will be used specifically to protect the current log from modifications (append, truncate) while `maybeReplaceCurrentWithFutureReplica` is executing.

The changes are as follows:
1.  A new `futureLogLock` is added to the `Partition` class.
2.  `maybeReplaceCurrentWithFutureReplica` will now acquire a write lock on `futureLogLock` to pause modifications to the current log. It will still need to acquire a write lock on `leaderIsrUpdateLock` for operations on the future log.
3.  Methods that modify the current log on a follower (`doAppendRecordsToFollowerOrFutureReplica`, `truncateTo`, `truncateFullyAndStartAt` when `isFuture` is false) will now acquire a read lock on the new `futureLogLock` instead of `leaderIsrUpdateLock`.

This change decouples the locking for local replica appends from the `leaderIsrUpdateLock`, thus preventing `makeFollower()` calls from being blocked by follower appends and addressing the described performance issue.

```json
[
  {
    "filepath": "../kafka/core/src/main/scala/kafka/cluster/Partition.scala",
    "search": "  // The read lock is only required when multiple reads are executed and needs to be in a consistent manner\n  private val leaderIsrUpdateLock = new ReentrantReadWriteLock\n  private var zkVersion: Int = LeaderAndIsr.initialZKVersion",
    "replace": "  // The read lock is only required when multiple reads are executed and needs to be in a consistent manner\n  private val leaderIsrUpdateLock = new ReentrantReadWriteLock\n  private val futureLogLock = new ReentrantReadWriteLock\n  private var zkVersion: Int = LeaderAndIsr.initialZKVersion"
  },
  {
    "filepath": "../kafka/core/src/main/scala/kafka/cluster/Partition.scala",
    "search": "      // The write lock is needed to make sure that while ReplicaAlterDirThread checks the LEO of the\n      // current replica, no other thread can update LEO of the current replica via log truncation or log append operation.\n      inWriteLock(leaderIsrUpdateLock) {\n        futureLog match {\n          case Some(futurePartitionLog) =>\n            if (log.exists(_.logEndOffset == futurePartitionLog.logEndOffset)) {\n              logManager.replaceCurrentWithFutureLog(topicPartition)\n              log = futureLog\n              removeFutureLocalReplica(false)\n              true\n            } else false\n          case None =>\n            // Future replica is removed by a non-ReplicaAlterLogDirsThread before this method is called\n            // In this case the partition should have been removed from state of the ReplicaAlterLogDirsThread\n            // Return false so that ReplicaAlterLogDirsThread does not have to remove this partition from the\n            // state again to avoid race condition\n            false\n        }\n      }",
    "replace": "      // The write lock is needed to make sure that while ReplicaAlterDirThread checks the LEO of the\n      // current replica, no other thread can update LEO of the current replica via log truncation or log append operation.\n      inWriteLock(futureLogLock) {\n        inWriteLock(leaderIsrUpdateLock) {\n          futureLog match {\n            case Some(futurePartitionLog) =>\n              if (log.exists(_.logEndOffset == futurePartitionLog.logEndOffset)) {\n                logManager.replaceCurrentWithFutureLog(topicPartition)\n                log = futureLog\n                removeFutureLocalReplica(false)\n                true\n              } else false\n            case None =>\n              // Future replica is removed by a non-ReplicaAlterLogDirsThread before this method is called\n              // In this case the partition should have been removed from state of the ReplicaAlterLogDirsThread\n              // Return false so that ReplicaAlterLogDirsThread does not have to remove this partition from the\n              // state again to avoid race condition\n              false\n          }\n        }\n      }"
  },
  {
    "filepath": "../kafka/core/src/main/scala/kafka/cluster/Partition.scala",
    "search": "  private def doAppendRecordsToFollowerOrFutureReplica(records: MemoryRecords, isFuture: Boolean): Option[LogAppendInfo] = {\n    // The read lock is needed to handle race condition if request handler thread tries to\n    // remove future replica after receiving AlterReplicaLogDirsRequest.\n    inReadLock(leaderIsrUpdateLock) {\n      if (isFuture) {\n        // Note the replica may be undefined if it is removed by a non-ReplicaAlterLogDirsThread before\n        // this method is called\n        futureLog.map { _.appendAsFollower(records) }\n      } else {\n        // The read lock is needed to prevent the follower replica from being updated while ReplicaAlterDirThread\n        // is executing maybeDeleteAndSwapFutureReplica() to replace follower replica with the future replica.\n        Some(localLogOrException.appendAsFollower(records))\n      }\n    }\n  }",
    "replace": "  private def doAppendRecordsToFollowerOrFutureReplica(records: MemoryRecords, isFuture: Boolean): Option[LogAppendInfo] = {\n    // The read lock is needed to handle race condition if request handler thread tries to\n    // remove future replica after receiving AlterReplicaLogDirsRequest.\n    if (isFuture) {\n      inReadLock(leaderIsrUpdateLock) {\n        // Note the replica may be undefined if it is removed by a non-ReplicaAlterLogDirsThread before\n        // this method is called\n        futureLog.map { _.appendAsFollower(records) }\n      }\n    } else {\n      // The read lock is needed to prevent the follower replica from being updated while ReplicaAlterDirThread\n      // is executing maybeDeleteAndSwapFutureReplica() to replace follower replica with the future replica.\n      inReadLock(futureLogLock) {\n        Some(localLogOrException.appendAsFollower(records))\n      }\n    }\n  }"
  },
  {
    "filepath": "../kafka/core/src/main/scala/kafka/cluster/Partition.scala",
    "search": "  def truncateTo(offset: Long, isFuture: Boolean): Unit = {\n    // The read lock is needed to prevent the follower replica from being truncated while ReplicaAlterDirThread\n    // is executing maybeDeleteAndSwapFutureReplica() to replace follower replica with the future replica.\n    inReadLock(leaderIsrUpdateLock) {\n      logManager.truncateTo(Map(topicPartition -> offset), isFuture = isFuture)\n    }\n  }",
    "replace": "  def truncateTo(offset: Long, isFuture: Boolean): Unit = {\n    // The read lock is needed to prevent the follower replica from being truncated while ReplicaAlterDirThread\n    // is executing maybeDeleteAndSwapFutureReplica() to replace follower replica with the future replica.\n    if (isFuture) {\n      inReadLock(leaderIsrUpdateLock) {\n        logManager.truncateTo(Map(topicPartition -> offset), isFuture = isFuture)\n      }\n    } else {\n      inReadLock(futureLogLock) {\n        logManager.truncateTo(Map(topicPartition -> offset), isFuture = isFuture)\n      }\n    }\n  }"
  },
  {
    "filepath": "../kafka/core/src/main/scala/kafka/cluster/Partition.scala",
    "search": "  def truncateFullyAndStartAt(newOffset: Long, isFuture: Boolean): Unit = {\n    // The read lock is needed to prevent the follower replica from being truncated while ReplicaAlterDirThread\n    // is executing maybeDeleteAndSwapFutureReplica() to replace follower replica with the future replica.\n    inReadLock(leaderIsrUpdateLock) {\n      logManager.truncateFullyAndStartAt(topicPartition, newOffset, isFuture = isFuture)\n    }\n  }",
    "replace": "  def truncateFullyAndStartAt(newOffset: Long, isFuture: Boolean): Unit = {\n    // The read lock is needed to prevent the follower replica from being truncated while ReplicaAlterDirThread\n    // is executing maybeDeleteAndSwapFutureReplica() to replace follower replica with the future replica.\n    if (isFuture) {\n      inReadLock(leaderIsrUpdateLock) {\n        logManager.truncateFullyAndStartAt(topicPartition, newOffset, isFuture = isFuture)\n      }\n    } else {\n      inReadLock(futureLogLock) {\n        logManager.truncateFullyAndStartAt(topicPartition, newOffset, isFuture = isFuture)\n      }\n    }\n  }"
  }
]
```