diff --git a/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala b/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
index 86f06981ff..a1339e6647 100644
--- a/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
+++ b/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala
@@ -262,10 +262,11 @@ class AclAuthorizer extends Authorizer with Logging {
     inReadLock(lock) {
       val aclBindings = new util.ArrayList[AclBinding]()
       unorderedAcls.foreach { case (resource, versionedAcls) =>
+        if (filter.patternFilter().matches(resource)) {
           versionedAcls.acls.foreach { acl =>
-          val binding = new AclBinding(resource, acl.ace)
-          if (filter.matches(binding))
-            aclBindings.add(binding)
+            if (filter.entryFilter().matches(acl.ace))
+              aclBindings.add(new AclBinding(resource, acl.ace))
+          }
         }
       }
       aclBindings
@@ -349,13 +350,9 @@ class AclAuthorizer extends Authorizer with Logging {
         .map(_.acls)
         .getOrElse(Set.empty)
 
-      val prefixed = aclCache
-        .from(new ResourcePattern(resourceType, resourceName, PatternType.PREFIXED))
-        .to(new ResourcePattern(resourceType, resourceName.take(1), PatternType.PREFIXED))
-        .filterKeys(resource => resourceName.startsWith(resource.name))
-        .values
-        .flatMap { _.acls }
-        .toSet
+      val prefixed = (1 to resourceName.length).iterator.flatMap { i =>
+        aclCache.get(new ResourcePattern(resourceType, resourceName.substring(0, i), PatternType.PREFIXED))
+      }.flatMap(_.acls).toSet
 
       prefixed ++ wildcard ++ literal
     }
