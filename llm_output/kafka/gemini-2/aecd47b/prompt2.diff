diff --git a/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java b/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java
index 679b59249d..92bfa9e914 100644
--- a/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java
+++ b/clients/src/main/java/org/apache/kafka/common/utils/Checksums.java
@@ -16,6 +16,9 @@
  */
 package org.apache.kafka.common.utils;
 
+import java.lang.invoke.MethodHandle;
+import java.lang.invoke.MethodHandles;
+import java.lang.invoke.MethodType;
 import java.nio.ByteBuffer;
 import java.util.zip.Checksum;
 
@@ -30,6 +33,33 @@ import java.util.zip.Checksum;
  */
 public final class Checksums {
 
+    private static final class Java9ChecksumFactory {
+        private static final MethodHandle UPDATE_BYTE_BUFFER_METHOD;
+
+        static {
+            MethodHandle handle = null;
+            try {
+                handle = MethodHandles.lookup().findVirtual(Checksum.class, "update",
+                        MethodType.methodType(void.class, ByteBuffer.class));
+            } catch (NoSuchMethodException | IllegalAccessException e) {
+                // Method does not exist, we can ignore this.
+            }
+            UPDATE_BYTE_BUFFER_METHOD = handle;
+        }
+
+        static boolean isAvailable() {
+            return UPDATE_BYTE_BUFFER_METHOD != null;
+        }
+
+        static void update(Checksum checksum, ByteBuffer buffer) {
+            try {
+                UPDATE_BYTE_BUFFER_METHOD.invoke(checksum, buffer);
+            } catch (Throwable t) {
+                throw new RuntimeException("Unable to invoke Checksum.update(ByteBuffer)", t);
+            }
+        }
+    }
+
     private Checksums() {
     }
 
@@ -40,6 +70,14 @@ public final class Checksums {
     public static void update(Checksum checksum, ByteBuffer buffer, int offset, int length) {
         if (buffer.hasArray()) {
             checksum.update(buffer.array(), buffer.position() + buffer.arrayOffset() + offset, length);
+        } else if (Java9ChecksumFactory.isAvailable()) {
+            int pos = buffer.position();
+            int limit = buffer.limit();
+            buffer.position(pos + offset);
+            buffer.limit(pos + offset + length);
+            Java9ChecksumFactory.update(checksum, buffer);
+            buffer.limit(limit);
+            buffer.position(pos);
         } else {
             int start = buffer.position() + offset;
             for (int i = start; i < start + length; i++)
