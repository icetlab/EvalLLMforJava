The performance of Zstd compression and decompression can be significantly improved by buffering I/O operations. The zstd-jni library is most efficient when processing larger chunks of data, as this minimizes the overhead of JNI context switches between Java and native code.

The current implementation directly uses `ZstdInputStream` and `ZstdOutputStream`, which can be inefficient for workloads involving many small read or write operations. To address this, I will wrap these streams with `BufferedOutputStream` and `BufferedInputStream` respectively, using a 16KB buffer size. This approach, already used for GZIP compression in Kafka, batches small I/O calls into larger ones, thereby reducing JNI overhead and improving overall throughput.

```json
[
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java",
    "search": "    ZSTD(4, \"zstd\", 1.0f) {\n        @Override\n        public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {\n            try {\n                return (OutputStream) ZstdConstructors.OUTPUT.invoke(buffer);\n            } catch (Throwable e) {\n                throw new KafkaException(e);\n            }\n        }\n\n        @Override\n        public InputStream wrapForInput(ByteBuffer buffer, byte messageVersion, BufferSupplier decompressionBufferSupplier) {\n            try {\n                return (InputStream) ZstdConstructors.INPUT.invoke(new ByteBufferInputStream(buffer));\n            } catch (Throwable e) {\n                throw new KafkaException(e);\n            }\n        }\n    };",
    "replace": "    ZSTD(4, \"zstd\", 1.0f) {\n        @Override\n        public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {\n            try {\n                // Set input buffer (uncompressed) to 16 KB.\n                // The Zstd-jni library defaults to using a 64 KB buffer for uncompressed data.\n                // To ensure reasonable performance in cases where the caller passes a small number of bytes to write\n                // (potentially a single byte), we use a BufferedOutputStream.\n                return new BufferedOutputStream((OutputStream) ZstdConstructors.OUTPUT.invoke(buffer), 16 * 1024);\n            } catch (Throwable e) {\n                throw new KafkaException(e);\n            }\n        }\n\n        @Override\n        public InputStream wrapForInput(ByteBuffer buffer, byte messageVersion, BufferSupplier decompressionBufferSupplier) {\n            try {\n                // Set output buffer (uncompressed) to 16 KB.\n                // The Zstd-jni library defaults to using a 64 KB buffer for uncompressed data.\n                // To ensure reasonable performance in cases where the caller reads a small number of bytes\n                // (potentially a single byte), we use a BufferedInputStream.\n                return new BufferedInputStream((InputStream) ZstdConstructors.INPUT.invoke(new ByteBufferInputStream(buffer)),\n                        16 * 1024);\n            } catch (Throwable e) {\n                throw new KafkaException(e);\n            }\n        }\n    };"
  }
]
```