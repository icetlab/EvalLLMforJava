The performance issue with ZSTD compression stems from the `zstd-jni` library's behavior with small, frequent reads and writes. Each operation can result in a JNI context switch, which is expensive. The current implementation directly uses `ZstdInputStream` and `ZstdOutputStream`, leading to poor performance when handling many small records.

To address this, I will wrap the ZSTD streams with `BufferedInputStream` and `BufferedOutputStream`. This is a similar approach to what is already done for GZIP compression. By buffering data, we can consolidate many small read/write operations into larger chunks, significantly reducing the number of JNI calls and thereby improving overall throughput. This change preserves existing functionality and requires no modifications to the unit tests.

```json
[
  {
    "filepath": "../kafka/clients/src/main/java/org/apache/kafka/common/record/CompressionType.java",
    "search": "    ZSTD(4, \"zstd\", 1.0f) {\n        @Override\n        public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {\n            try {\n                return (OutputStream) ZstdConstructors.OUTPUT.invoke(buffer);\n            } catch (Throwable e) {\n                throw new KafkaException(e);\n            }\n        }\n\n        @Override\n        public InputStream wrapForInput(ByteBuffer buffer, byte messageVersion, BufferSupplier decompressionBufferSupplier) {\n            try {\n                return (InputStream) ZstdConstructors.INPUT.invoke(new ByteBufferInputStream(buffer));\n            } catch (Throwable e) {\n                throw new KafkaException(e);\n            }\n        }\n    };",
    "replace": "    ZSTD(4, \"zstd\", 1.0f) {\n        @Override\n        public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {\n            try {\n                // Set input buffer (uncompressed) to 16 KB to ensure reasonable performance in cases where the\n                // caller passes a small number of bytes to write (potentially a single byte).\n                return new BufferedOutputStream((OutputStream) ZstdConstructors.OUTPUT.invoke(buffer), 16 * 1024);\n            } catch (Throwable e) {\n                throw new KafkaException(e);\n            }\n        }\n\n        @Override\n        public InputStream wrapForInput(ByteBuffer buffer, byte messageVersion, BufferSupplier decompressionBufferSupplier) {\n            try {\n                // Set output buffer (uncompressed) to 16 KB to ensure reasonable performance in cases where the\n                // caller reads a small number of bytes (potentially a single byte).\n                return new BufferedInputStream((InputStream) ZstdConstructors.INPUT.invoke(new ByteBufferInputStream(buffer)),\n                        16 * 1024);\n            } catch (Throwable e) {\n                throw new KafkaException(e);\n            }\n        }\n    };"
  }
]
```