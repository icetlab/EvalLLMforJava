The `acls` method in `AclAuthorizer` was inefficient. For every request, it would iterate through all cached ACLs, create new `AclBinding` objects for each, and then apply a filter. This process resulted in the creation of many unnecessary objects and intermediate collections, especially with a large ACL cache, leading to performance degradation.

My improvement refactors this method to be significantly more efficient. The new implementation first filters resources by the resource pattern, then filters ACLs for the matching resources. `AclBinding` objects are now created only for the ACLs that satisfy the entire filter. This is achieved using an imperative loop over iterators, which avoids creating intermediate collections and populates a single `ArrayList` with the results. This change minimizes object allocation and redundant checks, directly addressing the performance bottleneck.

```json
[
  {
    "filepath": "../kafka/core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala",
    "search": "  override def acls(filter: AclBindingFilter): lang.Iterable[AclBinding] = {\n    inReadLock(lock) {\n      unorderedAcls.flatMap { case (resource, versionedAcls) =>\n        versionedAcls.acls.map(acl => new AclBinding(resource, acl.ace))\n            .filter(filter.matches)\n      }.asJava\n    }\n  }",
    "replace": "  override def acls(filter: AclBindingFilter): lang.Iterable[AclBinding] = {\n    inReadLock(lock) {\n      val result = new util.ArrayList[AclBinding]()\n      val resourceIterator = unorderedAcls.iterator\n      while (resourceIterator.hasNext) {\n        val (resource, versionedAcls) = resourceIterator.next()\n        if (filter.patternFilter.matches(resource)) {\n          val aclIterator = versionedAcls.acls.iterator\n          while (aclIterator.hasNext) {\n            val acl = aclIterator.next()\n            if (filter.entryFilter.matches(acl.ace)) {\n              result.add(new AclBinding(resource, acl.ace))\n            }\n          }\n        }\n      }\n      result\n    }\n  }"
  }
]
```