The performance issue is that `Partition.makeFollower()` can be blocked by ongoing log appends on a follower replica. This is because `makeFollower()` acquires a write lock on `leaderIsrUpdateLock`, while `doAppendRecordsToFollowerOrFutureReplica()` (which handles follower appends) acquires a read lock on the same lock.

To resolve this, I will introduce a new `ReentrantReadWriteLock` named `futureLogLock`. This new lock will specifically manage concurrency between log directory alterations and follower log operations, decoupling them from the broader ISR and leader state management protected by `leaderIsrUpdateLock`.

Here are the detailed changes:
1.  A new `futureLogLock` is added to the `Partition` class.
2.  `doAppendRecordsToFollowerOrFutureReplica` is modified. When appending to the current log as a follower (`isFuture = false`), it will now acquire a read lock on `futureLogLock` instead of `leaderIsrUpdateLock`. Appending to a future log will continue to use `leaderIsrUpdateLock` to coordinate with other future log operations.
3.  `maybeReplaceCurrentWithFutureReplica` is updated to acquire a write lock on `futureLogLock` before acquiring the `leaderIsrUpdateLock`. This prevents follower appends while the log directory is being checked and potentially replaced, without blocking leader/follower state transitions.

These changes will reduce lock contention on `leaderIsrUpdateLock`, allowing `makeFollower()` to execute more promptly even during active log appends on followers, thus preventing potential ISR shrinking and improving overall cluster stability during controlled shutdowns or leadership changes.

```json
[
  {
    "filepath": "../kafka/core/src/main/scala/kafka/cluster/Partition.scala",
    "search": "  private val leaderIsrUpdateLock = new ReentrantReadWriteLock\n  private var zkVersion: Int = LeaderAndIsr.initialZKVersion",
    "replace": "  private val leaderIsrUpdateLock = new ReentrantReadWriteLock\n  private val futureLogLock = new ReentrantReadWriteLock\n  private var zkVersion: Int = LeaderAndIsr.initialZKVersion"
  },
  {
    "filepath": "../kafka/core/src/main/scala/kafka/cluster/Partition.scala",
    "search": "      // The write lock is needed to make sure that while ReplicaAlterDirThread checks the LEO of the\n      // current replica, no other thread can update LEO of the current replica via log truncation or log append operation.\n      inWriteLock(leaderIsrUpdateLock) {\n        futureLog match {\n          case Some(futurePartitionLog) =>\n            if (log.exists(_.logEndOffset == futurePartitionLog.logEndOffset)) {\n              logManager.replaceCurrentWithFutureLog(topicPartition)\n              log = futureLog\n              removeFutureLocalReplica(false)\n              true\n            } else false\n          case None =>\n            // Future replica is removed by a non-ReplicaAlterLogDirsThread before this method is called\n            // In this case the partition should have been removed from state of the ReplicaAlterLogDirsThread\n            // Return false so that ReplicaAlterLogDirsThread does not have to remove this partition from the\n            // state again to avoid race condition\n            false\n        }\n      }",
    "replace": "      // The write lock is needed to make sure that while ReplicaAlterDirThread checks the LEO of the\n      // current replica, no other thread can update LEO of the current replica via log truncation or log append operation.\n      inWriteLock(futureLogLock) {\n        inWriteLock(leaderIsrUpdateLock) {\n          futureLog match {\n            case Some(futurePartitionLog) =>\n              if (log.exists(_.logEndOffset == futurePartitionLog.logEndOffset)) {\n                logManager.replaceCurrentWithFutureLog(topicPartition)\n                log = futureLog\n                removeFutureLocalReplica(false)\n                true\n              } else false\n            case None =>\n              // Future replica is removed by a non-ReplicaAlterLogDirsThread before this method is called\n              // In this case the partition should have been removed from state of the ReplicaAlterLogDirsThread\n              // Return false so that ReplicaAlterLogDirsThread does not have to remove this partition from the\n              // state again to avoid race condition\n              false\n          }\n        }\n      }"
  },
  {
    "filepath": "../kafka/core/src/main/scala/kafka/cluster/Partition.scala",
    "search": "    // The read lock is needed to handle race condition if request handler thread tries to\n    // remove future replica after receiving AlterReplicaLogDirsRequest.\n    inReadLock(leaderIsrUpdateLock) {\n      if (isFuture) {\n        // Note the replica may be undefined if it is removed by a non-ReplicaAlterLogDirsThread before\n        // this method is called\n        futureLog.map { _.appendAsFollower(records) }\n      } else {\n        // The read lock is needed to prevent the follower replica from being updated while ReplicaAlterDirThread\n        // is executing maybeDeleteAndSwapFutureReplica() to replace follower replica with the future replica.\n        Some(localLogOrException.appendAsFollower(records))\n      }\n    }",
    "replace": "    // The read lock is needed to handle race condition if request handler thread tries to\n    // remove future replica after receiving AlterReplicaLogDirsRequest.\n    if (isFuture) {\n      inReadLock(leaderIsrUpdateLock) {\n        // Note the replica may be undefined if it is removed by a non-ReplicaAlterLogDirsThread before\n        // this method is called\n        futureLog.map { _.appendAsFollower(records) }\n      }\n    } else {\n      // The read lock is needed to prevent the follower replica from being updated while ReplicaAlterDirThread\n      // is executing maybeDeleteAndSwapFutureReplica() to replace follower replica with the future replica.\n      inReadLock(futureLogLock) {\n        Some(localLogOrException.appendAsFollower(records))\n      }\n    }"
  }
]
```