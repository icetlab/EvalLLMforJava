The performance issue is that `Partition.makeFollower()` can be blocked by ongoing log appends on a follower replica. This is because `makeFollower()` acquires a write lock on `leaderIsrUpdateLock`, while `doAppendRecordsToFollowerOrFutureReplica()` (which handles follower appends) acquires a read lock on the same lock.

To resolve this, I will introduce a new `ReentrantReadWriteLock` named `futureLogLock`. This new lock will be used to synchronize access to the partition's log objects (`log` and `futureLog`) during follower appends and log directory alterations, which was the primary reason for `doAppendRecordsToFollowerOrFutureReplica` to hold the `leaderIsrUpdateLock`.

The changes are as follows:
1.  A new `futureLogLock` is added to the `Partition` class.
2.  `doAppendRecordsToFollowerOrFutureReplica` will now use a read lock on `futureLogLock` instead of `leaderIsrUpdateLock`. This decouples follower appends from leader state changes like `makeFollower`, preventing the blocking issue.
3.  Methods that modify the log references or structure, such as `maybeReplaceCurrentWithFutureReplica`, `removeFutureLocalReplica`, and `delete`, will now acquire a write lock on `futureLogLock` in addition to `leaderIsrUpdateLock`. This ensures that these operations are correctly synchronized with follower appends, preventing race conditions.

With these changes, `makeFollower()` will no longer be blocked by follower log appends, improving performance during controlled shutdowns and other scenarios involving leadership changes.

```json
[
  {
    "filepath": "../kafka/core/src/main/scala/kafka/cluster/Partition.scala",
    "search": "  private val remoteReplicasMap = new Pool[Int, Replica]\n  // The read lock is only required when multiple reads are executed and needs to be in a consistent manner\n  private val leaderIsrUpdateLock = new ReentrantReadWriteLock\n  private var zkVersion: Int = LeaderAndIsr.initialZKVersion",
    "replace": "  private val remoteReplicasMap = new Pool[Int, Replica]\n  // The read lock is only required when multiple reads are executed and needs to be in a consistent manner\n  private val leaderIsrUpdateLock = new ReentrantReadWriteLock\n  private val futureLogLock = new ReentrantReadWriteLock()\n  private var zkVersion: Int = LeaderAndIsr.initialZKVersion"
  },
  {
    "filepath": "../kafka/core/src/main/scala/kafka/cluster/Partition.scala",
    "search": "  def removeFutureLocalReplica(deleteFromLogDir: Boolean = true): Unit = {\n    inWriteLock(leaderIsrUpdateLock) {\n      futureLog = None\n      if (deleteFromLogDir)\n        logManager.asyncDelete(topicPartition, isFuture = true)\n    }\n  }",
    "replace": "  def removeFutureLocalReplica(deleteFromLogDir: Boolean = true): Unit = {\n    inWriteLock(leaderIsrUpdateLock) {\n      inWriteLock(futureLogLock) {\n        futureLog = None\n        if (deleteFromLogDir)\n          logManager.asyncDelete(topicPartition, isFuture = true)\n      }\n    }\n  }"
  },
  {
    "filepath": "../kafka/core/src/main/scala/kafka/cluster/Partition.scala",
    "search": "      // current replica, no other thread can update LEO of the current replica via log truncation or log append operation.\n      inWriteLock(leaderIsrUpdateLock) {\n        futureLog match {\n          case Some(futurePartitionLog) =>\n            if (log.exists(_.logEndOffset == futurePartitionLog.logEndOffset)) {\n              logManager.replaceCurrentWithFutureLog(topicPartition)\n              log = futureLog\n              removeFutureLocalReplica(false)\n              true\n            } else false\n          case None =>\n            // Future replica is removed by a non-ReplicaAlterLogDirsThread before this method is called\n            // In this case the partition should have been removed from state of the ReplicaAlterLogDirsThread\n            // Return false so that ReplicaAlterLogDirsThread does not have to remove this partition from the\n            // state again to avoid race condition\n            false\n        }\n      }",
    "replace": "      // current replica, no other thread can update LEO of the current replica via log truncation or log append operation.\n      inWriteLock(leaderIsrUpdateLock) {\n        inWriteLock(futureLogLock) {\n          futureLog match {\n            case Some(futurePartitionLog) =>\n              if (log.exists(_.logEndOffset == futurePartitionLog.logEndOffset)) {\n                logManager.replaceCurrentWithFutureLog(topicPartition)\n                log = futureLog\n                removeFutureLocalReplica(false)\n                true\n              } else false\n            case None =>\n              // Future replica is removed by a non-ReplicaAlterLogDirsThread before this method is called\n              // In this case the partition should have been removed from state of the ReplicaAlterLogDirsThread\n              // Return false so that ReplicaAlterLogDirsThread does not have to remove this partition from the\n              // state again to avoid race condition\n              false\n          }\n        }\n      }"
  },
  {
    "filepath": "../kafka/core/src/main/scala/kafka/cluster/Partition.scala",
    "search": "  def delete(): Unit = {\n    // need to hold the lock to prevent appendMessagesToLeader() from hitting I/O exceptions due to log being deleted\n    inWriteLock(leaderIsrUpdateLock) {\n      remoteReplicasMap.clear()\n      assignmentState = SimpleAssignmentState(Seq.empty)\n      log = None\n      futureLog = None\n      inSyncReplicaIds = Set.empty\n      leaderReplicaIdOpt = None\n      leaderEpochStartOffsetOpt = None\n      Partition.removeMetrics(topicPartition)\n      logManager.asyncDelete(topicPartition)\n      if (logManager.getLog(topicPartition, isFuture = true).isDefined)\n        logManager.asyncDelete(topicPartition, isFuture = true)\n    }\n  }",
    "replace": "  def delete(): Unit = {\n    // need to hold the lock to prevent appendMessagesToLeader() from hitting I/O exceptions due to log being deleted\n    inWriteLock(leaderIsrUpdateLock) {\n      inWriteLock(futureLogLock) {\n        remoteReplicasMap.clear()\n        assignmentState = SimpleAssignmentState(Seq.empty)\n        log = None\n        futureLog = None\n        inSyncReplicaIds = Set.empty\n        leaderReplicaIdOpt = None\n        leaderEpochStartOffsetOpt = None\n        Partition.removeMetrics(topicPartition)\n        logManager.asyncDelete(topicPartition)\n        if (logManager.getLog(topicPartition, isFuture = true).isDefined)\n          logManager.asyncDelete(topicPartition, isFuture = true)\n      }\n    }\n  }"
  },
  {
    "filepath": "../kafka/core/src/main/scala/kafka/cluster/Partition.scala",
    "search": "  private def doAppendRecordsToFollowerOrFutureReplica(records: MemoryRecords, isFuture: Boolean): Option[LogAppendInfo] = {\n    // The read lock is needed to handle race condition if request handler thread tries to\n    // remove future replica after receiving AlterReplicaLogDirsRequest.\n    inReadLock(leaderIsrUpdateLock) {\n      if (isFuture) {\n        // Note the replica may be undefined if it is removed by a non-ReplicaAlterLogDirsThread before\n        // this method is called\n        futureLog.map { _.appendAsFollower(records) }\n      } else {\n        // The read lock is needed to prevent the follower replica from being updated while ReplicaAlterDirThread\n        // is executing maybeDeleteAndSwapFutureReplica() to replace follower replica with the future replica.\n        Some(localLogOrException.appendAsFollower(records))\n      }\n    }\n  }",
    "replace": "  private def doAppendRecordsToFollowerOrFutureReplica(records: MemoryRecords, isFuture: Boolean): Option[LogAppendInfo] = {\n    // The read lock is needed to prevent the follower replica from being updated while ReplicaAlterDirThread\n    // is executing maybeReplaceCurrentWithFutureReplica() to replace follower replica with the future replica.\n    inReadLock(futureLogLock) {\n      if (isFuture) {\n        // Note the replica may be undefined if it is removed by a non-ReplicaAlterLogDirsThread before\n        // this method is called\n        futureLog.map { _.appendAsFollower(records) }\n      } else {\n        Some(localLogOrException.appendAsFollower(records))\n      }\n    }\n  }"
  }
]
```