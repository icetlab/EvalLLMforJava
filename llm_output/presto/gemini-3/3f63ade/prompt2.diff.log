This change optimizes the `array_distinct` function for small arrays (size 0, 1, or 2) by handling these cases with specialized logic. This avoids the overhead of creating a `TypedSet` and a `BlockBuilder` for these common small array sizes, improving performance. For arrays with 0 or 1 elements, the input array is returned directly. For 2-element arrays, a direct comparison is performed. For larger arrays, the original `TypedSet`-based implementation is used.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayDistinctFunction.java",
    "search": "    public static Block distinct(Type type, Block array)\n    {\n        if (array.getPositionCount() == 0) {\n            return array;\n        }\n\n        TypedSet typedSet = new TypedSet(type, array.getPositionCount());\n        BlockBuilder distinctElementBlockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), array.getPositionCount());\n        for (int i = 0; i < array.getPositionCount(); i++) {\n            if (!typedSet.contains(array, i)) {\n                typedSet.add(array, i);\n                type.appendTo(array, i, distinctElementBlockBuilder);\n            }\n        }\n\n        return distinctElementBlockBuilder.build();\n    }",
    "replace": "    public static Block distinct(Type type, Block array)\n    {\n        int positionCount = array.getPositionCount();\n        if (positionCount <= 1) {\n            return array;\n        }\n\n        if (positionCount == 2) {\n            // if the two elements are equal, return a block with the first element\n            if ((array.isNull(0) && array.isNull(1)) ||\n                    (!array.isNull(0) && !array.isNull(1) && type.equalTo(array, 0, array, 1))) {\n                BlockBuilder blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1);\n                type.appendTo(array, 0, blockBuilder);\n                return blockBuilder.build();\n            }\n            // otherwise, the array is distinct\n            return array;\n        }\n\n        TypedSet typedSet = new TypedSet(type, positionCount);\n        BlockBuilder distinctElementBlockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), positionCount);\n        for (int i = 0; i < positionCount; i++) {\n            if (!typedSet.contains(array, i)) {\n                typedSet.add(array, i);\n                type.appendTo(array, i, distinctElementBlockBuilder);\n            }\n        }\n\n        return distinctElementBlockBuilder.build();\n    }"
  }
]
```