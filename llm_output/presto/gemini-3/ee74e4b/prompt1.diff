diff --git a/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java b/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java
index 979fc2cb80..a7d4001599 100644
--- a/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java
+++ b/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java
@@ -156,6 +156,13 @@ public class PageProcessor
         private SelectedPositions selectedPositions;
         private long retainedSizeInBytes;
 
+        private ReferenceCountMap referenceCountMap;
+        private final java.util.function.BiConsumer<Object, Long> retainedSizeConsumer = (object, size) -> {
+            if (referenceCountMap.incrementAndGet(object) == 1) {
+                retainedSizeInBytes += size;
+            }
+        };
+
         // remember if we need to re-use the same batch size if we yield last time
         private boolean lastComputeYielded;
         private int lastComputeBatchSize;
@@ -256,24 +263,16 @@ public class PageProcessor
         {
             // increment the size only when it is the first reference
             retainedSizeInBytes = Page.INSTANCE_SIZE + SizeOf.sizeOfObjectArray(page.getChannelCount());
-            ReferenceCountMap referenceCountMap = new ReferenceCountMap();
+            referenceCountMap = new ReferenceCountMap();
             for (int channel = 0; channel < page.getChannelCount(); channel++) {
                 Block block = page.getBlock(channel);
                 if (!isNotLoadedLazyBlock(block)) {
-                    block.retainedBytesForEachPart((object, size) -> {
-                        if (referenceCountMap.incrementAndGet(object) == 1) {
-                            retainedSizeInBytes += size;
-                        }
-                    });
+                    block.retainedBytesForEachPart(retainedSizeConsumer);
                 }
             }
             for (Block previouslyComputedResult : previouslyComputedResults) {
                 if (previouslyComputedResult != null) {
-                    previouslyComputedResult.retainedBytesForEachPart((object, size) -> {
-                        if (referenceCountMap.incrementAndGet(object) == 1) {
-                            retainedSizeInBytes += size;
-                        }
-                    });
+                    previouslyComputedResult.retainedBytesForEachPart(retainedSizeConsumer);
                 }
             }
 
