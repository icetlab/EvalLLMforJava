diff --git a/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java b/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java
index 350f609b45..fe814ea3d4 100644
--- a/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java
+++ b/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java
@@ -42,6 +42,7 @@ import java.util.List;
 import static com.esri.core.geometry.Geometry.Type.Unknown;
 import static com.esri.core.geometry.GeometryEngine.geometryToEsriShape;
 import static com.facebook.presto.geospatial.GeometryUtils.isEsriNaN;
+import static com.facebook.presto.geospatial.GeometryUtils.translateToAVNaN;
 import static com.google.common.base.Verify.verify;
 import static java.lang.Math.toIntExact;
 import static java.util.Objects.requireNonNull;
@@ -63,6 +64,8 @@ public class GeometrySerde
         GeometryType type = GeometryType.getForEsriGeometryType(geometry.geometryType());
         switch (type) {
             case POINT:
+                writePoint(output, (OGCPoint) geometry);
+                break;
             case MULTI_POINT:
             case LINE_STRING:
             case MULTI_LINE_STRING:
@@ -80,6 +83,20 @@ public class GeometrySerde
         }
     }
 
+    private static void writePoint(DynamicSliceOutput output, OGCPoint point)
+    {
+        output.appendByte(GeometryType.POINT.code());
+        Point esriPoint = (Point) point.getEsriGeometry();
+        if (esriPoint == null || esriPoint.isEmpty()) {
+            output.writeDouble(translateToAVNaN(Double.NaN));
+            output.writeDouble(translateToAVNaN(Double.NaN));
+        }
+        else {
+            output.writeDouble(translateToAVNaN(esriPoint.getX()));
+            output.writeDouble(translateToAVNaN(esriPoint.getY()));
+        }
+    }
+
     private static void writeGeometryCollection(DynamicSliceOutput output, OGCGeometryCollection collection)
     {
         output.appendByte(GeometryType.GEOMETRY_COLLECTION.code());
@@ -120,6 +137,7 @@ public class GeometrySerde
     {
         switch (type) {
             case POINT:
+                return readPoint(input);
             case MULTI_POINT:
             case LINE_STRING:
             case MULTI_LINE_STRING:
@@ -133,6 +151,16 @@ public class GeometrySerde
         }
     }
 
+    private static OGCGeometry readPoint(BasicSliceInput input)
+    {
+        double x = input.readDouble();
+        double y = input.readDouble();
+        if (isEsriNaN(x) || isEsriNaN(y)) {
+            return new OGCPoint(new Point(), null);
+        }
+        return new OGCPoint(new Point(x, y), null);
+    }
+
     private static OGCConcreteGeometryCollection readGeometryCollection(BasicSliceInput input, Slice inputSlice)
     {
         // GeometryCollection: geometryType|len-of-shape1|bytes-of-shape1|len-of-shape2|bytes-of-shape2...
@@ -257,9 +285,6 @@ public class GeometrySerde
 
     private static Envelope getPointEnvelope(BasicSliceInput input)
     {
-        // skip type injected by esri
-        input.readInt();
-
         double x = input.readDouble();
         double y = input.readDouble();
         if (isEsriNaN(x) || isEsriNaN(y)) {
diff --git a/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java b/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java
index 0030a0bf84..0685a1b0d5 100644
--- a/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java
+++ b/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java
@@ -58,7 +58,7 @@ public class JtsGeometrySerde
     {
         switch (type) {
             case POINT:
-                return readPoint(input, true);
+                return readPoint(input);
             case MULTI_POINT:
                 return readMultiPoint(input);
             case LINE_STRING:
@@ -76,11 +76,8 @@ public class JtsGeometrySerde
         }
     }
 
-    private static Point readPoint(SliceInput input, boolean skipType)
+    private static Point readPoint(SliceInput input)
     {
-        if (skipType) {
-            skipEsriType(input);
-        }
         Coordinate coordinates = readCoordinate(input);
         if (isEsriNaN(coordinates.x) || isEsriNaN(coordinates.y)) {
             return GEOMETRY_FACTORY.createPoint();
@@ -95,7 +92,7 @@ public class JtsGeometrySerde
         int pointCount = input.readInt();
         Point[] points = new Point[pointCount];
         for (int i = 0; i < pointCount; i++) {
-            points[i] = readPoint(input, false);
+            points[i] = readPoint(input);
         }
         return GEOMETRY_FACTORY.createMultiPoint(points);
     }
@@ -280,7 +277,6 @@ public class JtsGeometrySerde
     private static void writePoint(Point point, SliceOutput output)
     {
         output.writeByte(GeometryType.POINT.code());
-        output.writeInt(EsriShapeType.POINT.code);
         if (!point.isEmpty()) {
             writeCoordinate(point.getCoordinate(), output);
         }
