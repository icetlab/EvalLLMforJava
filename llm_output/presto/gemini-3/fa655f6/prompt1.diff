diff --git a/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java b/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
index ea2cf982de..0cd231b35a 100644
--- a/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
+++ b/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
@@ -37,12 +37,20 @@ public class SingleMapBlock
     private final int offset;
     private final int positionCount;  // The number of keys in this single map * 2
     private final AbstractMapBlock mapBlock;
+    private final int rawKeyOffset;
+    private final int keyPositionCount;
+    private final int hashTableOffset;
+    private final int hashTableSize;
 
     SingleMapBlock(int offset, int positionCount, AbstractMapBlock mapBlock)
     {
         this.offset = offset;
         this.positionCount = positionCount;
         this.mapBlock = mapBlock;
+        this.rawKeyOffset = offset / 2;
+        this.keyPositionCount = positionCount / 2;
+        this.hashTableOffset = rawKeyOffset * HASH_MULTIPLIER;
+        this.hashTableSize = keyPositionCount * HASH_MULTIPLIER;
     }
 
     @Override
@@ -54,9 +62,9 @@ public class SingleMapBlock
     @Override
     public long getSizeInBytes()
     {
-        return mapBlock.getRawKeyBlock().getRegionSizeInBytes(offset / 2, positionCount / 2) +
-                mapBlock.getRawValueBlock().getRegionSizeInBytes(offset / 2, positionCount / 2) +
-                sizeOfIntArray(positionCount / 2 * HASH_MULTIPLIER);
+        return mapBlock.getRawKeyBlock().getRegionSizeInBytes(rawKeyOffset, keyPositionCount) +
+                mapBlock.getRawValueBlock().getRegionSizeInBytes(rawKeyOffset, keyPositionCount) +
+                sizeOfIntArray(hashTableSize);
     }
 
     @Override
@@ -162,8 +170,6 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
@@ -173,7 +179,7 @@ public class SingleMapBlock
             Boolean match;
             try {
                 // assuming maps with indeterminate keys are not supported
-                match = (Boolean) mapBlock.keyBlockNativeEquals.invoke(mapBlock.getRawKeyBlock(), offset / 2 + keyPosition, nativeValue);
+                match = (Boolean) mapBlock.keyBlockNativeEquals.invoke(mapBlock.getRawKeyBlock(), rawKeyOffset + keyPosition, nativeValue);
             }
             catch (Throwable throwable) {
                 throw handleThrowable(throwable);
@@ -209,8 +215,6 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
@@ -220,7 +224,7 @@ public class SingleMapBlock
             Boolean match;
             try {
                 // assuming maps with indeterminate keys are not supported
-                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), offset / 2 + keyPosition, nativeValue);
+                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), rawKeyOffset + keyPosition, nativeValue);
             }
             catch (Throwable throwable) {
                 throw handleThrowable(throwable);
@@ -253,8 +257,6 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
@@ -264,7 +266,7 @@ public class SingleMapBlock
             Boolean match;
             try {
                 // assuming maps with indeterminate keys are not supported
-                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), offset / 2 + keyPosition, nativeValue);
+                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), rawKeyOffset + keyPosition, nativeValue);
             }
             catch (Throwable throwable) {
                 throw handleThrowable(throwable);
@@ -297,8 +299,6 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
@@ -308,7 +308,7 @@ public class SingleMapBlock
             Boolean match;
             try {
                 // assuming maps with indeterminate keys are not supported
-                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), offset / 2 + keyPosition, nativeValue);
+                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), rawKeyOffset + keyPosition, nativeValue);
             }
             catch (Throwable throwable) {
                 throw handleThrowable(throwable);
@@ -341,8 +341,6 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
@@ -352,7 +350,7 @@ public class SingleMapBlock
             Boolean match;
             try {
                 // assuming maps with indeterminate keys are not supported
-                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), offset / 2 + keyPosition, nativeValue);
+                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), rawKeyOffset + keyPosition, nativeValue);
             }
             catch (Throwable throwable) {
                 throw handleThrowable(throwable);
@@ -385,8 +383,6 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
@@ -396,7 +392,7 @@ public class SingleMapBlock
             Boolean match;
             try {
                 // assuming maps with indeterminate keys are not supported
-                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), offset / 2 + keyPosition, nativeValue);
+                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), rawKeyOffset + keyPosition, nativeValue);
             }
             catch (Throwable throwable) {
                 throw handleThrowable(throwable);
