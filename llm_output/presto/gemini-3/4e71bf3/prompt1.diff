diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
index da887a9ba3..5482474238 100644
--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
@@ -258,6 +258,27 @@ public class ByteSelectiveStreamReader
     {
         // filter == null implies outputRequired == true
         int streamPosition = 0;
+        if (presentStream == null) {
+            int i = 0;
+            while (i < positionCount) {
+                int position = positions[i];
+                if (position > streamPosition) {
+                    skip(position - streamPosition);
+                }
+                streamPosition = position;
+
+                int start = i;
+                while (i + 1 < positionCount && positions[i + 1] == streamPosition + 1) {
+                    i++;
+                    streamPosition++;
+                }
+                int count = i - start + 1;
+                dataStream.next(values, start, count);
+                streamPosition++;
+                i++;
+            }
+        }
+        else {
             for (int i = 0; i < positionCount; i++) {
                 int position = positions[i];
                 if (position > streamPosition) {
@@ -265,17 +286,16 @@ public class ByteSelectiveStreamReader
                     streamPosition = position;
                 }
 
-            if (presentStream != null && !presentStream.nextBit()) {
+                if (!presentStream.nextBit()) {
                     nulls[i] = true;
                 }
                 else {
                     values[i] = dataStream.next();
-                if (presentStream != null) {
                     nulls[i] = false;
                 }
-            }
                 streamPosition++;
             }
+        }
         outputPositionCount = positionCount;
         return streamPosition;
     }
diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/stream/ByteInputStream.java b/presto-orc/src/main/java/com/facebook/presto/orc/stream/ByteInputStream.java
index 21edc123eb..02d51d4637 100644
--- a/presto-orc/src/main/java/com/facebook/presto/orc/stream/ByteInputStream.java
+++ b/presto-orc/src/main/java/com/facebook/presto/orc/stream/ByteInputStream.java
@@ -119,11 +119,43 @@ public class ByteInputStream
         return buffer[offset++];
     }
 
+    public void next(byte[] data, int off, int len)
+            throws IOException
+    {
+        if (len == 0) {
+            return;
+        }
+
+        int current = 0;
+        while (true) {
+            int available = this.length - this.offset;
+            if (available > 0) {
+                int count = Math.min(available, len - current);
+                System.arraycopy(buffer, this.offset, data, off + current, count);
+                this.offset += count;
+                current += count;
+                if (current == len) {
+                    return;
+                }
+            }
+            readNextBlock();
+        }
+    }
+
     public void nextVector(Type type, long items, BlockBuilder builder)
             throws IOException
     {
-        for (int i = 0; i < items; i++) {
-            type.writeLong(builder, next());
+        long remaining = items;
+        while (remaining > 0) {
+            if (offset == length) {
+                readNextBlock();
+            }
+            int count = (int) Math.min(remaining, length - offset);
+            for (int i = 0; i < count; i++) {
+                type.writeLong(builder, buffer[offset + i]);
+            }
+            offset += count;
+            remaining -= count;
         }
     }
 }
