My goal is to improve the performance of the `ST_Intersection` function by adding fast paths for common cases, thus avoiding expensive full geometry intersection calculations.

The key improvements are:
1.  **Early exit for empty geometries**: If either of the input geometries is empty, their intersection is also empty. I've added a check at the beginning to handle this and return an empty polygon.
2.  **Envelope intersection check**: Before performing a full intersection, I check if the bounding boxes (envelopes) of the two geometries intersect. If they don't, the geometries themselves cannot intersect, and we can immediately return an empty polygon. This is a very cheap check that can prevent costly computations.
3.  **Envelope containment optimization**: When one of the geometries is an envelope (a simple rectangle) and it fully contains the other geometry, their intersection is simply the contained geometry. I've added a check for this case, which is particularly effective when intersecting a geometry with a large envelope that encloses it.

These changes are structured to handle the cheapest checks first, progressively moving to more expensive operations only when necessary, ensuring better performance across various scenarios, especially those targeted by the benchmarks.

```json
[
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @Description(\"Returns the Geometry value that represents the point set intersection of two Geometries\")\n    @ScalarFunction(\"ST_Intersection\")\n    @SqlType(GEOMETRY_TYPE_NAME)\n    public static Slice stIntersection(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        if (deserializeType(left) == GeometrySerializationType.ENVELOPE && deserializeType(right) == GeometrySerializationType.ENVELOPE) {\n            Envelope leftEnvelope = deserializeEnvelope(left);\n            Envelope rightEnvelope = deserializeEnvelope(right);\n\n            // Envelope#intersect updates leftEnvelope to the intersection of the two envelopes\n            if (!leftEnvelope.intersect(rightEnvelope)) {\n                return EMPTY_POLYGON;\n            }\n\n            Envelope intersection = leftEnvelope;\n            if (intersection.getXMin() == intersection.getXMax()) {\n                if (intersection.getYMin() == intersection.getYMax()) {\n                    return EsriGeometrySerde.serialize(createFromEsriGeometry(new Point(intersection.getXMin(), intersection.getXMax()), null));\n                }\n                return EsriGeometrySerde.serialize(createFromEsriGeometry(new Polyline(new Point(intersection.getXMin(), intersection.getYMin()), new Point(intersection.getXMin(), intersection.getYMax())), null));\n            }\n\n            if (intersection.getYMin() == intersection.getYMax()) {\n                return EsriGeometrySerde.serialize(createFromEsriGeometry(new Polyline(new Point(intersection.getXMin(), intersection.getYMin()), new Point(intersection.getXMax(), intersection.getYMin())), null));\n            }\n\n            return EsriGeometrySerde.serialize(intersection);\n        }\n\n        OGCGeometry leftGeometry = EsriGeometrySerde.deserialize(left);\n        OGCGeometry rightGeometry = EsriGeometrySerde.deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return EsriGeometrySerde.serialize(leftGeometry.intersection(rightGeometry));\n    }",
    "replace": "    @Description(\"Returns the Geometry value that represents the point set intersection of two Geometries\")\n    @ScalarFunction(\"ST_Intersection\")\n    @SqlType(GEOMETRY_TYPE_NAME)\n    public static Slice stIntersection(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        Envelope leftEnvelope = deserializeEnvelope(left);\n        if (leftEnvelope.isEmpty()) {\n            return EMPTY_POLYGON;\n        }\n        Envelope rightEnvelope = deserializeEnvelope(right);\n        if (rightEnvelope.isEmpty()) {\n            return EMPTY_POLYGON;\n        }\n\n        Envelope intersectionEnvelope = new Envelope();\n        leftEnvelope.copyTo(intersectionEnvelope);\n        if (!intersectionEnvelope.intersect(rightEnvelope)) {\n            return EMPTY_POLYGON;\n        }\n\n        GeometrySerializationType leftType = deserializeType(left);\n        GeometrySerializationType rightType = deserializeType(right);\n        boolean leftIsEnvelope = leftType == GeometrySerializationType.ENVELOPE;\n        boolean rightIsEnvelope = rightType == GeometrySerializationType.ENVELOPE;\n\n        if (leftIsEnvelope) {\n            if (rightIsEnvelope) {\n                // Intersection of two envelopes\n                Envelope intersection = intersectionEnvelope;\n                if (intersection.getXMin() == intersection.getXMax()) {\n                    if (intersection.getYMin() == intersection.getYMax()) {\n                        return EsriGeometrySerde.serialize(createFromEsriGeometry(new Point(intersection.getXMin(), intersection.getXMax()), null));\n                    }\n                    return EsriGeometrySerde.serialize(createFromEsriGeometry(new Polyline(new Point(intersection.getXMin(), intersection.getYMin()), new Point(intersection.getXMin(), intersection.getYMax())), null));\n                }\n\n                if (intersection.getYMin() == intersection.getYMax()) {\n                    return EsriGeometrySerde.serialize(createFromEsriGeometry(new Polyline(new Point(intersection.getXMin(), intersection.getYMin()), new Point(intersection.getXMax(), intersection.getYMin())), null));\n                }\n\n                return EsriGeometrySerde.serialize(intersection);\n            }\n\n            // Left is an envelope, right is not.\n            // If left envelope contains right's envelope, it contains right geometry.\n            if (leftEnvelope.contains(rightEnvelope)) {\n                return right;\n            }\n        }\n        else if (rightIsEnvelope) {\n            // Right is an envelope, left is not.\n            // If right envelope contains left's envelope, it contains left geometry.\n            if (rightEnvelope.contains(leftEnvelope)) {\n                return left;\n            }\n        }\n\n        OGCGeometry leftGeometry = EsriGeometrySerde.deserialize(left);\n        OGCGeometry rightGeometry = EsriGeometrySerde.deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return EsriGeometrySerde.serialize(leftGeometry.intersection(rightGeometry));\n    }"
  }
]
```