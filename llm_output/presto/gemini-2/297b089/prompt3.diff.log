The current implementation of `SliceDirectSelectiveStreamReader` unconditionally uses a batch processing mode. This was likely done to optimize for a specific scenario but has two main drawbacks.

First, it introduces a correctness issue for bounded `VARCHAR(N)` and `CHAR(N)` types. The batch processing path does not truncate strings to the specified length, unlike the non-batch path. This can lead to incorrect data being returned.

Second, for queries with high selectivity (i.e., a large percentage of rows are skipped), the batch mode is inefficient. It reads all data for a given range into memory, including data for rows that will be filtered out. The non-batch path is more efficient in these cases as it can skip over data for filtered rows without reading it into memory.

My change restores the original, more sophisticated logic for deciding when to use batch mode. This logic:
1.  Disables batch mode for bounded `VARCHAR` and `CHAR` types, fixing the correctness issue.
2.  Uses batch mode only when the filter rate is within a range where it is known to perform well, improving performance for highly selective queries. This avoids excessive memory usage and unnecessary I/O.

This change makes the reader both more correct and more performant across a wider range of query patterns.

```json
[
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java",
    "search": "    private boolean useBatchMode(int positionCount, int totalPositionCount)\n    {\n        return true;\n        // maxCodePointCount < 0 means it's unbounded varchar VARCHAR.\n        // If the types are VARCHAR(N) or CHAR(N), the length of the string need to be calculated and truncated.\n//        if (lengthStream == null || maxCodePointCount >= 0) {\n//            return false;\n//        }\n//\n//        double inputFilterRate = (double) (totalPositionCount - positionCount) / totalPositionCount;\n//        if (filter == null) {  // readNoFilter\n//            // When there is no filter, batch mode performs better for almost all inputFilterRate.\n//            // But to limit data buffer size, we enable it for the range of [0.0f, 0.5f]\n//            if (inputFilterRate >= 0.0f && inputFilterRate <= 0.5f) {\n//                return true;\n//            }\n//\n//            return false;\n//        }\n//        else { // readWithFilter\n//            // When there is filter, batch mode performs better for almost all inputFilterRate except when inputFilterRate is around 0.1f.\n//            // To limit data buffer size, we enable it for the range of [0.0f, 0.05f] and [0.15f, 0.5f]\n//            if (inputFilterRate >= 0.0f && inputFilterRate <= 0.05f || inputFilterRate >= 0.15f && inputFilterRate <= 0.5f) {\n//                return true;\n//            }\n//\n//            return false;\n//        }\n    }",
    "replace": "    private boolean useBatchMode(int positionCount, int totalPositionCount)\n    {\n        // maxCodePointCount < 0 means it's unbounded varchar VARCHAR.\n        // If the types are VARCHAR(N) or CHAR(N), the length of the string need to be calculated and truncated.\n        if (lengthStream == null || maxCodePointCount >= 0) {\n            return false;\n        }\n\n        double inputFilterRate = (double) (totalPositionCount - positionCount) / totalPositionCount;\n        if (filter == null) {  // readNoFilter\n            // When there is no filter, batch mode performs better for almost all inputFilterRate.\n            // But to limit data buffer size, we enable it for the range of [0.0f, 0.5f]\n            if (inputFilterRate >= 0.0f && inputFilterRate <= 0.5f) {\n                return true;\n            }\n\n            return false;\n        }\n        else { // readWithFilter\n            // When there is filter, batch mode performs better for almost all inputFilterRate except when inputFilterRate is around 0.1f.\n            // To limit data buffer size, we enable it for the range of [0.0f, 0.05f] and [0.15f, 0.5f]\n            if (inputFilterRate >= 0.0f && inputFilterRate <= 0.05f || inputFilterRate >= 0.15f && inputFilterRate <= 0.5f) {\n                return true;\n            }\n\n            return false;\n        }\n    }"
  }
]
```