The primary performance improvement is to add bounding box checks to several spatial relationship functions (`ST_Intersects`, `ST_Disjoint`, `ST_Crosses`, `ST_Overlaps`, `ST_Touches`, `ST_Within`, and `ST_Equals`).

Many of these functions were performing full geometry deserialization and expensive calculations in all cases. By first deserializing only the envelopes (bounding boxes) and performing a cheaper check, we can often short-circuit the function and avoid the more costly operations. This pattern was already present in `ST_Contains` and has been extended to other relevant functions.

For instance, two geometries can only intersect if their envelopes intersect. If the envelopes do not intersect, we can immediately return `false` for `ST_Intersects` without further processing. This is particularly effective for the benchmarked scenarios involving geometries that are far apart.

```json
[
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @SqlNullable\n    @Description(\"Returns TRUE if the supplied geometries have some, but not all, interior points in common\")\n    @ScalarFunction(\"ST_Crosses\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stCrosses(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.crosses(rightGeometry);\n    }",
    "replace": "    @SqlNullable\n    @Description(\"Returns TRUE if the supplied geometries have some, but not all, interior points in common\")\n    @ScalarFunction(\"ST_Crosses\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stCrosses(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        Envelope leftEnvelope = deserializeEnvelope(left);\n        Envelope rightEnvelope = deserializeEnvelope(right);\n        if (leftEnvelope == null || rightEnvelope == null ||\n                leftEnvelope.getXMax() < rightEnvelope.getXMin() ||\n                leftEnvelope.getXMin() > rightEnvelope.getXMax() ||\n                leftEnvelope.getYMax() < rightEnvelope.getYMin() ||\n                leftEnvelope.getYMin() > rightEnvelope.getYMax()) {\n            return false;\n        }\n\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.crosses(rightGeometry);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @SqlNullable\n    @Description(\"Returns TRUE if the Geometries do not spatially intersect - if they do not share any space together\")\n    @ScalarFunction(\"ST_Disjoint\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stDisjoint(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.disjoint(rightGeometry);\n    }",
    "replace": "    @SqlNullable\n    @Description(\"Returns TRUE if the Geometries do not spatially intersect - if they do not share any space together\")\n    @ScalarFunction(\"ST_Disjoint\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stDisjoint(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        Envelope leftEnvelope = deserializeEnvelope(left);\n        Envelope rightEnvelope = deserializeEnvelope(right);\n        if (leftEnvelope == null || rightEnvelope == null) {\n            return true;\n        }\n\n        if (leftEnvelope.getXMax() < rightEnvelope.getXMin() ||\n                leftEnvelope.getXMin() > rightEnvelope.getXMax() ||\n                leftEnvelope.getYMax() < rightEnvelope.getYMin() ||\n                leftEnvelope.getYMin() > rightEnvelope.getYMax()) {\n            return true;\n        }\n\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.disjoint(rightGeometry);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @SqlNullable\n    @Description(\"Returns TRUE if the given geometries represent the same geometry\")\n    @ScalarFunction(\"ST_Equals\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stEquals(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.equals(rightGeometry);\n    }",
    "replace": "    @SqlNullable\n    @Description(\"Returns TRUE if the given geometries represent the same geometry\")\n    @ScalarFunction(\"ST_Equals\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stEquals(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        Envelope leftEnvelope = deserializeEnvelope(left);\n        Envelope rightEnvelope = deserializeEnvelope(right);\n        if (leftEnvelope == null || rightEnvelope == null) {\n            return leftEnvelope == rightEnvelope;\n        }\n\n        if (!leftEnvelope.equals(rightEnvelope)) {\n            return false;\n        }\n\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.equals(rightGeometry);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @SqlNullable\n    @Description(\"Returns TRUE if the Geometries spatially intersect in 2D - (share any portion of space) and FALSE if they don't (they are Disjoint)\")\n    @ScalarFunction(\"ST_Intersects\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stIntersects(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.intersects(rightGeometry);\n    }",
    "replace": "    @SqlNullable\n    @Description(\"Returns TRUE if the Geometries spatially intersect in 2D - (share any portion of space) and FALSE if they don't (they are Disjoint)\")\n    @ScalarFunction(\"ST_Intersects\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stIntersects(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        Envelope leftEnvelope = deserializeEnvelope(left);\n        Envelope rightEnvelope = deserializeEnvelope(right);\n        if (leftEnvelope == null || rightEnvelope == null ||\n                leftEnvelope.getXMax() < rightEnvelope.getXMin() ||\n                leftEnvelope.getXMin() > rightEnvelope.getXMax() ||\n                leftEnvelope.getYMax() < rightEnvelope.getYMin() ||\n                leftEnvelope.getYMin() > rightEnvelope.getYMax()) {\n            return false;\n        }\n\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.intersects(rightGeometry);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @SqlNullable\n    @Description(\"Returns TRUE if the Geometries share space, are of the same dimension, but are not completely contained by each other\")\n    @ScalarFunction(\"ST_Overlaps\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stOverlaps(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.overlaps(rightGeometry);\n    }",
    "replace": "    @SqlNullable\n    @Description(\"Returns TRUE if the Geometries share space, are of the same dimension, but are not completely contained by each other\")\n    @ScalarFunction(\"ST_Overlaps\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stOverlaps(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        Envelope leftEnvelope = deserializeEnvelope(left);\n        Envelope rightEnvelope = deserializeEnvelope(right);\n        if (leftEnvelope == null || rightEnvelope == null ||\n                leftEnvelope.getXMax() < rightEnvelope.getXMin() ||\n                leftEnvelope.getXMin() > rightEnvelope.getXMax() ||\n                leftEnvelope.getYMax() < rightEnvelope.getYMin() ||\n                leftEnvelope.getYMin() > rightEnvelope.getYMax()) {\n            return false;\n        }\n\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.overlaps(rightGeometry);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @SqlNullable\n    @Description(\"Returns TRUE if the geometries have at least one point in common, but their interiors do not intersect\")\n    @ScalarFunction(\"ST_Touches\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stTouches(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.touches(rightGeometry);\n    }",
    "replace": "    @SqlNullable\n    @Description(\"Returns TRUE if the geometries have at least one point in common, but their interiors do not intersect\")\n    @ScalarFunction(\"ST_Touches\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stTouches(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        Envelope leftEnvelope = deserializeEnvelope(left);\n        Envelope rightEnvelope = deserializeEnvelope(right);\n        if (leftEnvelope == null || rightEnvelope == null ||\n                leftEnvelope.getXMax() < rightEnvelope.getXMin() ||\n                leftEnvelope.getXMin() > rightEnvelope.getXMax() ||\n                leftEnvelope.getYMax() < rightEnvelope.getYMin() ||\n                leftEnvelope.getYMin() > rightEnvelope.getYMax()) {\n            return false;\n        }\n\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.touches(rightGeometry);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @SqlNullable\n    @Description(\"Returns TRUE if the geometry A is completely inside geometry B\")\n    @ScalarFunction(\"ST_Within\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stWithin(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.within(rightGeometry);\n    }",
    "replace": "    @SqlNullable\n    @Description(\"Returns TRUE if the geometry A is completely inside geometry B\")\n    @ScalarFunction(\"ST_Within\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stWithin(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        Envelope leftEnvelope = deserializeEnvelope(left);\n        if (leftEnvelope == null) {\n            return true;\n        }\n\n        Envelope rightEnvelope = deserializeEnvelope(right);\n        if (rightEnvelope == null || !rightEnvelope.contains(leftEnvelope)) {\n            return false;\n        }\n\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.within(rightGeometry);\n    }"
  }
]
```