My overall improvement strategy is to optimize the `array_distinct` function for common cases where the input array has no duplicates or is very small.

First, I'll add a check to handle arrays with fewer than two elements more efficiently. Such arrays are inherently distinct, so we can return them directly without any processing.

Second, for arrays that are processed, I'll add a check at the end to see if any duplicates were actually found. If no duplicates were found, the original array is returned, avoiding the cost of building a new `Block`. This is particularly beneficial as `BlockBuilder.build()` can involve a data copy, which is expensive. This optimization significantly improves performance for inputs that are already distinct.

These changes preserve the original functionality while improving performance for common scenarios.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayDistinctFunction.java",
    "search": "    public static Block distinct(Type type, Block array)\n    {\n        if (array.getPositionCount() == 0) {\n            return array;\n        }\n\n        TypedSet typedSet = new TypedSet(type, array.getPositionCount());\n        BlockBuilder distinctElementBlockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), array.getPositionCount());\n        for (int i = 0; i < array.getPositionCount(); i++) {\n            if (!typedSet.contains(array, i)) {\n                typedSet.add(array, i);\n                type.appendTo(array, i, distinctElementBlockBuilder);\n            }\n        }\n\n        return distinctElementBlockBuilder.build();\n    }",
    "replace": "    public static Block distinct(Type type, Block array)\n    {\n        if (array.getPositionCount() < 2) {\n            return array;\n        }\n\n        TypedSet typedSet = new TypedSet(type, array.getPositionCount());\n        BlockBuilder distinctElementBlockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), array.getPositionCount());\n        for (int i = 0; i < array.getPositionCount(); i++) {\n            if (!typedSet.contains(array, i)) {\n                typedSet.add(array, i);\n                type.appendTo(array, i, distinctElementBlockBuilder);\n            }\n        }\n\n        if (distinctElementBlockBuilder.getPositionCount() == array.getPositionCount()) {\n            return array;\n        }\n        return distinctElementBlockBuilder.build();\n    }"
  }
]
```