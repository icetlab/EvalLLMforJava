diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
index 93aeb97e76..319c52959f 100644
--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java
@@ -343,26 +343,20 @@ public class ByteSelectiveStreamReader
             nullsCopy = new boolean[positionCount];
         }
 
-        int positionIndex = 0;
-        int nextPosition = positions[positionIndex];
-        for (int i = 0; i < outputPositionCount; i++) {
-            if (outputPositions[i] < nextPosition) {
-                continue;
+        int outputPositionsIndex = 0;
+        for (int i = 0; i < positionCount; i++) {
+            int position = positions[i];
+            while (outputPositions[outputPositionsIndex] < position) {
+                outputPositionsIndex++;
             }
 
-            assert outputPositions[i] == nextPosition;
+            assert outputPositions[outputPositionsIndex] == position;
 
-            valuesCopy[positionIndex] = this.values[i];
+            valuesCopy[i] = this.values[outputPositionsIndex];
             if (nullsCopy != null) {
-                nullsCopy[positionIndex] = this.nulls[i];
-            }
-
-            positionIndex++;
-            if (positionIndex >= positionCount) {
-                break;
+                nullsCopy[i] = this.nulls[outputPositionsIndex];
             }
-
-            nextPosition = positions[positionIndex];
+            outputPositionsIndex++;
         }
 
         return new ByteArrayBlock(positionCount, Optional.ofNullable(nullsCopy), valuesCopy);
@@ -401,26 +395,23 @@ public class ByteSelectiveStreamReader
 
     private void compactValues(int[] positions, int positionCount, boolean compactNulls)
     {
-        int positionIndex = 0;
-        int nextPosition = positions[positionIndex];
-        for (int i = 0; i < outputPositionCount; i++) {
-            if (outputPositions[i] < nextPosition) {
-                continue;
+        int outputPositionsIndex = 0;
+        for (int i = 0; i < positionCount; i++) {
+            int position = positions[i];
+            while (outputPositions[outputPositionsIndex] < position) {
+                outputPositionsIndex++;
             }
 
-            assert outputPositions[i] == nextPosition;
+            assert outputPositions[outputPositionsIndex] == position;
 
-            values[positionIndex] = values[i];
+            if (i != outputPositionsIndex) {
+                values[i] = values[outputPositionsIndex];
                 if (compactNulls) {
-                nulls[positionIndex] = nulls[i];
+                    nulls[i] = nulls[outputPositionsIndex];
                 }
-            outputPositions[positionIndex] = nextPosition;
-
-            positionIndex++;
-            if (positionIndex >= positionCount) {
-                break;
             }
-            nextPosition = positions[positionIndex];
+            outputPositions[i] = position;
+            outputPositionsIndex++;
         }
 
         outputPositionCount = positionCount;
diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java
index 720023399d..28c811ce5e 100644
--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java
+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java
@@ -48,13 +48,23 @@ final class ReaderUtils
     public static byte[] unpackByteNulls(byte[] values, boolean[] isNull)
     {
         byte[] result = new byte[isNull.length];
+        int valuesPosition = 0;
+        int resultPosition = 0;
+        while (resultPosition < isNull.length) {
+            while (resultPosition < isNull.length && isNull[resultPosition]) {
+                resultPosition++;
+            }
+            if (resultPosition == isNull.length) {
+                break;
+            }
 
-        int position = 0;
-        for (int i = 0; i < isNull.length; i++) {
-            if (!isNull[i]) {
-                result[i] = values[position];
-                position++;
+            int nonNullsStart = resultPosition;
+            while (resultPosition < isNull.length && !isNull[resultPosition]) {
+                resultPosition++;
             }
+            int nonNullsCount = resultPosition - nonNullsStart;
+            System.arraycopy(values, valuesPosition, result, nonNullsStart, nonNullsCount);
+            valuesPosition += nonNullsCount;
         }
         return result;
     }
@@ -62,13 +72,23 @@ final class ReaderUtils
     public static short[] unpackShortNulls(short[] values, boolean[] isNull)
     {
         short[] result = new short[isNull.length];
+        int valuesPosition = 0;
+        int resultPosition = 0;
+        while (resultPosition < isNull.length) {
+            while (resultPosition < isNull.length && isNull[resultPosition]) {
+                resultPosition++;
+            }
+            if (resultPosition == isNull.length) {
+                break;
+            }
 
-        int position = 0;
-        for (int i = 0; i < isNull.length; i++) {
-            if (!isNull[i]) {
-                result[i] = values[position];
-                position++;
+            int nonNullsStart = resultPosition;
+            while (resultPosition < isNull.length && !isNull[resultPosition]) {
+                resultPosition++;
             }
+            int nonNullsCount = resultPosition - nonNullsStart;
+            System.arraycopy(values, valuesPosition, result, nonNullsStart, nonNullsCount);
+            valuesPosition += nonNullsCount;
         }
         return result;
     }
@@ -76,13 +96,23 @@ final class ReaderUtils
     public static int[] unpackIntNulls(int[] values, boolean[] isNull)
     {
         int[] result = new int[isNull.length];
+        int valuesPosition = 0;
+        int resultPosition = 0;
+        while (resultPosition < isNull.length) {
+            while (resultPosition < isNull.length && isNull[resultPosition]) {
+                resultPosition++;
+            }
+            if (resultPosition == isNull.length) {
+                break;
+            }
 
-        int position = 0;
-        for (int i = 0; i < isNull.length; i++) {
-            if (!isNull[i]) {
-                result[i] = values[position];
-                position++;
+            int nonNullsStart = resultPosition;
+            while (resultPosition < isNull.length && !isNull[resultPosition]) {
+                resultPosition++;
             }
+            int nonNullsCount = resultPosition - nonNullsStart;
+            System.arraycopy(values, valuesPosition, result, nonNullsStart, nonNullsCount);
+            valuesPosition += nonNullsCount;
         }
         return result;
     }
@@ -90,13 +120,23 @@ final class ReaderUtils
     public static long[] unpackLongNulls(long[] values, boolean[] isNull)
     {
         long[] result = new long[isNull.length];
+        int valuesPosition = 0;
+        int resultPosition = 0;
+        while (resultPosition < isNull.length) {
+            while (resultPosition < isNull.length && isNull[resultPosition]) {
+                resultPosition++;
+            }
+            if (resultPosition == isNull.length) {
+                break;
+            }
 
-        int position = 0;
-        for (int i = 0; i < isNull.length; i++) {
-            if (!isNull[i]) {
-                result[i] = values[position];
-                position++;
+            int nonNullsStart = resultPosition;
+            while (resultPosition < isNull.length && !isNull[resultPosition]) {
+                resultPosition++;
             }
+            int nonNullsCount = resultPosition - nonNullsStart;
+            System.arraycopy(values, valuesPosition, result, nonNullsStart, nonNullsCount);
+            valuesPosition += nonNullsCount;
         }
         return result;
     }
