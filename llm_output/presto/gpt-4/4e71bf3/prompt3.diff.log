Iâ€™ve hoisted the filter failure offsets out of the loop and removed the redundant null check, reducing per-iteration overhead in the hot readWithFilter path.

```json
[
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java",
    "search": "int streamPosition = 0;\n        outputPositionCount = 0;\n        for (int i = 0; i < positionCount; i++) {",
    "replace": "int streamPosition = 0;\n        outputPositionCount = 0;\n        int precedingPositionsToFail = filter.getPrecedingPositionsToFail();\n        int succeedingPositionsToFail = filter.getSucceedingPositionsToFail();\n        for (int i = 0; i < positionCount; i++) {"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java",
    "search": "if (filter != null) {\n                outputPositionCount -= filter.getPrecedingPositionsToFail();\n                int succeedingPositionsToFail = filter.getSucceedingPositionsToFail();\n                if (succeedingPositionsToFail > 0) {\n                    int positionsToSkip = 0;\n                    for (int j = 0; j < succeedingPositionsToFail; j++) {\n                        i++;\n                        int nextPosition = positions[i];\n                        positionsToSkip += 1 + nextPosition - streamPosition;\n                        streamPosition = nextPosition + 1;\n                    }\n                    skip(positionsToSkip);\n                }\n            }",
    "replace": "outputPositionCount -= precedingPositionsToFail;\n            if (succeedingPositionsToFail > 0) {\n                int positionsToSkip = 0;\n                for (int j = 0; j < succeedingPositionsToFail; j++) {\n                    i++;\n                    int nextPosition = positions[i];\n                    positionsToSkip += 1 + nextPosition - streamPosition;\n                    streamPosition = nextPosition + 1;\n                }\n                skip(positionsToSkip);\n            }"
  }
]
```