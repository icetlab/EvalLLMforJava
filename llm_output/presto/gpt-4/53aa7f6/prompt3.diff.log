The changes below convert the immutable `blockBuilders` list into a mutable `ArrayList` once at construction time and then reuse and reset its entries in-place in `project()`, avoiding repeated list allocations on every call.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/GeneratedPageProjection.java",
    "search": "import java.util.List;",
    "replace": "import java.util.List;\nimport java.util.ArrayList;"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/GeneratedPageProjection.java",
    "search": "this.blockBuilders = projections.stream().map(RowExpression::getType).map(type -> type.createBlockBuilder(null, 1)).collect(toImmutableList());",
    "replace": "List<BlockBuilder> builders = projections.stream()\n        .map(RowExpression::getType)\n        .map(type -> type.createBlockBuilder(null, 1))\n        .collect(toImmutableList());\nthis.blockBuilders = new ArrayList<>(builders);"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/GeneratedPageProjection.java",
    "search": "blockBuilders = blockBuilders.stream().map(blockBuilder -> blockBuilder.newBlockBuilderLike(null)).collect(toImmutableList());",
    "replace": "for (int i = 0; i < blockBuilders.size(); i++) {\n    blockBuilders.set(i, blockBuilders.get(i).newBlockBuilderLike(null));\n}"
  }
]
```