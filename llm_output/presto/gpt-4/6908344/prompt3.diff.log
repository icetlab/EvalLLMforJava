Iâ€™ve increased the initial buffer size for slice outputs to reduce costly resizes during serialization, and cut down on object allocations in JTS deserialization by reading multipoint coordinates directly instead of creating individual Point instances.

```json
[
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "        DynamicSliceOutput output = new DynamicSliceOutput(100);",
    "replace": "        // bump initial capacity to reduce buffer expansions for larger geometries\n        DynamicSliceOutput output = new DynamicSliceOutput(1024);"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java",
    "search": "        DynamicSliceOutput output = new DynamicSliceOutput(100);",
    "replace": "        // bump initial capacity to reduce buffer expansions for larger geometries\n        DynamicSliceOutput output = new DynamicSliceOutput(1024);"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java",
    "search": "        Point[] points = new Point[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n            points[i] = readPoint(input, false);\n        }\n        return GEOMETRY_FACTORY.createMultiPoint(points);",
    "replace": "        // read raw coordinates directly to avoid per-point object allocation\n        Coordinate[] coords = new Coordinate[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n            coords[i] = readCoordinate(input);\n        }\n        return GEOMETRY_FACTORY.createMultiPoint(coords);"
  }
]
```