Iâ€™ve added a shared `PackedCoordinateSequenceFactory` to avoid creating a new factory on every call, updated the NaN check to correctly verify both `x` and `y`, and wired the code to use the shared factory.

```json
[
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "private static final Block EMPTY_ARRAY_OF_INTS = IntegerType.INTEGER.createFixedSizeBlockBuilder(0).build();",
    "replace": "private static final Block EMPTY_ARRAY_OF_INTS = IntegerType.INTEGER.createFixedSizeBlockBuilder(0).build();\nprivate static final PackedCoordinateSequenceFactory COORDINATE_SEQUENCE_FACTORY = new PackedCoordinateSequenceFactory();"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "PackedCoordinateSequenceFactory coordinateSequenceFactory = new PackedCoordinateSequenceFactory();",
    "replace": ""
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "return coordinateSequenceFactory.create(coordinates, 2);",
    "replace": "return COORDINATE_SEQUENCE_FACTORY.create(coordinates, 2);"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "if (Double.isNaN(x) || Double.isNaN(x)) {\n                throw new PrestoException(INVALID_FUNCTION_ARGUMENT, format(\"Invalid input to %s: empty point at index %s\", functionName, i + 1));\n            }",
    "replace": "if (Double.isNaN(x) || Double.isNaN(y)) {\n                throw new PrestoException(INVALID_FUNCTION_ARGUMENT, format(\"Invalid input to %s: empty point at index %s\", functionName, i + 1));\n            }"
  }
]
```