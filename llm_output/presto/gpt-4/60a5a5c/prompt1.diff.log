I have removed unnecessary slice copying in serialization to avoid extra memory allocations and replaced stream-based page splitting with a hand-written loop using ArrayList to reduce overhead. An import for ArrayList was also added.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java",
    "search": "else {\n            //  Encryption disabled, slice data is likely much smaller than its backing buffer\n            //  either because of compression or dynamic sizing of the initial output slice\n            slice = Slices.copyOf(slice);\n        }",
    "replace": "else {\n            // Encryption disabled, leave slice as-is to avoid unnecessary copy\n        }"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java",
    "search": "import java.util.OptionalInt;",
    "replace": "import java.util.OptionalInt;\nimport java.util.ArrayList;"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java",
    "search": "List<SerializedPage> serializedPages = splitPage(pagePartition, DEFAULT_MAX_PAGE_SIZE_IN_BYTES).stream()\n                            .map(serde::serialize)\n                            .collect(toImmutableList());",
    "replace": "List<SerializedPage> serializedPages = new ArrayList<>();\n                    for (Page split : splitPage(pagePartition, DEFAULT_MAX_PAGE_SIZE_IN_BYTES)) {\n                        serializedPages.add(serde.serialize(split));\n                    }"
  }
]
```