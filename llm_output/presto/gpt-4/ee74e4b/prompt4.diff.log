Iâ€™ve optimized the PageProcessor to avoid costly and skew-sensitive calls to Page.getSizeInBytes() by capturing the cumulative pageSize during batch processing and propagating it through the ProcessBatchResult. The processor now uses this precomputed size for batching decisions.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java",
    "search": "private static class ProcessBatchResult\n    {\n        private final ProcessBatchState state;\n        private final Page page;\n\n        private ProcessBatchResult(ProcessBatchState state, Page page)\n        {\n            this.state = state;\n            this.page = page;\n        }\n",
    "replace": "private static class ProcessBatchResult\n    {\n        private final ProcessBatchState state;\n        private final Page page;\n        private final long pageSize;\n\n        private ProcessBatchResult(ProcessBatchState state, Page page, long pageSize)\n        {\n            this.state = state;\n            this.page = page;\n            this.pageSize = pageSize;\n        }\n"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java",
    "search": "public static ProcessBatchResult processBatchYield()\n        {\n            return new ProcessBatchResult(ProcessBatchState.YIELD, null);\n        }",
    "replace": "public static ProcessBatchResult processBatchYield()\n        {\n            return new ProcessBatchResult(ProcessBatchState.YIELD, null, 0);\n        }"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java",
    "search": "public static ProcessBatchResult processBatchTooLarge()\n        {\n            return new ProcessBatchResult(ProcessBatchState.PAGE_TOO_LARGE, null);\n        }",
    "replace": "public static ProcessBatchResult processBatchTooLarge()\n        {\n            return new ProcessBatchResult(ProcessBatchState.PAGE_TOO_LARGE, null, 0);\n        }"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java",
    "search": "public static ProcessBatchResult processBatchSuccess(Page page)\n        {\n            return new ProcessBatchResult(ProcessBatchState.SUCCESS, requireNonNull(page));\n        }",
    "replace": "public static ProcessBatchResult processBatchSuccess(Page page, long pageSize)\n        {\n            return new ProcessBatchResult(ProcessBatchState.SUCCESS, requireNonNull(page), pageSize);\n        }"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java",
    "search": "return ProcessBatchResult.processBatchSuccess(new Page(positionsBatch.size(), blocks));",
    "replace": "return ProcessBatchResult.processBatchSuccess(new Page(positionsBatch.size(), blocks), pageSize);"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java",
    "search": "public Page getPage()\n        {\n            verify(page != null);\n            verify(state == ProcessBatchState.SUCCESS);\n            return page;\n        }",
    "replace": "public Page getPage()\n        {\n            verify(page != null);\n            verify(state == ProcessBatchState.SUCCESS);\n            return page;\n        }\n\n        public long getPageSize()\n        {\n            return pageSize;\n        }"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java",
    "search": "long pageSize = resultPage.getSizeInBytes();",
    "replace": "long pageSize = result.getPageSize();"
  }
]
```