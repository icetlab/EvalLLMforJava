I have optimized the `distinct` method to avoid unnecessary block building when there are no duplicates, and to lazily initialize and populate the output only upon detecting the first duplicate. This reduces memory allocations and work for the common case of already distinct arrays.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayDistinctFunction.java",
    "search": "public static Block distinct(Type type, Block array)\n    {\n        if (array.getPositionCount() == 0) {\n            return array;\n        }\n\n        TypedSet typedSet = new TypedSet(type, array.getPositionCount());\n        BlockBuilder distinctElementBlockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), array.getPositionCount());\n        for (int i = 0; i < array.getPositionCount(); i++) {\n            if (!typedSet.contains(array, i)) {\n                typedSet.add(array, i);\n                type.appendTo(array, i, distinctElementBlockBuilder);\n            }\n        }\n\n        return distinctElementBlockBuilder.build();\n    }",
    "replace": "public static Block distinct(Type type, Block array)\n    {\n        int positionCount = array.getPositionCount();\n        if (positionCount == 0) {\n            return array;\n        }\n\n        TypedSet typedSet = new TypedSet(type, positionCount);\n        BlockBuilder builder = null;\n        for (int i = 0; i < positionCount; i++) {\n            if (!typedSet.contains(array, i)) {\n                typedSet.add(array, i);\n                if (builder != null) {\n                    type.appendTo(array, i, builder);\n                }\n            }\n            else {\n                // first duplicate found, initialize builder and copy previous distinct elements\n                if (builder == null) {\n                    builder = type.createBlockBuilder(new BlockBuilderStatus(), positionCount);\n                    for (int j = 0; j < i; j++) {\n                        type.appendTo(array, j, builder);\n                    }\n                }\n                // skip duplicate element\n            }\n        }\n\n        return (builder == null) ? array : builder.build();\n    }"
  }
]
```