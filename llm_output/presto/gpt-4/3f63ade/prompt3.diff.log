Iâ€™ve added a fast path for small arrays (<=8 elements) that uses simple nested loops and direct `Type.equalTo` comparisons, avoiding the overhead of constructing and managing a `TypedSet`. For larger arrays, we fall back to the original `TypedSet` approach.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayDistinctFunction.java",
    "search": "public static Block distinct(Type type, Block array)\n    {\n        if (array.getPositionCount() == 0) {\n            return array;\n        }\n\n        TypedSet typedSet = new TypedSet(type, array.getPositionCount());\n        BlockBuilder distinctElementBlockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), array.getPositionCount());\n        for (int i = 0; i < array.getPositionCount(); i++) {\n            if (!typedSet.contains(array, i)) {\n                typedSet.add(array, i);\n                type.appendTo(array, i, distinctElementBlockBuilder);\n            }\n        }\n\n        return distinctElementBlockBuilder.build();\n    }",
    "replace": "public static Block distinct(Type type, Block array)\n    {\n        int positionCount = array.getPositionCount();\n        if (positionCount == 0) {\n            return array;\n        }\n\n        BlockBuilder builder = type.createBlockBuilder(new BlockBuilderStatus(), positionCount);\n\n        // Fast path for small arrays: nested-loop comparison\n        if (positionCount <= 8) {\n            for (int i = 0; i < positionCount; i++) {\n                boolean duplicate = false;\n                for (int j = 0; j < i; j++) {\n                    if (type.equalTo(array, j, array, i)) {\n                        duplicate = true;\n                        break;\n                    }\n                }\n                if (!duplicate) {\n                    type.appendTo(array, i, builder);\n                }\n            }\n            return builder.build();\n        }\n\n        // Fallback to TypedSet for larger arrays\n        TypedSet typedSet = new TypedSet(type, positionCount);\n        for (int i = 0; i < positionCount; i++) {\n            if (!typedSet.contains(array, i)) {\n                typedSet.add(array, i);\n                type.appendTo(array, i, builder);\n            }\n        }\n\n        return builder.build();\n    }"
  }
]
```