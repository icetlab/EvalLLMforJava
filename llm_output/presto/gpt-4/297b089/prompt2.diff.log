We’ve re-enabled the original `useBatchMode` heuristics so that in many cases (especially for selective or CHAR truncation reads) we’ll switch out of batch mode and avoid reading and materializing the entire lengthVector when only a subset is needed. This restores the commented logic in `useBatchMode` and should cut down on unnecessary work while preserving all existing behavior.

```json
[
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDirectSelectiveStreamReader.java",
    "search": "private boolean useBatchMode(int positionCount, int totalPositionCount)\n    {\n        return true;",
    "replace": "private boolean useBatchMode(int positionCount, int totalPositionCount)\n    {\n        // If there is no LENGTH stream or we need to enforce char truncation, do not batch\n        if (lengthStream == null || maxCodePointCount >= 0) {\n            return false;\n        }\n\n        double inputFilterRate = (double) (totalPositionCount - positionCount) / totalPositionCount;\n        if (filter == null) {\n            // No filter: batch when skipping <=50% of rows\n            return inputFilterRate >= 0.0 && inputFilterRate <= 0.5;\n        }\n        else {\n            // With filter: batch except when skip rate is around 10%\n            return (inputFilterRate >= 0.0 && inputFilterRate <= 0.05)\n                    || (inputFilterRate >= 0.15 && inputFilterRate <= 0.5);\n        }"
  }
]
```