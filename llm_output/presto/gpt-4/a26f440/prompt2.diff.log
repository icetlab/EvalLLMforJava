I’ve optimized the `merge(TDigest other)` path for the common case of merging small digests by avoiding temporary `Centroid` object creation and `ArrayList` resizing, and by doing an in-place Fisher–Yates shuffle over the other digest’s primitive centroid arrays. This reduces object churn and speeds up small-distribution merges.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java",
    "search": "public void merge(TDigest other)\n    {\n        checkArgument(other != null, \"Cannot merge with a null t-digest\");\n        checkArgument(this.publicCompression == other.getCompressionFactor(), \"TDigests must have the same compression, found (%s, %s)\", this.publicCompression,\n                other.getCompressionFactor());\n        List<Centroid> tmp = new ArrayList<>();\n        for (Centroid centroid : other.centroids()) {\n            tmp.add(centroid);\n        }\n\n        shuffle(tmp, gen);\n        for (Centroid centroid : tmp) {\n            add(centroid.getMean(), centroid.getWeight());\n        }\n    }",
    "replace": "public void merge(TDigest other)\n    {\n        checkArgument(other != null, \"Cannot merge with a null t-digest\");\n        checkArgument(this.publicCompression == other.getCompressionFactor(), \"TDigests must have the same compression, found (%s, %s)\", this.publicCompression,\n                other.getCompressionFactor());\n        // optimize merge for small distributions using primitive arrays\n        other.compress();\n        int n = other.activeCentroids;\n        if (n == 0) {\n            return;\n        }\n        int[] indices = new int[n];\n        for (int i = 0; i < n; i++) {\n            indices[i] = i;\n        }\n        // Fisher–Yates shuffle\n        for (int i = n - 1; i > 0; i--) {\n            int j = gen.nextInt(i + 1);\n            int tmpIdx = indices[i];\n            indices[i] = indices[j];\n            indices[j] = tmpIdx;\n        }\n        for (int idx : indices) {\n            long w = Math.round(other.weight[idx]);\n            add(other.mean[idx], w);\n        }\n    }"
  }
]
```