I’ve added a fast‐path in the `specialize()` method that detects when the source and target map key/value types are identical and returns an identity cast implementation immediately, avoiding the work of building processors in this common case. Existing behavior is preserved for all other type combinations.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapToMapCast.java",
    "search": "        MethodHandle target = MethodHandles.insertArguments(METHOD_HANDLE, 0, keyProcessor, valueProcessor, toMapType);",
    "replace": "        if (fromKeyType.equals(toKeyType) && fromValueType.equals(toValueType)) {\n            MethodHandle identity = MethodHandles.dropArguments(MethodHandles.identity(Block.class), 0, SqlFunctionProperties.class);\n            return new BuiltInScalarFunctionImplementation(true, ImmutableList.of(valueTypeArgumentProperty(RETURN_NULL_ON_NULL)), identity);\n        }\n        MethodHandle target = MethodHandles.insertArguments(METHOD_HANDLE, 0, keyProcessor, valueProcessor, toMapType);"
  }
]
```