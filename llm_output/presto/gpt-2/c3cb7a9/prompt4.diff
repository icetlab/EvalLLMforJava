diff --git a/presto-main/src/main/java/com/facebook/presto/operator/WindowOperator.java b/presto-main/src/main/java/com/facebook/presto/operator/WindowOperator.java
index 6813ba04fa..c348ef1a5c 100644
--- a/presto-main/src/main/java/com/facebook/presto/operator/WindowOperator.java
+++ b/presto-main/src/main/java/com/facebook/presto/operator/WindowOperator.java
@@ -899,7 +899,12 @@ public class WindowOperator
         checkArgument(page.getPositionCount() > 0, "Must have at least one position");
         checkPositionIndex(startPosition, page.getPositionCount(), "startPosition out of bounds");
 
-        return findEndPosition(startPosition, page.getPositionCount(), (firstPosition, secondPosition) -> pagesHashStrategy.rowEqualsRow(firstPosition, page, secondPosition, page));
+        final int positionCount = page.getPositionCount();
+        int pos = startPosition + 1;
+        while (pos < positionCount && pagesHashStrategy.rowEqualsRow(startPosition, page, pos, page)) {
+            pos++;
+        }
+        return pos;
     }
 
     // Assumes input grouped on relevant pagesHashStrategy columns
@@ -908,7 +913,12 @@ public class WindowOperator
         checkArgument(pagesIndex.getPositionCount() > 0, "Must have at least one position");
         checkPositionIndex(startPosition, pagesIndex.getPositionCount(), "startPosition out of bounds");
 
-        return findEndPosition(startPosition, pagesIndex.getPositionCount(), (firstPosition, secondPosition) -> pagesIndex.positionEqualsPosition(pagesHashStrategy, firstPosition, secondPosition));
+        final int positionCount = pagesIndex.getPositionCount();
+        int pos = startPosition + 1;
+        while (pos < positionCount && pagesIndex.positionEqualsPosition(pagesHashStrategy, startPosition, pos)) {
+            pos++;
+        }
+        return pos;
     }
 
     /**
