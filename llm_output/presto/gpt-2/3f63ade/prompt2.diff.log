The change adds a fast‚Äêpath for arrays of size 0, 1, or 2, avoiding the general `TypedSet` approach in those cases and thus reducing overhead for small arrays.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayDistinctFunction.java",
    "search": "public static Block distinct(Type type, Block array)\n    {\n        if (array.getPositionCount() == 0) {\n            return array;\n        }\n\n        TypedSet typedSet = new TypedSet(type, array.getPositionCount());",
    "replace": "public static Block distinct(Type type, Block array)\n    {\n        int positionCount = array.getPositionCount();\n        if (positionCount <= 1) {\n            return array;\n        }\n        if (positionCount == 2) {\n            // if two elements are different, return original; if equal, return single-element block\n            if (!type.equalTo(array, 0, array, 1)) {\n                return array;\n            }\n            BlockBuilder builder = type.createBlockBuilder(new BlockBuilderStatus(), 1);\n            type.appendTo(array, 0, builder);\n            return builder.build();\n        }\n\n        TypedSet typedSet = new TypedSet(type, positionCount);"
  }
]
```