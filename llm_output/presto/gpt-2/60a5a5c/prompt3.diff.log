Iâ€™ve optimized PagesSerde to eliminate unnecessary copying when encryption is disabled, and replaced the stream-based serialization loop in PartitionedOutputOperator.flush with an imperative loop to reduce lambda and temporary list overhead, adding the required import for ArrayList.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java",
    "search": "if (spillCipher.isPresent()) {\n            slice = Slices.wrappedBuffer(spillCipher.get().encrypt(slice.toByteBuffer()));\n            markers = ENCRYPTED.set(markers);\n        }\n        else {\n            //  Encryption disabled, slice data is likely much smaller than its backing buffer\n            //  either because of compression or dynamic sizing of the initial output slice\n            slice = Slices.copyOf(slice);\n        }",
    "replace": "if (spillCipher.isPresent()) {\n            slice = Slices.wrappedBuffer(spillCipher.get().encrypt(slice.toByteBuffer()));\n            markers = ENCRYPTED.set(markers);\n        }\n        else {\n            // Encryption disabled, no copy needed\n        }"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java",
    "search": "List<SerializedPage> serializedPages = splitPage(pagePartition, DEFAULT_MAX_PAGE_SIZE_IN_BYTES).stream()\n                            .map(serde::serialize)\n                            .collect(toImmutableList());",
    "replace": "List<Page> pages = splitPage(pagePartition, DEFAULT_MAX_PAGE_SIZE_IN_BYTES);\n                    List<SerializedPage> serializedPages = new ArrayList<>(pages.size());\n                    for (Page partPage : pages) {\n                        serializedPages.add(serde.serialize(partPage));\n                    }"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java",
    "search": "import java.util.List;",
    "replace": "import java.util.List;\nimport java.util.ArrayList;"
  }
]
```