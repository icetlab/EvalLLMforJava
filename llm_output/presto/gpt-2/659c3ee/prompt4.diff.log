I’ve added a new fast‐path in `readNoFilter` to handle the contiguous, no-filter-but-with-nulls case by reading the null mask in bulk, using `dataStream.next` to pull just the non-null values, and then unpacking those into the full `values` array with `ReaderUtils.unpackByteNulls`. This avoids per-row interleaving of `nextBit`/`next` calls.

```json
[
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java",
    "search": "return positionCount;\n        }",
    "replace": "return positionCount;\n        }\n\n        // fast path: contiguous chunk with nulls\n        if (presentStream != null && positions[0] == 0 && positions[positionCount - 1] == positionCount - 1) {\n            // read null mask\n            int nonNullCount = 0;\n            for (int i = 0; i < positionCount; i++) {\n                boolean present = presentStream.nextBit();\n                nulls[i] = !present;\n                if (present) {\n                    nonNullCount++;\n                }\n            }\n            // read only the non-null bytes\n            byte[] nonNullValues = new byte[nonNullCount];\n            dataStream.next(nonNullValues, nonNullCount);\n            // unpack into full values array\n            byte[] unpacked = ReaderUtils.unpackByteNulls(nonNullValues, nulls);\n            System.arraycopy(unpacked, 0, values, 0, positionCount);\n            outputPositionCount = positionCount;\n            return positionCount;\n        }"
  }
]
```