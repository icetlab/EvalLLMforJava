Iâ€™ve hoisted the `presentStream` null check outside of the per-position loop in `readNoFilter` to eliminate a redundant branch on every iteration, which should improve performance when reading contiguous rows with no nulls and no filter.

```json
[
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java",
    "search": "private int readNoFilter(int[] positions, int positionCount)\n            throws IOException\n    {\n        // filter == null implies outputRequired == true\n        int streamPosition = 0;\n        for (int i = 0; i < positionCount; i++) {\n            int position = positions[i];\n            if (position > streamPosition) {\n                skip(position - streamPosition);\n                streamPosition = position;\n            }\n\n            if (presentStream != null && !presentStream.nextBit()) {\n                nulls[i] = true;\n            }\n            else {\n                values[i] = dataStream.next();\n                if (presentStream != null) {\n                    nulls[i] = false;\n                }\n            }\n            streamPosition++;\n        }\n        outputPositionCount = positionCount;\n        return streamPosition;\n    }",
    "replace": "private int readNoFilter(int[] positions, int positionCount)\n            throws IOException\n    {\n        int streamPosition = 0;\n        if (presentStream == null) {\n            // no nulls to check\n            for (int i = 0; i < positionCount; i++) {\n                int position = positions[i];\n                if (position > streamPosition) {\n                    skip(position - streamPosition);\n                    streamPosition = position;\n                }\n                values[i] = dataStream.next();\n                streamPosition++;\n            }\n        }\n        else {\n            for (int i = 0; i < positionCount; i++) {\n                int position = positions[i];\n                if (position > streamPosition) {\n                    skip(position - streamPosition);\n                    streamPosition = position;\n                }\n                if (!presentStream.nextBit()) {\n                    nulls[i] = true;\n                }\n                else {\n                    values[i] = dataStream.next();\n                    nulls[i] = false;\n                }\n                streamPosition++;\n            }\n        }\n        outputPositionCount = positionCount;\n        return streamPosition;\n    }"
  }
]
```