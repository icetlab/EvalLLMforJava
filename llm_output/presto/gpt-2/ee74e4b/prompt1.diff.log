Iâ€™ve reduced per-batch object allocations by reusing a single `Block[] blocks` array within each `ProjectSelectedPositions`, avoiding a new array creation on every `processBatch` invocation.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java",
    "search": "private Work<List<Block>> pageProjectWork;",
    "replace": "private Work<List<Block>> pageProjectWork;\n        // reused across batches to avoid per-batch allocations\n        private final Block[] blocks;"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java",
    "search": "this.previouslyComputedResults = new Block[outputCount];",
    "replace": "this.previouslyComputedResults = new Block[outputCount];\n            // allocate the reusable blocks array once\n            this.blocks = new Block[outputCount];"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java",
    "search": "Block[] blocks = new Block[outputCount];",
    "replace": "// reuse the pre-allocated blocks array to reduce allocations\n                    Arrays.fill(blocks, null);"
  }
]
```