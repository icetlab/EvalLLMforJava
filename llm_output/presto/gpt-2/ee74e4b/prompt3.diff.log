I have inlined the lazy block loaded check to remove the extra method call and initialized the dictionarySourceIds map with a capacity hint to reduce rehashing overhead.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java",
    "search": "for (int channel = 0; channel < page.getChannelCount(); channel++) {\n                Block block = page.getBlock(channel);\n                if (!isNotLoadedLazyBlock(block)) {\n                    block.retainedBytesForEachPart((object, size) -> {\n                        if (referenceCountMap.incrementAndGet(object) == 1) {\n                            retainedSizeInBytes += size;\n                        }\n                    });\n                }\n            }",
    "replace": "for (int channel = 0; channel < page.getChannelCount(); channel++) {\n                Block block = page.getBlock(channel);\n                // inline lazy block check to avoid method call\n                if (!(block instanceof LazyBlock) || ((LazyBlock) block).isLoaded()) {\n                    block.retainedBytesForEachPart((object, size) -> {\n                        if (referenceCountMap.incrementAndGet(object) == 1) {\n                            retainedSizeInBytes += size;\n                        }\n                    });\n                }\n            }"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java",
    "search": "private static class DictionarySourceIdFunction\n            implements Function<DictionaryBlock, DictionaryId>\n    {\n        private final Map<DictionaryId, DictionaryId> dictionarySourceIds = new HashMap<>();",
    "replace": "private static class DictionarySourceIdFunction\n            implements Function<DictionaryBlock, DictionaryId>\n    {\n        // pre-size to reduce rehashing\n        private final Map<DictionaryId, DictionaryId> dictionarySourceIds = new HashMap<>(16);"
  }
]
```