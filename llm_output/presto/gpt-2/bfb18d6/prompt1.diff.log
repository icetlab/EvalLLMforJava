Iâ€™ve introduced a shared, static `PackedCoordinateSequenceFactory` to avoid re-allocating it on every call, removed the per-call factory instantiation, and replaced lambdas in the union setup with a simple for-loop to eliminate lambda and array-initialization overhead.

```json
[
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "private static final int NUMBER_OF_DIMENSIONS = 3;",
    "replace": "private static final int NUMBER_OF_DIMENSIONS = 3;\nprivate static final PackedCoordinateSequenceFactory COORD_SEQ_FACTORY = new PackedCoordinateSequenceFactory();"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "PackedCoordinateSequenceFactory coordinateSequenceFactory = new PackedCoordinateSequenceFactory();",
    "replace": ""
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "return coordinateSequenceFactory.create(coordinates, 2);",
    "replace": "return COORD_SEQ_FACTORY.create(coordinates, 2);"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "setAll(cursorsByDimension, i -> new ListeningGeometryCursor());\n        setAll(operatorsByDimension, i -> OperatorUnion.local().execute(cursorsByDimension[i], null, null));",
    "replace": "for (int i = 0; i < NUMBER_OF_DIMENSIONS; i++) {\n            cursorsByDimension[i] = new ListeningGeometryCursor();\n            operatorsByDimension[i] = OperatorUnion.local().execute(cursorsByDimension[i], null, null);\n        }"
  }
]
```