diff --git a/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java b/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
index ea2cf982de..4504391197 100644
--- a/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
+++ b/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
@@ -37,12 +37,16 @@ public class SingleMapBlock
     private final int offset;
     private final int positionCount;  // The number of keys in this single map * 2
     private final AbstractMapBlock mapBlock;
+    private final int keyOffset;
+    private final int entryCount;
 
     SingleMapBlock(int offset, int positionCount, AbstractMapBlock mapBlock)
     {
         this.offset = offset;
         this.positionCount = positionCount;
         this.mapBlock = mapBlock;
+        this.keyOffset = offset / 2;
+        this.entryCount = positionCount / 2;
     }
 
     @Override
@@ -54,9 +58,9 @@ public class SingleMapBlock
     @Override
     public long getSizeInBytes()
     {
-        return mapBlock.getRawKeyBlock().getRegionSizeInBytes(offset / 2, positionCount / 2) +
-                mapBlock.getRawValueBlock().getRegionSizeInBytes(offset / 2, positionCount / 2) +
-                sizeOfIntArray(positionCount / 2 * HASH_MULTIPLIER);
+        return mapBlock.getRawKeyBlock().getRegionSizeInBytes(keyOffset, entryCount) +
+                mapBlock.getRawValueBlock().getRegionSizeInBytes(keyOffset, entryCount) +
+                sizeOfIntArray(entryCount * HASH_MULTIPLIER);
     }
 
     @Override
@@ -162,8 +166,8 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
+        int hashTableOffset = keyOffset * HASH_MULTIPLIER;
+        int hashTableSize = entryCount * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
@@ -209,8 +213,8 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
+        int hashTableOffset = keyOffset * HASH_MULTIPLIER;
+        int hashTableSize = entryCount * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
@@ -253,8 +257,8 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
+        int hashTableOffset = keyOffset * HASH_MULTIPLIER;
+        int hashTableSize = entryCount * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
@@ -297,8 +301,8 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
+        int hashTableOffset = keyOffset * HASH_MULTIPLIER;
+        int hashTableSize = entryCount * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
@@ -341,8 +345,8 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
+        int hashTableOffset = keyOffset * HASH_MULTIPLIER;
+        int hashTableSize = entryCount * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
@@ -385,8 +389,8 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
+        int hashTableOffset = keyOffset * HASH_MULTIPLIER;
+        int hashTableSize = entryCount * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
