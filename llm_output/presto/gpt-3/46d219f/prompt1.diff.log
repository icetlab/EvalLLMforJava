Iâ€™ve optimized the sizing of the internal structures by using the actual number of map entries (positions/2) rather than raw position counts, reducing over-allocation and memory churn.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapConcatFunction.java",
    "search": "TypedSet typedSet = new TypedSet(keyType, rightMap.getPositionCount());\n        BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), leftMap.getPositionCount() + rightMap.getPositionCount());",
    "replace": "int rightEntryCount = rightMap.getPositionCount() / 2;\n        int leftEntryCount = leftMap.getPositionCount() / 2;\n        TypedSet typedSet = new TypedSet(keyType, rightEntryCount);\n        BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), leftEntryCount + rightEntryCount);"
  }
]
```