diff --git a/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java b/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
index ea2cf982de..81a7afbf16 100644
--- a/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
+++ b/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
@@ -36,12 +36,16 @@ public class SingleMapBlock
 
     private final int offset;
     private final int positionCount;  // The number of keys in this single map * 2
+    private final int offsetHalf;
+    private final int positionCountHalf;
     private final AbstractMapBlock mapBlock;
 
     SingleMapBlock(int offset, int positionCount, AbstractMapBlock mapBlock)
     {
         this.offset = offset;
         this.positionCount = positionCount;
+        this.offsetHalf = offset >> 1;
+        this.positionCountHalf = positionCount >> 1;
         this.mapBlock = mapBlock;
     }
 
@@ -54,8 +58,8 @@ public class SingleMapBlock
     @Override
     public long getSizeInBytes()
     {
-        return mapBlock.getRawKeyBlock().getRegionSizeInBytes(offset / 2, positionCount / 2) +
-                mapBlock.getRawValueBlock().getRegionSizeInBytes(offset / 2, positionCount / 2) +
+        return mapBlock.getRawKeyBlock().getRegionSizeInBytes(offsetHalf, positionCountHalf) +
+                mapBlock.getRawValueBlock().getRegionSizeInBytes(offsetHalf, positionCountHalf) +
                 sizeOfIntArray(positionCount / 2 * HASH_MULTIPLIER);
     }
 
@@ -162,8 +166,8 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
+        int hashTableOffset = offsetHalf * HASH_MULTIPLIER;
+        int hashTableSize = positionCountHalf * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
@@ -173,7 +177,7 @@ public class SingleMapBlock
             Boolean match;
             try {
                 // assuming maps with indeterminate keys are not supported
-                match = (Boolean) mapBlock.keyBlockNativeEquals.invoke(mapBlock.getRawKeyBlock(), offset / 2 + keyPosition, nativeValue);
+                match = (Boolean) mapBlock.keyBlockNativeEquals.invoke(mapBlock.getRawKeyBlock(), offsetHalf + keyPosition, nativeValue);
             }
             catch (Throwable throwable) {
                 throw handleThrowable(throwable);
@@ -209,8 +213,8 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
+        int hashTableOffset = offsetHalf * HASH_MULTIPLIER;
+        int hashTableSize = positionCountHalf * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
@@ -253,8 +257,8 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
+        int hashTableOffset = offsetHalf * HASH_MULTIPLIER;
+        int hashTableSize = positionCountHalf * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
@@ -297,8 +301,8 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
+        int hashTableOffset = offsetHalf * HASH_MULTIPLIER;
+        int hashTableSize = positionCountHalf * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
@@ -341,8 +345,8 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
+        int hashTableOffset = offsetHalf * HASH_MULTIPLIER;
+        int hashTableSize = positionCountHalf * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
@@ -385,8 +389,8 @@ public class SingleMapBlock
             throw handleThrowable(throwable);
         }
 
-        int hashTableOffset = offset / 2 * HASH_MULTIPLIER;
-        int hashTableSize = positionCount / 2 * HASH_MULTIPLIER;
+        int hashTableOffset = offsetHalf * HASH_MULTIPLIER;
+        int hashTableSize = positionCountHalf * HASH_MULTIPLIER;
         int position = computePosition(hashCode, hashTableSize);
         while (true) {
             int keyPosition = hashTable[hashTableOffset + position];
