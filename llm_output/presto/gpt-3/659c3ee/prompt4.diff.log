I have added a fast‐path in `readNoFilter` to bulk‐read non‐null values when the requested positions are contiguous and there may be nulls. This avoids per‐value `dataStream.next()` calls, improving throughput in the no‐filter, with‐nulls case.

```json
[
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java",
    "search": "if (presentStream == null && positions[positionCount - 1] == positionCount - 1) {\n            // contiguous chunk of rows, no nulls\n            dataStream.next(values, positionCount);\n            outputPositionCount = positionCount;\n            return positionCount;\n        }",
    "replace": "if (presentStream == null && positions[positionCount - 1] == positionCount - 1) {\n            // contiguous chunk of rows, no nulls\n            dataStream.next(values, positionCount);\n            outputPositionCount = positionCount;\n            return positionCount;\n        }\n\n        // contiguous chunk of rows, possibly with nulls\n        if (presentStream != null && positions[positionCount - 1] == positionCount - 1) {\n            // read null flags and count non-nulls\n            int nonNullCount = 0;\n            for (int i = 0; i < positionCount; i++) {\n                boolean present = presentStream.nextBit();\n                nulls[i] = !present;\n                if (present) {\n                    nonNullCount++;\n                }\n            }\n            // read non-null values in bulk\n            byte[] nonNullValues = new byte[nonNullCount];\n            dataStream.next(nonNullValues, nonNullCount);\n            // unpack values based on null flags\n            int valueIndex = 0;\n            for (int i = 0; i < positionCount; i++) {\n                if (!nulls[i]) {\n                    values[i] = nonNullValues[valueIndex++];\n                }\n                else {\n                    values[i] = 0;\n                }\n            }\n            outputPositionCount = positionCount;\n            return positionCount;\n        }"
  }
]
```