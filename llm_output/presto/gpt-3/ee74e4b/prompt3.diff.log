Iâ€™ve inlined the LazyBlock check within `updateRetainedSize` to eliminate the extra method call and cached the channel count to avoid repeated calls, reducing overhead when accounting retained sizes. I also removed the now-unused `isNotLoadedLazyBlock` helper.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java",
    "search": "private void updateRetainedSize()\n        {\n            // increment the size only when it is the first reference\n            retainedSizeInBytes = Page.INSTANCE_SIZE + SizeOf.sizeOfObjectArray(page.getChannelCount());\n            ReferenceCountMap referenceCountMap = new ReferenceCountMap();\n            for (int channel = 0; channel < page.getChannelCount(); channel++) {\n                Block block = page.getBlock(channel);\n                if (!isNotLoadedLazyBlock(block)) {\n                    block.retainedBytesForEachPart((object, size) -> {\n                        if (referenceCountMap.incrementAndGet(object) == 1) {\n                            retainedSizeInBytes += size;\n                        }\n                    });\n                }\n            }\n            for (Block previouslyComputedResult : previouslyComputedResults) {\n                if (previouslyComputedResult != null) {\n                    previouslyComputedResult.retainedBytesForEachPart((object, size) -> {\n                        if (referenceCountMap.incrementAndGet(object) == 1) {\n                            retainedSizeInBytes += size;\n                        }\n                    });\n                }\n            }\n\n            memoryContext.setBytes(retainedSizeInBytes);\n        }",
    "replace": "private void updateRetainedSize()\n        {\n            int channelCount = page.getChannelCount();\n            // increment the size only when it is the first reference\n            retainedSizeInBytes = Page.INSTANCE_SIZE + SizeOf.sizeOfObjectArray(channelCount);\n            ReferenceCountMap referenceCountMap = new ReferenceCountMap();\n            for (int channel = 0; channel < channelCount; channel++) {\n                Block block = page.getBlock(channel);\n                if (block instanceof LazyBlock) {\n                    if (!((LazyBlock) block).isLoaded()) {\n                        continue;\n                    }\n                }\n                block.retainedBytesForEachPart((object, size) -> {\n                    if (referenceCountMap.incrementAndGet(object) == 1) {\n                        retainedSizeInBytes += size;\n                    }\n                });\n            }\n            for (Block previouslyComputedResult : previouslyComputedResults) {\n                if (previouslyComputedResult != null) {\n                    if (previouslyComputedResult instanceof LazyBlock) {\n                        if (!((LazyBlock) previouslyComputedResult).isLoaded()) {\n                            continue;\n                        }\n                    }\n                    previouslyComputedResult.retainedBytesForEachPart((object, size) -> {\n                        if (referenceCountMap.incrementAndGet(object) == 1) {\n                            retainedSizeInBytes += size;\n                        }\n                    });\n                }\n            }\n\n            memoryContext.setBytes(retainedSizeInBytes);\n        }"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java",
    "search": "private static boolean isNotLoadedLazyBlock(Block block)\n    {\n        return (block instanceof LazyBlock) && !((LazyBlock) block).isLoaded();\n    }",
    "replace": ""
  }
]
```