The changes introduce a reusable `compressionBuffer` in `PagesSerde` to avoid per-page ByteBuffer allocations for compression. We allocate or grow this buffer only when needed, then clear and reuse it, copying out only the final compressed bytes. This reduces GC pressure and improves throughput while preserving correctness.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java",
    "search": "private final Optional<SpillCipher> spillCipher;",
    "replace": "private final Optional<SpillCipher> spillCipher;\nprivate ByteBuffer compressionBuffer;"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java",
    "search": "if (compressor.isPresent()) {\n            ByteBuffer compressionBuffer = ByteBuffer.allocate(compressor.get().maxCompressedLength(uncompressedSize));\n            compressor.get().compress(slice.toByteBuffer(), compressionBuffer);\n            compressionBuffer.flip();\n            if ((((double) compressionBuffer.remaining()) / uncompressedSize) <= MINIMUM_COMPRESSION_RATIO) {\n                slice = Slices.wrappedBuffer(compressionBuffer);\n                markers = COMPRESSED.set(markers);\n            }\n        }",
    "replace": "if (compressor.isPresent()) {\n            int maxLength = compressor.get().maxCompressedLength(uncompressedSize);\n            if (compressionBuffer == null || compressionBuffer.capacity() < maxLength) {\n                compressionBuffer = ByteBuffer.allocate(maxLength);\n            } else {\n                compressionBuffer.clear();\n            }\n            compressor.get().compress(slice.toByteBuffer(), compressionBuffer);\n            compressionBuffer.flip();\n            int compressedSize = compressionBuffer.remaining();\n            if (((double) compressedSize / uncompressedSize) <= MINIMUM_COMPRESSION_RATIO) {\n                // copy out only the compressed bytes into a new Slice\n                slice = Slices.copyOf(Slices.wrappedBuffer(compressionBuffer));\n                markers = COMPRESSED.set(markers);\n            }\n        }"
  }
]
```