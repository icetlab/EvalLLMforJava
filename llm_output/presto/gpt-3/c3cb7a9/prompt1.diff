diff --git a/presto-main/src/main/java/com/facebook/presto/operator/WindowOperator.java b/presto-main/src/main/java/com/facebook/presto/operator/WindowOperator.java
index 6813ba04fa..85f6eda64a 100644
--- a/presto-main/src/main/java/com/facebook/presto/operator/WindowOperator.java
+++ b/presto-main/src/main/java/com/facebook/presto/operator/WindowOperator.java
@@ -40,6 +40,7 @@ import com.google.common.util.concurrent.ListenableFuture;
 import javax.annotation.Nullable;
 
 import java.util.List;
+import java.util.ArrayList;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
@@ -254,8 +255,16 @@ public class WindowOperator
                 .limit(preSortedChannelPrefix)
                 .collect(toImmutableList());
 
-        List<Integer> unGroupedOrderChannels = ImmutableList.copyOf(concat(unGroupedPartitionChannels, sortChannels));
-        List<SortOrder> unGroupedOrdering = ImmutableList.copyOf(concat(nCopies(unGroupedPartitionChannels.size(), ASC_NULLS_LAST), sortOrder));
+        // Build unGroupedOrderChannels directly to avoid intermediate iterables
+        List<Integer> unGroupedOrderChannels = new ArrayList<>(unGroupedPartitionChannels.size() + sortChannels.size());
+        unGroupedOrderChannels.addAll(unGroupedPartitionChannels);
+        unGroupedOrderChannels.addAll(sortChannels);
+        // Build unGroupedOrdering directly to avoid intermediate iterables
+        List<SortOrder> unGroupedOrdering = new ArrayList<>(unGroupedPartitionChannels.size() + sortOrder.size());
+        for (int i = 0; i < unGroupedPartitionChannels.size(); i++) {
+            unGroupedOrdering.add(ASC_NULLS_LAST);
+        }
+        unGroupedOrdering.addAll(sortOrder);
 
         List<Integer> orderChannels;
         List<SortOrder> ordering;
