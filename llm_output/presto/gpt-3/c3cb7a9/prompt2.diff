diff --git a/presto-main/src/main/java/com/facebook/presto/operator/WindowOperator.java b/presto-main/src/main/java/com/facebook/presto/operator/WindowOperator.java
index 6813ba04fa..81ee90b677 100644
--- a/presto-main/src/main/java/com/facebook/presto/operator/WindowOperator.java
+++ b/presto-main/src/main/java/com/facebook/presto/operator/WindowOperator.java
@@ -923,21 +923,33 @@ public class WindowOperator
         checkArgument(startPosition >= 0, "startPosition must be greater or equal than zero: %s", startPosition);
         checkArgument(startPosition < endPosition, "startPosition (%s) must be less than endPosition (%s)", startPosition, endPosition);
 
-        int left = startPosition;
-        int right = endPosition;
-
-        while (left + 1 < right) {
-            int middle = (left + right) >>> 1;
+        // Quick check for immediate next position
+        int next = startPosition + 1;
+        if (next >= endPosition || !comparator.test(startPosition, next)) {
+            return next;
+        }
 
-            if (comparator.test(startPosition, middle)) {
-                left = middle;
+        // Exponential search to find a window where values differ
+        int bound = 1;
+        while (startPosition + bound < endPosition && comparator.test(startPosition, startPosition + bound)) {
+            bound <<= 1;
         }
-            else {
-                right = middle;
+
+        // Define binary search bounds
+        int low = startPosition + (bound >> 1) + 1;
+        int high = Math.min(startPosition + bound, endPosition);
+
+        // Binary refinement to find exact boundary
+        while (low < high) {
+            int mid = low + ((high - low) >>> 1);
+            if (comparator.test(startPosition, mid)) {
+                low = mid + 1;
+            } else {
+                high = mid;
             }
         }
 
-        return right;
+        return low;
     }
 
     @Override
