I’ve added a fast‐path in readNoFilter to skip per‐row null checks when there is no PRESENT stream (i.e., no nulls), which should significantly reduce overhead when reading contiguous non‐null rows without a filter.

```json
[
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java",
    "search": "private int readNoFilter(int[] positions, int positionCount)\n            throws IOException\n    {\n        // filter == null implies outputRequired == true",
    "replace": "private int readNoFilter(int[] positions, int positionCount)\n            throws IOException\n    {\n        // fast path when no nulls\n        if (presentStream == null) {\n            int streamPosition = 0;\n            for (int i = 0; i < positionCount; i++) {\n                int position = positions[i];\n                if (position > streamPosition) {\n                    skip(position - streamPosition);\n                    streamPosition = position;\n                }\n                values[i] = dataStream.next();\n                streamPosition++;\n            }\n            outputPositionCount = positionCount;\n            return streamPosition;\n        }\n        // filter == null implies outputRequired == true"
  }
]
```