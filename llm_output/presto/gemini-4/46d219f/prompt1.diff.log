The provided `map_concat` function pre-allocates memory for a `TypedSet` and a `BlockBuilder`. The original implementation incorrectly used `positionCount` instead of the number of map entries (`positionCount / 2`) for capacity estimation. This leads to allocating roughly twice the necessary memory. My changes correct the capacity calculations for both `TypedSet` and `BlockBuilder` to reduce memory overhead and improve performance.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapConcatFunction.java",
    "search": "        TypedSet typedSet = new TypedSet(keyType, rightMap.getPositionCount());",
    "replace": "        TypedSet typedSet = new TypedSet(keyType, rightMap.getPositionCount() / 2);"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapConcatFunction.java",
    "search": "        BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), leftMap.getPositionCount() + rightMap.getPositionCount());",
    "replace": "        BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), (leftMap.getPositionCount() + rightMap.getPositionCount()) / 2);"
  }
]
```