The performance issue is related to the serialization of ESRI Point types. The current implementation serializes an extra ESRI-specific type integer for points, which is redundant and incurs overhead during both serialization and deserialization.

My improvement strategy is to optimize the serialization format for `Point` geometries to be more compact and efficient. I will remove the unnecessary ESRI type integer from the serialized representation of points. This involves:
1.  In `GeometrySerde`, I'll add special handling for `Point` types to bypass the generic, and slower, ESRI shape generation (`geometryToEsriShape`). Instead, I will directly write the point's coordinates. The corresponding deserialization logic will be updated to read these coordinates directly, avoiding the use of `OperatorImportFromESRIShape` for points.
2.  In `JtsGeometrySerde`, I will apply a similar optimization by removing the writing of the ESRI type integer for points and updating the reading logic to match.

These changes will reduce the size of serialized points and speed up their processing by using a more direct serialization/deserialization path, while ensuring that the functionality for all geometry types remains correct and that all tests pass.

```json
[
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "import static com.facebook.presto.geospatial.GeometryUtils.isEsriNaN;",
    "replace": "import static com.facebook.presto.geospatial.GeometryUtils.isEsriNaN;\nimport static com.facebook.presto.geospatial.GeometryUtils.translateToAVNaN;"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "    private static void writeSimpleGeometry(DynamicSliceOutput output, GeometryType type, OGCGeometry geometry)\n    {\n        output.appendByte(type.code());\n        Geometry esriGeometry = requireNonNull(geometry.getEsriGeometry(), \"esriGeometry is null\");\n        byte[] shape = geometryToEsriShape(esriGeometry);\n        output.appendBytes(shape);\n    }",
    "replace": "    private static void writeSimpleGeometry(DynamicSliceOutput output, GeometryType type, OGCGeometry geometry)\n    {\n        output.appendByte(type.code());\n        Geometry esriGeometry = requireNonNull(geometry.getEsriGeometry(), \"esriGeometry is null\");\n        if (type == GeometryType.POINT) {\n            Point point = (Point) esriGeometry;\n            if (point.isEmpty()) {\n                output.writeDouble(translateToAVNaN(Double.NaN));\n                output.writeDouble(translateToAVNaN(Double.NaN));\n            }\n            else {\n                output.writeDouble(point.getX());\n                output.writeDouble(point.getY());\n            }\n            return;\n        }\n        byte[] shape = geometryToEsriShape(esriGeometry);\n        output.appendBytes(shape);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "    private static OGCGeometry readSimpleGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length)\n    {\n        int currentPosition = toIntExact(input.position());\n        ByteBuffer geometryBuffer = inputSlice.toByteBuffer(currentPosition, length).slice();\n        input.setPosition(currentPosition + length);\n        Geometry esriGeometry = OperatorImportFromESRIShape.local().execute(0, Unknown, geometryBuffer);\n        return createFromEsriGeometry(esriGeometry, type.isMultitype());\n    }",
    "replace": "    private static OGCGeometry readSimpleGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length)\n    {\n        if (type == GeometryType.POINT) {\n            double x = input.readDouble();\n            double y = input.readDouble();\n            Point point = new Point(x, y);\n            if (isEsriNaN(x) || isEsriNaN(y)) {\n                point.setEmpty();\n            }\n            return new OGCPoint(point, null);\n        }\n\n        int currentPosition = toIntExact(input.position());\n        ByteBuffer geometryBuffer = inputSlice.toByteBuffer(currentPosition, length).slice();\n        input.setPosition(currentPosition + length);\n        Geometry esriGeometry = OperatorImportFromESRIShape.local().execute(0, Unknown, geometryBuffer);\n        return createFromEsriGeometry(esriGeometry, type.isMultitype());\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "    private static Envelope getPointEnvelope(BasicSliceInput input)\n    {\n        // skip type injected by esri\n        input.readInt();",
    "replace": "    private static Envelope getPointEnvelope(BasicSliceInput input)\n    {\n        // The ESRI type is NOT serialized for points, so no need to skip it"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java",
    "search": "        output.writeByte(GeometryType.POINT.code());\n        output.writeInt(EsriShapeType.POINT.code);",
    "replace": "        output.writeByte(GeometryType.POINT.code());"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java",
    "search": "    private static Point readPoint(SliceInput input, boolean skipType)\n    {\n        if (skipType) {\n            skipEsriType(input);\n        }",
    "replace": "    private static Point readPoint(SliceInput input, boolean skipType)\n    {\n        if (skipType) {\n            // The ESRI type is NOT serialized for points, so no need to skip it\n        }"
  }
]
```