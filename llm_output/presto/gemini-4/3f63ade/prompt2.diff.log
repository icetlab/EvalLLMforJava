The `array_distinct` function's performance is improved by adding specialized fast-path logic for small arrays. The original implementation uses a `TypedSet` to find unique elements, which has some overhead.

For arrays with 0 or 1 elements, they are already distinct, so the function can return the input array directly. For arrays with exactly 2 elements, a direct comparison is more efficient than building a `TypedSet`. This comparison correctly handles `NULL` values, treating two `NULL`s as equal. For arrays larger than 2 elements, the original `TypedSet`-based implementation is used.

These changes avoid unnecessary object allocations and computations for common small-array cases, leading to better performance.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayDistinctFunction.java",
    "search": "public static Block distinct(Type type, Block array)\n    {\n        if (array.getPositionCount() == 0) {\n            return array;\n        }\n\n        TypedSet typedSet = new TypedSet(type, array.getPositionCount());\n        BlockBuilder distinctElementBlockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), array.getPositionCount());\n        for (int i = 0; i < array.getPositionCount(); i++) {\n            if (!typedSet.contains(array, i)) {\n                typedSet.add(array, i);\n                type.appendTo(array, i, distinctElementBlockBuilder);\n            }\n        }\n\n        return distinctElementBlockBuilder.build();\n    }",
    "replace": "    public static Block distinct(Type type, Block array)\n    {\n        int positionCount = array.getPositionCount();\n        if (positionCount <= 1) {\n            return array;\n        }\n\n        if (positionCount == 2) {\n            boolean areEqual;\n            if (array.isNull(0)) {\n                areEqual = array.isNull(1);\n            }\n            else if (array.isNull(1)) {\n                areEqual = false;\n            }\n            else {\n                areEqual = type.equalTo(array, 0, array, 1);\n            }\n\n            if (areEqual) {\n                BlockBuilder blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1);\n                type.appendTo(array, 0, blockBuilder);\n                return blockBuilder.build();\n            }\n            else {\n                return array;\n            }\n        }\n\n        TypedSet typedSet = new TypedSet(type, positionCount);\n        BlockBuilder distinctElementBlockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), positionCount);\n        for (int i = 0; i < positionCount; i++) {\n            if (!typedSet.contains(array, i)) {\n                typedSet.add(array, i);\n                type.appendTo(array, i, distinctElementBlockBuilder);\n            }\n        }\n\n        return distinctElementBlockBuilder.build();\n    }"
  }
]
```