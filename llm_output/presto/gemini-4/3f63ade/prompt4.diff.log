This change optimizes the `array_distinct` function by introducing a fast path for small arrays. Specifically:
- For arrays with 0 or 1 elements, which are inherently distinct, the function now returns the input array directly, avoiding any processing overhead.
- For arrays with exactly 2 elements, it performs a direct comparison. If the elements are distinct, the original array is returned. If they are duplicates, a new array with a single element is constructed. This approach avoids the overhead of creating a `TypedSet` and a `BlockBuilder` for these common small array cases, leading to a significant performance improvement.
The original, more general implementation is retained for arrays with more than two elements.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayDistinctFunction.java",
    "search": "    public static Block distinct(Type type, Block array)\n    {\n        if (array.getPositionCount() == 0) {\n            return array;\n        }\n\n        TypedSet typedSet = new TypedSet(type, array.getPositionCount());\n        BlockBuilder distinctElementBlockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), array.getPositionCount());\n        for (int i = 0; i < array.getPositionCount(); i++) {\n            if (!typedSet.contains(array, i)) {\n                typedSet.add(array, i);\n                type.appendTo(array, i, distinctElementBlockBuilder);\n            }\n        }\n\n        return distinctElementBlockBuilder.build();\n    }",
    "replace": "    public static Block distinct(Type type, Block array)\n    {\n        int positionCount = array.getPositionCount();\n        if (positionCount <= 1) {\n            return array;\n        }\n\n        if (positionCount == 2) {\n            boolean nullAt0 = array.isNull(0);\n            boolean nullAt1 = array.isNull(1);\n            if (nullAt0 == nullAt1) {\n                // either both are null or both are not null\n                if (nullAt0 || type.equalTo(array, 0, array, 1)) {\n                    // if both are null, they are duplicates\n                    // if both are not null, check for equality\n                    BlockBuilder blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1);\n                    type.appendTo(array, 0, blockBuilder);\n                    return blockBuilder.build();\n                }\n            }\n            // if one is null and the other is not, they are distinct\n            // if both are not null and not equal, they are distinct\n            return array;\n        }\n\n        TypedSet typedSet = new TypedSet(type, positionCount);\n        BlockBuilder distinctElementBlockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), positionCount);\n        for (int i = 0; i < positionCount; i++) {\n            if (!typedSet.contains(array, i)) {\n                typedSet.add(array, i);\n                type.appendTo(array, i, distinctElementBlockBuilder);\n            }\n        }\n\n        return distinctElementBlockBuilder.build();\n    }"
  }
]
```