The primary performance improvement in this set of changes is to avoid unnecessary deserialization of full geometry objects when possible.

For functions that operate on the geometry's bounding box (like `ST_XMax`, `ST_YMax`, `ST_XMin`, `ST_YMin`), I've modified them to only deserialize the envelope, which is a much faster operation. This also required changing their return types to `Double` and adding the `@SqlNullable` annotation to correctly handle empty geometries as per the existing unit tests.

For spatial relationship functions (`ST_Contains`, `ST_Crosses`, `ST_Disjoint`, `ST_Equals`, `ST_Intersects`, `ST_Overlaps`, `ST_Touches`, `ST_Within`), I've introduced a preliminary check on the geometries' envelopes. These checks can often determine the result without performing a full, computationally expensive geometry deserialization and comparison. For example, if the bounding boxes of two geometries do not intersect, the geometries themselves cannot intersect. This "fail-fast" or "succeed-fast" approach significantly improves performance for these functions.

Finally, a now-unused helper method `getEnvelope` has been removed to maintain code cleanliness.

```json
[
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @Description(\"Returns X maxima of a bounding box of a Geometry\")\n    @ScalarFunction(\"ST_XMax\")\n    @SqlType(DOUBLE)\n    public static double stXMax(@SqlType(GEOMETRY_TYPE_NAME) Slice input)\n    {\n        OGCGeometry geometry = deserialize(input);\n        Envelope envelope = getEnvelope(geometry);\n        return envelope.getXMax();\n    }",
    "replace": "    @SqlNullable\n    @Description(\"Returns X maxima of a bounding box of a Geometry\")\n    @ScalarFunction(\"ST_XMax\")\n    @SqlType(DOUBLE)\n    public static Double stXMax(@SqlType(GEOMETRY_TYPE_NAME) Slice input)\n    {\n        Envelope envelope = deserializeEnvelope(input);\n        if (envelope == null) {\n            return null;\n        }\n        return envelope.getXMax();\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @Description(\"Returns Y maxima of a bounding box of a Geometry\")\n    @ScalarFunction(\"ST_YMax\")\n    @SqlType(DOUBLE)\n    public static double stYMax(@SqlType(GEOMETRY_TYPE_NAME) Slice input)\n    {\n        OGCGeometry geometry = deserialize(input);\n        Envelope envelope = getEnvelope(geometry);\n        return envelope.getYMax();\n    }",
    "replace": "    @SqlNullable\n    @Description(\"Returns Y maxima of a bounding box of a Geometry\")\n    @ScalarFunction(\"ST_YMax\")\n    @SqlType(DOUBLE)\n    public static Double stYMax(@SqlType(GEOMETRY_TYPE_NAME) Slice input)\n    {\n        Envelope envelope = deserializeEnvelope(input);\n        if (envelope == null) {\n            return null;\n        }\n        return envelope.getYMax();\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @Description(\"Returns X minima of a bounding box of a Geometry\")\n    @ScalarFunction(\"ST_XMin\")\n    @SqlType(DOUBLE)\n    public static double stXMin(@SqlType(GEOMETRY_TYPE_NAME) Slice input)\n    {\n        OGCGeometry geometry = deserialize(input);\n        Envelope envelope = getEnvelope(geometry);\n        return envelope.getXMin();\n    }",
    "replace": "    @SqlNullable\n    @Description(\"Returns X minima of a bounding box of a Geometry\")\n    @ScalarFunction(\"ST_XMin\")\n    @SqlType(DOUBLE)\n    public static Double stXMin(@SqlType(GEOMETRY_TYPE_NAME) Slice input)\n    {\n        Envelope envelope = deserializeEnvelope(input);\n        if (envelope == null) {\n            return null;\n        }\n        return envelope.getXMin();\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @Description(\"Returns Y minima of a bounding box of a Geometry\")\n    @ScalarFunction(\"ST_YMin\")\n    @SqlType(DOUBLE)\n    public static double stYMin(@SqlType(GEOMETRY_TYPE_NAME) Slice input)\n    {\n        OGCGeometry geometry = deserialize(input);\n        Envelope envelope = getEnvelope(geometry);\n        return envelope.getYMin();\n    }",
    "replace": "    @SqlNullable\n    @Description(\"Returns Y minima of a bounding box of a Geometry\")\n    @ScalarFunction(\"ST_YMin\")\n    @SqlType(DOUBLE)\n    public static Double stYMin(@SqlType(GEOMETRY_TYPE_NAME) Slice input)\n    {\n        Envelope envelope = deserializeEnvelope(input);\n        if (envelope == null) {\n            return null;\n        }\n        return envelope.getYMin();\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @SqlNullable\n    @Description(\"Returns TRUE if the supplied geometries have some, but not all, interior points in common\")\n    @ScalarFunction(\"ST_Crosses\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stCrosses(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.crosses(rightGeometry);\n    }",
    "replace": "    @SqlNullable\n    @Description(\"Returns TRUE if the supplied geometries have some, but not all, interior points in common\")\n    @ScalarFunction(\"ST_Crosses\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stCrosses(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        Envelope leftEnvelope = deserializeEnvelope(left);\n        Envelope rightEnvelope = deserializeEnvelope(right);\n        if (leftEnvelope == null || rightEnvelope == null) {\n            return false;\n        }\n        leftEnvelope.intersect(rightEnvelope);\n        if (leftEnvelope.isEmpty()) {\n            return false;\n        }\n\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.crosses(rightGeometry);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @SqlNullable\n    @Description(\"Returns TRUE if the Geometries do not spatially intersect - if they do not share any space together\")\n    @ScalarFunction(\"ST_Disjoint\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stDisjoint(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.disjoint(rightGeometry);\n    }",
    "replace": "    @SqlNullable\n    @Description(\"Returns TRUE if the Geometries do not spatially intersect - if they do not share any space together\")\n    @ScalarFunction(\"ST_Disjoint\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stDisjoint(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        Envelope leftEnvelope = deserializeEnvelope(left);\n        Envelope rightEnvelope = deserializeEnvelope(right);\n        if (leftEnvelope == null || rightEnvelope == null) {\n            return true;\n        }\n        leftEnvelope.intersect(rightEnvelope);\n        if (leftEnvelope.isEmpty()) {\n            return true;\n        }\n\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.disjoint(rightGeometry);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @SqlNullable\n    @Description(\"Returns TRUE if the given geometries represent the same geometry\")\n    @ScalarFunction(\"ST_Equals\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stEquals(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.equals(rightGeometry);\n    }",
    "replace": "    @SqlNullable\n    @Description(\"Returns TRUE if the given geometries represent the same geometry\")\n    @ScalarFunction(\"ST_Equals\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stEquals(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        Envelope leftEnvelope = deserializeEnvelope(left);\n        Envelope rightEnvelope = deserializeEnvelope(right);\n        if (leftEnvelope == null) {\n            return rightEnvelope == null;\n        }\n        if (rightEnvelope == null || !leftEnvelope.equals(rightEnvelope)) {\n            return false;\n        }\n\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.equals(rightGeometry);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @SqlNullable\n    @Description(\"Returns TRUE if the Geometries spatially intersect in 2D - (share any portion of space) and FALSE if they don't (they are Disjoint)\")\n    @ScalarFunction(\"ST_Intersects\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stIntersects(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.intersects(rightGeometry);\n    }",
    "replace": "    @SqlNullable\n    @Description(\"Returns TRUE if the Geometries spatially intersect in 2D - (share any portion of space) and FALSE if they don't (they are Disjoint)\")\n    @ScalarFunction(\"ST_Intersects\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stIntersects(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        Envelope leftEnvelope = deserializeEnvelope(left);\n        Envelope rightEnvelope = deserializeEnvelope(right);\n        if (leftEnvelope == null || rightEnvelope == null) {\n            return false;\n        }\n        leftEnvelope.intersect(rightEnvelope);\n        if (leftEnvelope.isEmpty()) {\n            return false;\n        }\n\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.intersects(rightGeometry);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @SqlNullable\n    @Description(\"Returns TRUE if the Geometries share space, are of the same dimension, but are not completely contained by each other\")\n    @ScalarFunction(\"ST_Overlaps\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stOverlaps(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.overlaps(rightGeometry);\n    }",
    "replace": "    @SqlNullable\n    @Description(\"Returns TRUE if the Geometries share space, are of the same dimension, but are not completely contained by each other\")\n    @ScalarFunction(\"ST_Overlaps\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stOverlaps(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        Envelope leftEnvelope = deserializeEnvelope(left);\n        Envelope rightEnvelope = deserializeEnvelope(right);\n        if (leftEnvelope == null || rightEnvelope == null) {\n            return false;\n        }\n        leftEnvelope.intersect(rightEnvelope);\n        if (leftEnvelope.isEmpty()) {\n            return false;\n        }\n\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.overlaps(rightGeometry);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @SqlNullable\n    @Description(\"Returns TRUE if the geometries have at least one point in common, but their interiors do not intersect\")\n    @ScalarFunction(\"ST_Touches\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stTouches(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.touches(rightGeometry);\n    }",
    "replace": "    @SqlNullable\n    @Description(\"Returns TRUE if the geometries have at least one point in common, but their interiors do not intersect\")\n    @ScalarFunction(\"ST_Touches\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stTouches(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        Envelope leftEnvelope = deserializeEnvelope(left);\n        Envelope rightEnvelope = deserializeEnvelope(right);\n        if (leftEnvelope == null || rightEnvelope == null) {\n            return false;\n        }\n        leftEnvelope.intersect(rightEnvelope);\n        if (leftEnvelope.isEmpty()) {\n            return false;\n        }\n\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.touches(rightGeometry);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    @SqlNullable\n    @Description(\"Returns TRUE if the geometry A is completely inside geometry B\")\n    @ScalarFunction(\"ST_Within\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stWithin(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.within(rightGeometry);\n    }",
    "replace": "    @SqlNullable\n    @Description(\"Returns TRUE if the geometry A is completely inside geometry B\")\n    @ScalarFunction(\"ST_Within\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static Boolean stWithin(@SqlType(GEOMETRY_TYPE_NAME) Slice left, @SqlType(GEOMETRY_TYPE_NAME) Slice right)\n    {\n        Envelope leftEnvelope = deserializeEnvelope(left);\n        if (leftEnvelope == null) {\n            return true;\n        }\n        Envelope rightEnvelope = deserializeEnvelope(right);\n        if (rightEnvelope == null || !rightEnvelope.contains(leftEnvelope)) {\n            return false;\n        }\n\n        OGCGeometry leftGeometry = deserialize(left);\n        OGCGeometry rightGeometry = deserialize(right);\n        verifySameSpatialReference(leftGeometry, rightGeometry);\n        return leftGeometry.within(rightGeometry);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java",
    "search": "    private static void validateType(String function, OGCGeometry geometry, Set<GeometryTypeName> validTypes)\n    {\n        GeometryTypeName type = GeometryUtils.valueOf(geometry.geometryType());\n        if (!validTypes.contains(type)) {\n            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, format(\"%s only applies to %s. Input type is: %s\", function, OR_JOINER.join(validTypes), type));\n        }\n    }\n\n    private static Envelope getEnvelope(OGCGeometry geometry)\n    {\n        Envelope envelope = new Envelope();\n        geometry.getEsriGeometry().queryEnvelope(envelope);\n        return envelope;\n    }",
    "replace": "    private static void validateType(String function, OGCGeometry geometry, Set<GeometryTypeName> validTypes)\n    {\n        GeometryTypeName type = GeometryUtils.valueOf(geometry.geometryType());\n        if (!validTypes.contains(type)) {\n            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, format(\"%s only applies to %s. Input type is: %s\", function, OR_JOINER.join(validTypes), type));\n        }\n    }"
  }
]
```