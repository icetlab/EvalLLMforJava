My overall improvement strategy is to optimize the `unpack...Nulls` utility methods in `ReaderUtils.java`. These methods are used to reconstruct data arrays with nulls from a compact representation. The original implementations iterated through the data element by element, which can be inefficient.

My changes replace these element-by-element loops with an approach that identifies contiguous runs of non-null values. For each run, I use `System.arraycopy`, which is a highly optimized, often intrinsic, operation for bulk memory copying. This reduces loop overhead and the number of individual array access operations, leading to better performance, especially for data with low null density.

I have applied this optimization to `unpackByteNulls`, `unpackShortNulls`, `unpackIntNulls`, `unpackLongNulls`, and `unpackLengthNulls`, covering various primitive types handled by these utilities.

```json
[
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java",
    "search": "    public static byte[] unpackByteNulls(byte[] values, boolean[] isNull)\n    {\n        byte[] result = new byte[isNull.length];\n\n        int position = 0;\n        for (int i = 0; i < isNull.length; i++) {\n            if (!isNull[i]) {\n                result[i] = values[position];\n                position++;\n            }\n        }\n        return result;\n    }",
    "replace": "    public static byte[] unpackByteNulls(byte[] values, boolean[] isNull)\n    {\n        byte[] result = new byte[isNull.length];\n        int valuesPosition = 0;\n        for (int i = 0; i < isNull.length; ) {\n            if (isNull[i]) {\n                i++;\n                continue;\n            }\n            int runStart = i;\n            i++;\n            while (i < isNull.length && !isNull[i]) {\n                i++;\n            }\n            int runLength = i - runStart;\n            System.arraycopy(values, valuesPosition, result, runStart, runLength);\n            valuesPosition += runLength;\n        }\n        return result;\n    }"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java",
    "search": "    public static short[] unpackShortNulls(short[] values, boolean[] isNull)\n    {\n        short[] result = new short[isNull.length];\n\n        int position = 0;\n        for (int i = 0; i < isNull.length; i++) {\n            if (!isNull[i]) {\n                result[i] = values[position];\n                position++;\n            }\n        }\n        return result;\n    }",
    "replace": "    public static short[] unpackShortNulls(short[] values, boolean[] isNull)\n    {\n        short[] result = new short[isNull.length];\n        int valuesPosition = 0;\n        for (int i = 0; i < isNull.length; ) {\n            if (isNull[i]) {\n                i++;\n                continue;\n            }\n            int runStart = i;\n            i++;\n            while (i < isNull.length && !isNull[i]) {\n                i++;\n            }\n            int runLength = i - runStart;\n            System.arraycopy(values, valuesPosition, result, runStart, runLength);\n            valuesPosition += runLength;\n        }\n        return result;\n    }"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java",
    "search": "    public static int[] unpackIntNulls(int[] values, boolean[] isNull)\n    {\n        int[] result = new int[isNull.length];\n\n        int position = 0;\n        for (int i = 0; i < isNull.length; i++) {\n            if (!isNull[i]) {\n                result[i] = values[position];\n                position++;\n            }\n        }\n        return result;\n    }",
    "replace": "    public static int[] unpackIntNulls(int[] values, boolean[] isNull)\n    {\n        int[] result = new int[isNull.length];\n        int valuesPosition = 0;\n        for (int i = 0; i < isNull.length; ) {\n            if (isNull[i]) {\n                i++;\n                continue;\n            }\n            int runStart = i;\n            i++;\n            while (i < isNull.length && !isNull[i]) {\n                i++;\n            }\n            int runLength = i - runStart;\n            System.arraycopy(values, valuesPosition, result, runStart, runLength);\n            valuesPosition += runLength;\n        }\n        return result;\n    }"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java",
    "search": "    public static long[] unpackLongNulls(long[] values, boolean[] isNull)\n    {\n        long[] result = new long[isNull.length];\n\n        int position = 0;\n        for (int i = 0; i < isNull.length; i++) {\n            if (!isNull[i]) {\n                result[i] = values[position];\n                position++;\n            }\n        }\n        return result;\n    }",
    "replace": "    public static long[] unpackLongNulls(long[] values, boolean[] isNull)\n    {\n        long[] result = new long[isNull.length];\n        int valuesPosition = 0;\n        for (int i = 0; i < isNull.length; ) {\n            if (isNull[i]) {\n                i++;\n                continue;\n            }\n            int runStart = i;\n            i++;\n            while (i < isNull.length && !isNull[i]) {\n                i++;\n            }\n            int runLength = i - runStart;\n            System.arraycopy(values, valuesPosition, result, runStart, runLength);\n            valuesPosition += runLength;\n        }\n        return result;\n    }"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java",
    "search": "    public static void unpackLengthNulls(int[] values, boolean[] isNull, int nonNullCount)\n    {\n        int nullSuppressedPosition = nonNullCount - 1;\n        for (int outputPosition = isNull.length - 1; outputPosition >= 0; outputPosition--) {\n            if (isNull[outputPosition]) {\n                values[outputPosition] = 0;\n            }\n            else {\n                values[outputPosition] = values[nullSuppressedPosition];\n                nullSuppressedPosition--;\n            }\n        }\n    }",
    "replace": "    public static void unpackLengthNulls(int[] values, boolean[] isNull, int nonNullCount)\n    {\n        int nullSuppressedPosition = nonNullCount - 1;\n        int outputPosition = isNull.length - 1;\n        while (outputPosition >= 0) {\n            if (isNull[outputPosition]) {\n                values[outputPosition] = 0;\n                outputPosition--;\n                continue;\n            }\n\n            int runEnd = outputPosition;\n            while (outputPosition >= 0 && !isNull[outputPosition]) {\n                outputPosition--;\n            }\n            int runLength = runEnd - outputPosition;\n\n            System.arraycopy(values, nullSuppressedPosition - runLength + 1, values, outputPosition + 1, runLength);\n            nullSuppressedPosition -= runLength;\n        }\n    }"
  }
]
```