diff --git a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java
index 720023399d..5c1444f4fe 100644
--- a/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java
+++ b/presto-orc/src/main/java/com/facebook/presto/orc/reader/ReaderUtils.java
@@ -48,13 +48,20 @@ final class ReaderUtils
     public static byte[] unpackByteNulls(byte[] values, boolean[] isNull)
     {
         byte[] result = new byte[isNull.length];
-
-        int position = 0;
-        for (int i = 0; i < isNull.length; i++) {
-            if (!isNull[i]) {
-                result[i] = values[position];
-                position++;
+        int valuesPosition = 0;
+        for (int i = 0; i < isNull.length; ) {
+            if (isNull[i]) {
+                i++;
+                continue;
+            }
+            int runStart = i;
+            i++;
+            while (i < isNull.length && !isNull[i]) {
+                i++;
             }
+            int runLength = i - runStart;
+            System.arraycopy(values, valuesPosition, result, runStart, runLength);
+            valuesPosition += runLength;
         }
         return result;
     }
@@ -62,13 +69,20 @@ final class ReaderUtils
     public static short[] unpackShortNulls(short[] values, boolean[] isNull)
     {
         short[] result = new short[isNull.length];
-
-        int position = 0;
-        for (int i = 0; i < isNull.length; i++) {
-            if (!isNull[i]) {
-                result[i] = values[position];
-                position++;
+        int valuesPosition = 0;
+        for (int i = 0; i < isNull.length; ) {
+            if (isNull[i]) {
+                i++;
+                continue;
             }
+            int runStart = i;
+            i++;
+            while (i < isNull.length && !isNull[i]) {
+                i++;
+            }
+            int runLength = i - runStart;
+            System.arraycopy(values, valuesPosition, result, runStart, runLength);
+            valuesPosition += runLength;
         }
         return result;
     }
@@ -76,13 +90,20 @@ final class ReaderUtils
     public static int[] unpackIntNulls(int[] values, boolean[] isNull)
     {
         int[] result = new int[isNull.length];
-
-        int position = 0;
-        for (int i = 0; i < isNull.length; i++) {
-            if (!isNull[i]) {
-                result[i] = values[position];
-                position++;
+        int valuesPosition = 0;
+        for (int i = 0; i < isNull.length; ) {
+            if (isNull[i]) {
+                i++;
+                continue;
             }
+            int runStart = i;
+            i++;
+            while (i < isNull.length && !isNull[i]) {
+                i++;
+            }
+            int runLength = i - runStart;
+            System.arraycopy(values, valuesPosition, result, runStart, runLength);
+            valuesPosition += runLength;
         }
         return result;
     }
@@ -90,13 +111,20 @@ final class ReaderUtils
     public static long[] unpackLongNulls(long[] values, boolean[] isNull)
     {
         long[] result = new long[isNull.length];
-
-        int position = 0;
-        for (int i = 0; i < isNull.length; i++) {
-            if (!isNull[i]) {
-                result[i] = values[position];
-                position++;
+        int valuesPosition = 0;
+        for (int i = 0; i < isNull.length; ) {
+            if (isNull[i]) {
+                i++;
+                continue;
+            }
+            int runStart = i;
+            i++;
+            while (i < isNull.length && !isNull[i]) {
+                i++;
             }
+            int runLength = i - runStart;
+            System.arraycopy(values, valuesPosition, result, runStart, runLength);
+            valuesPosition += runLength;
         }
         return result;
     }
@@ -104,14 +132,22 @@ final class ReaderUtils
     public static void unpackLengthNulls(int[] values, boolean[] isNull, int nonNullCount)
     {
         int nullSuppressedPosition = nonNullCount - 1;
-        for (int outputPosition = isNull.length - 1; outputPosition >= 0; outputPosition--) {
+        int outputPosition = isNull.length - 1;
+        while (outputPosition >= 0) {
             if (isNull[outputPosition]) {
                 values[outputPosition] = 0;
+                outputPosition--;
+                continue;
             }
-            else {
-                values[outputPosition] = values[nullSuppressedPosition];
-                nullSuppressedPosition--;
+
+            int runEnd = outputPosition;
+            while (outputPosition >= 0 && !isNull[outputPosition]) {
+                outputPosition--;
             }
+            int runLength = runEnd - outputPosition;
+
+            System.arraycopy(values, nullSuppressedPosition - runLength + 1, values, outputPosition + 1, runLength);
+            nullSuppressedPosition -= runLength;
         }
     }
 
