diff --git a/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java b/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
index ea2cf982de..cd71c333e5 100644
--- a/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
+++ b/presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java
@@ -349,18 +349,20 @@ public class SingleMapBlock
             if (keyPosition == -1) {
                 return -1;
             }
-            Boolean match;
-            try {
-                // assuming maps with indeterminate keys are not supported
-                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), offset / 2 + keyPosition, nativeValue);
-            }
-            catch (Throwable throwable) {
-                throw handleThrowable(throwable);
-            }
-            checkNotIndeterminate(match);
-            if (match) {
+            int keyPositionInBlock = offset / 2 + keyPosition;
+            Block keyBlock = mapBlock.getRawKeyBlock();
+            if (keyBlock.isNull(keyPositionInBlock)) {
+                // This is what checkNotIndeterminate would do if keyBlockNativeEquals returned null.
+                // We do this explicitly because the method is optimized to avoid the method handle invocation.
+                checkNotIndeterminate(null);
+            }
+            else {
+                // Fast path for Slice equality comparison to avoid creating a new Slice object for every comparison.
+                if (keyBlock.getSliceLength(keyPositionInBlock) == nativeValue.length() &&
+                        keyBlock.bytesEqual(keyPositionInBlock, 0, nativeValue, 0, nativeValue.length())) {
                     return keyPosition * 2 + 1;
                 }
+            }
             position++;
             if (position == hashTableSize) {
                 position = 0;
