The `map_concat` function is optimized to handle cases where one of the input maps is empty. When an input map is empty, the function can avoid creating a `TypedSet` and a `BlockBuilder`, and skip iterating over the maps. Instead, it now returns the other map directly, which significantly improves performance for this common case by avoiding unnecessary object allocations and computations.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapConcatFunction.java",
    "search": "    public static Block mapConcat(\n            @TypeParameter(\"K\") Type keyType,\n            @TypeParameter(\"V\") Type valueType,\n            @SqlType(\"map(K,V)\") Block leftMap,\n            @SqlType(\"map(K,V)\") Block rightMap)\n    {\n        TypedSet typedSet = new TypedSet(keyType, rightMap.getPositionCount());\n        BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), leftMap.getPositionCount() + rightMap.getPositionCount());\n        for (int i = 0; i < rightMap.getPositionCount(); i += 2) {\n            typedSet.add(rightMap, i);\n            keyType.appendTo(rightMap, i, blockBuilder);\n            valueType.appendTo(rightMap, i + 1, blockBuilder);\n        }\n        for (int i = 0; i < leftMap.getPositionCount(); i += 2) {\n            if (!typedSet.contains(leftMap, i)) {\n                keyType.appendTo(leftMap, i, blockBuilder);\n                valueType.appendTo(leftMap, i + 1, blockBuilder);\n            }\n        }\n        return blockBuilder.build();\n    }",
    "replace": "    public static Block mapConcat(\n            @TypeParameter(\"K\") Type keyType,\n            @TypeParameter(\"V\") Type valueType,\n            @SqlType(\"map(K,V)\") Block leftMap,\n            @SqlType(\"map(K,V)\") Block rightMap)\n    {\n        if (rightMap.getPositionCount() == 0) {\n            return leftMap;\n        }\n        if (leftMap.getPositionCount() == 0) {\n            return rightMap;\n        }\n\n        TypedSet typedSet = new TypedSet(keyType, rightMap.getPositionCount());\n        BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), leftMap.getPositionCount() + rightMap.getPositionCount());\n        for (int i = 0; i < rightMap.getPositionCount(); i += 2) {\n            typedSet.add(rightMap, i);\n            keyType.appendTo(rightMap, i, blockBuilder);\n            valueType.appendTo(rightMap, i + 1, blockBuilder);\n        }\n        for (int i = 0; i < leftMap.getPositionCount(); i += 2) {\n            if (!typedSet.contains(leftMap, i)) {\n                keyType.appendTo(leftMap, i, blockBuilder);\n                valueType.appendTo(leftMap, i + 1, blockBuilder);\n            }\n        }\n        return blockBuilder.build();\n    }"
  }
]
```