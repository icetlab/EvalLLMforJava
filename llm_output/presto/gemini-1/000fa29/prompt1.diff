diff --git a/presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java b/presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java
index 30e0088e35..0e374ed6ca 100644
--- a/presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java
+++ b/presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java
@@ -439,11 +439,11 @@ public class OptimizedPartitionedOutputOperator
             }
 
             Block nullBlock = nullChannel.isPresent() ? page.getBlock(nullChannel.getAsInt()) : null;
-            Page partitionFunctionArgs = getPartitionFunctionArguments(page);
+            Page partitionFunctionArgs = null;
 
             for (int position = 0; position < positionCount; position++) {
                 boolean shouldReplicate = (replicatesAnyRow && !hasAnyRowBeenReplicated) ||
-                        nullBlock != null && nullBlock.isNull(position);
+                        (nullBlock != null && nullBlock.isNull(position));
 
                 if (shouldReplicate) {
                     for (int i = 0; i < partitionBuffers.length; i++) {
@@ -452,11 +452,26 @@ public class OptimizedPartitionedOutputOperator
                     hasAnyRowBeenReplicated = true;
                 }
                 else {
+                    if (partitionFunctionArgs == null) {
+                        partitionFunctionArgs = getPartitionFunctionArguments(page);
+                    }
                     int partition = partitionFunction.getPartition(partitionFunctionArgs, position);
                     partitionBuffers[partition].addPosition(position);
                 }
             }
 
+            boolean hasRowsToPartition = false;
+            for (PartitionBuffer partitionBuffer : partitionBuffers) {
+                if (partitionBuffer.positionCount > 0) {
+                    hasRowsToPartition = true;
+                    break;
+                }
+            }
+
+            if (!hasRowsToPartition) {
+                return;
+            }
+
             // Decode the page just once. The decoded blocks will be fed to each PartitionBuffer object to set up AbstractBlockEncodingBuffer.
             for (int i = 0; i < decodedBlocks.length; i++) {
                 decodedBlocks[i] = decodeBlock(flattener, blockLeaseCloser, page.getBlock(i));
