The `GeneratedPageProjection.project` method is on a hot path and is called for every page of data. The original implementation created a new list of `BlockBuilder`s on each call using `Stream.map` and `collect(toImmutableList())`. This can be inefficient due to stream processing overhead and the cost of creating an immutable list.

My improvement replaces this with a standard `for` loop and a `java.util.ArrayList`. This approach is generally faster for creating lists in performance-critical code. It avoids the overhead of Java Streams and creates a mutable `ArrayList`, which is quicker to construct than an `ImmutableList`. This change preserves the essential logic of creating new `BlockBuilder` instances for each page, ensuring that state is correctly reset between calls, and all existing tests should continue to pass.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/GeneratedPageProjection.java",
    "search": "    @Override\n    public Work<List<Block>> project(SqlFunctionProperties properties, DriverYieldSignal yieldSignal, Page page, SelectedPositions selectedPositions)\n    {\n        blockBuilders = blockBuilders.stream().map(blockBuilder -> blockBuilder.newBlockBuilderLike(null)).collect(toImmutableList());\n        try {\n            return (Work<List<Block>>) pageProjectionWorkFactory.invoke(blockBuilders, properties, page, selectedPositions);\n        }\n        catch (Throwable e) {\n            throw new RuntimeException(e);\n        }\n    }",
    "replace": "    @Override\n    public Work<List<Block>> project(SqlFunctionProperties properties, DriverYieldSignal yieldSignal, Page page, SelectedPositions selectedPositions)\n    {\n        List<BlockBuilder> newBlockBuilders = new java.util.ArrayList<>(blockBuilders.size());\n        for (BlockBuilder blockBuilder : blockBuilders) {\n            newBlockBuilders.add(blockBuilder.newBlockBuilderLike(null));\n        }\n        blockBuilders = newBlockBuilders;\n\n        try {\n            return (Work<List<Block>>) pageProjectionWorkFactory.invoke(blockBuilders, properties, page, selectedPositions);\n        }\n        catch (Throwable e) {\n            throw new RuntimeException(e);\n        }\n    }"
  }
]
```