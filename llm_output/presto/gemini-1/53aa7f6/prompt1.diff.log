The current implementation of `GeneratedPageProjection.project` creates a new list of `BlockBuilder`s on each invocation using a stream and collecting to an `ImmutableList`. This can be a performance bottleneck in a hot path due to the overhead of stream creation and immutable collection construction.

My improvement replaces this with a more performant approach. I will use a standard `for` loop to populate a new `java.util.ArrayList`. This is generally faster for this use case. By using the fully qualified name `java.util.ArrayList`, I avoid the need to add a new import statement, keeping the change self-contained within the method body. This change also has the added benefit of no longer reassigning the `blockBuilders` field, which now acts as a template for creating new block builders for each page.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/project/GeneratedPageProjection.java",
    "search": "    @Override\n    public Work<List<Block>> project(SqlFunctionProperties properties, DriverYieldSignal yieldSignal, Page page, SelectedPositions selectedPositions)\n    {\n        blockBuilders = blockBuilders.stream().map(blockBuilder -> blockBuilder.newBlockBuilderLike(null)).collect(toImmutableList());\n        try {\n            return (Work<List<Block>>) pageProjectionWorkFactory.invoke(blockBuilders, properties, page, selectedPositions);\n        }\n        catch (Throwable e) {\n            throw new RuntimeException(e);\n        }\n    }",
    "replace": "    @Override\n    public Work<List<Block>> project(SqlFunctionProperties properties, DriverYieldSignal yieldSignal, Page page, SelectedPositions selectedPositions)\n    {\n        List<BlockBuilder> newBlockBuilders = new java.util.ArrayList<>(blockBuilders.size());\n        for (BlockBuilder blockBuilder : blockBuilders) {\n            newBlockBuilders.add(blockBuilder.newBlockBuilderLike(null));\n        }\n        try {\n            return (Work<List<Block>>) pageProjectionWorkFactory.invoke(newBlockBuilders, properties, page, selectedPositions);\n        }\n        catch (Throwable e) {\n            throw new RuntimeException(e);\n        }\n    }"
  }
]
```