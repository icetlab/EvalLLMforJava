I’ve optimized the partition end–finding routines to inline the binary search and avoid boxing overhead from BiPredicate, reducing per-group comparison costs.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/WindowOperator.java",
    "search": "private static int findGroupEnd(Page page, PagesHashStrategy pagesHashStrategy, int startPosition)\n    {\n        checkArgument(page.getPositionCount() > 0, \"Must have at least one position\");\n        checkPositionIndex(startPosition, page.getPositionCount(), \"startPosition out of bounds\");\n\n        return findEndPosition(startPosition, page.getPositionCount(), (firstPosition, secondPosition) -> pagesHashStrategy.rowEqualsRow(firstPosition, page, secondPosition, page));",
    "replace": "private static int findGroupEnd(Page page, PagesHashStrategy pagesHashStrategy, int startPosition)\n    {\n        checkArgument(page.getPositionCount() > 0, \"Must have at least one position\");\n        checkPositionIndex(startPosition, page.getPositionCount(), \"startPosition out of bounds\");\n\n        int low = startPosition;\n        int high = page.getPositionCount();\n        while (low + 1 < high) {\n            int mid = (low + high) >>> 1;\n            if (pagesHashStrategy.rowEqualsRow(startPosition, page, mid, page)) {\n                low = mid;\n            } else {\n                high = mid;\n            }\n        }\n        return high;"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/WindowOperator.java",
    "search": "private static int findGroupEnd(PagesIndex pagesIndex, PagesHashStrategy pagesHashStrategy, int startPosition)\n    {\n        checkArgument(pagesIndex.getPositionCount() > 0, \"Must have at least one position\");\n        checkPositionIndex(startPosition, pagesIndex.getPositionCount(), \"startPosition out of bounds\");\n\n        return findEndPosition(startPosition, pagesIndex.getPositionCount(), (firstPosition, secondPosition) -> pagesIndex.positionEqualsPosition(pagesHashStrategy, firstPosition, secondPosition));",
    "replace": "private static int findGroupEnd(PagesIndex pagesIndex, PagesHashStrategy pagesHashStrategy, int startPosition)\n    {\n        checkArgument(pagesIndex.getPositionCount() > 0, \"Must have at least one position\");\n        checkPositionIndex(startPosition, pagesIndex.getPositionCount(), \"startPosition out of bounds\");\n\n        int low = startPosition;\n        int high = pagesIndex.getPositionCount();\n        while (low + 1 < high) {\n            int mid = (low + high) >>> 1;\n            if (pagesIndex.positionEqualsPosition(pagesHashStrategy, startPosition, mid)) {\n                low = mid;\n            } else {\n                high = mid;\n            }\n        }\n        return high;"
  }
]
```