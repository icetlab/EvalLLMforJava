Iâ€™ve added a fast path for 2D points to avoid full ESRI shape serialization/parsing, and adjusted both GeometrySerde and JtsGeometrySerde so they remain compatible (so JTS and ESRI slices still match). Other geometries are unchanged.

```json
[
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "private static void writeSimpleGeometry(DynamicSliceOutput output, GeometryType type, OGCGeometry geometry)\n{",
    "replace": "private static void writeSimpleGeometry(DynamicSliceOutput output, GeometryType type, OGCGeometry geometry)\n{\n    if (type == GeometryType.POINT) {\n        // fast path for 2D point: skip full ESRI shape header\n        Point esriPoint = (Point) geometry.getEsriGeometry();\n        double x = esriPoint.isEmpty() ? Double.NaN : esriPoint.getX();\n        double y = esriPoint.isEmpty() ? Double.NaN : esriPoint.getY();\n        output.appendByte(type.code());\n        output.appendDouble(x);\n        output.appendDouble(y);\n        return;\n    }\n    // other geometries: existing ESRI shape serialization\n    output.appendByte(type.code());\n    Geometry esriGeometry = requireNonNull(geometry.getEsriGeometry(), \"esriGeometry is null\");\n    byte[] shape = geometryToEsriShape(esriGeometry);\n    output.appendBytes(shape);"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "private static OGCGeometry readSimpleGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length)\n{",
    "replace": "private static OGCGeometry readSimpleGeometry(BasicSliceInput input, Slice inputSlice, GeometryType type, int length)\n{\n    if (type == GeometryType.POINT) {\n        // fast path for 2D point: read two doubles directly\n        double x = input.readDouble();\n        double y = input.readDouble();\n        if (isEsriNaN(x) || isEsriNaN(y)) {\n            return new OGCPoint(new Point(), null);\n        }\n        return new OGCPoint(new Point(x, y), null);\n    }\n    // other geometries: existing ESRI shape import\n    int currentPosition = toIntExact(input.position());\n    ByteBuffer geometryBuffer = inputSlice.toByteBuffer(currentPosition, length).slice();\n    input.setPosition(currentPosition + length);\n    Geometry esriGeometry = OperatorImportFromESRIShape.local().execute(0, Unknown, geometryBuffer);\n    return createFromEsriGeometry(esriGeometry, type.isMultitype());"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/GeometrySerde.java",
    "search": "private static Envelope getEnvelope(BasicSliceInput input, GeometryType type, int length)\n{",
    "replace": "private static Envelope getEnvelope(BasicSliceInput input, GeometryType type, int length)\n{\n    switch (type) {\n        case POINT:\n            // fast path envelope for 2D point\n            double x = input.readDouble();\n            double y = input.readDouble();\n            if (isEsriNaN(x) || isEsriNaN(y)) {\n                return null;\n            }\n            return new Envelope(x, y, x, y);\n        case MULTI_POINT:\n        case LINE_STRING:\n        case MULTI_LINE_STRING:\n        case POLYGON:\n        case MULTI_POLYGON:\n            return getSimpleGeometryEnvelope(input, length);\n        case GEOMETRY_COLLECTION:\n            return getGeometryCollectionOverallEnvelope(input);\n        default:\n            throw new IllegalArgumentException(\"Unexpected type: \" + type);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java",
    "search": "private static void writePoint(Point point, SliceOutput output)\n{",
    "replace": "private static void writePoint(Point point, SliceOutput output)\n{\n    // fast path for 2D point: drop ESRI shape type header\n    output.writeByte(GeometryType.POINT.code());\n    if (!point.isEmpty()) {\n        writeCoordinate(point.getCoordinate(), output);\n    }\n    else {\n        writeCoordinate(new Coordinate(translateToAVNaN(Double.NaN), translateToAVNaN(Double.NaN)), output);\n    }"
  },
  {
    "filepath": "../presto/presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/JtsGeometrySerde.java",
    "search": "case POINT:\n                return readPoint(input, true);",
    "replace": "case POINT:\n                // fast path: no ESRI type int to skip\n                return readPoint(input, false);"
  }
]
```