I’ve added a fast‐path in `buildProcessor` for the common case where no actual cast is needed (`fromType.equals(toType)`), bypassing the generic MethodHandle composition and dropping the extra SqlFunctionProperties argument. This should significantly reduce invocation overhead for identity casts.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/MapToMapCast.java",
    "search": "private MethodHandle buildProcessor(FunctionAndTypeManager functionAndTypeManager, Type fromType, Type toType, boolean isKey)\n    {\n        MethodHandle getter = nativeValueGetter(fromType);",
    "replace": "private MethodHandle buildProcessor(FunctionAndTypeManager functionAndTypeManager, Type fromType, Type toType, boolean isKey)\n    {\n        if (fromType.equals(toType)) {\n            // fast‐path when no cast is required\n            MethodHandle getter = nativeValueGetter(fromType);\n            MethodHandle writer = nativeValueWriter(toType);\n            // swap writer args to (value, blockBuilder)\n            writer = permuteArguments(writer, methodType(void.class, writer.type().parameterType(1), writer.type().parameterType(0)), 1, 0);\n            // compose getter -> writer\n            MethodHandle target = compose(writer, getter);\n            // insert the SqlFunctionProperties argument (ignored)\n            target = MethodHandles.dropArguments(target, 2, SqlFunctionProperties.class);\n            return target;\n        }\n        MethodHandle getter = nativeValueGetter(fromType);"
  }
]
```