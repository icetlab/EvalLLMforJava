I have hoisted the `filter.getPrecedingPositionsToFail()` and `filter.getSucceedingPositionsToFail()` calls out of the per-iteration logic in `readWithFilter`, eliminating the redundant null-check and reducing method call overhead inside the loop.

```json
[
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java",
    "search": "private int readWithFilter(int[] positions, int positionCount)\n            throws IOException\n    {\n        int streamPosition = 0;\n        outputPositionCount = 0;",
    "replace": "private int readWithFilter(int[] positions, int positionCount)\n            throws IOException\n    {\n        int streamPosition = 0;\n        outputPositionCount = 0;\n        // Hoist filter offsets to avoid repeated calls inside the loop\n        int precedingToFail = filter.getPrecedingPositionsToFail();\n        int succeedingToFail = filter.getSucceedingPositionsToFail();"
  },
  {
    "filepath": "../presto/presto-orc/src/main/java/com/facebook/presto/orc/reader/ByteSelectiveStreamReader.java",
    "search": "if (filter != null) {\n                outputPositionCount -= filter.getPrecedingPositionsToFail();\n                int succeedingPositionsToFail = filter.getSucceedingPositionsToFail();\n                if (succeedingPositionsToFail > 0) {\n                    int positionsToSkip = 0;\n                    for (int j = 0; j < succeedingPositionsToFail; j++) {\n                        i++;\n                        int nextPosition = positions[i];\n                        positionsToSkip += 1 + nextPosition - streamPosition;\n                        streamPosition = nextPosition + 1;\n                    }\n                    skip(positionsToSkip);\n                }\n            }",
    "replace": "// Apply preceding and succeeding skip logic using hoisted values\n                outputPositionCount -= precedingToFail;\n                if (succeedingToFail > 0) {\n                    int positionsToSkip = 0;\n                    for (int j = 0; j < succeedingToFail; j++) {\n                        i++;\n                        int nextPosition = positions[i];\n                        positionsToSkip += 1 + nextPosition - streamPosition;\n                        streamPosition = nextPosition + 1;\n                    }\n                    skip(positionsToSkip);\n                }"
  }
]
```