Overall, these changes eliminate an unnecessary buffer copy in serialization when encryption is disabled, and replace a stream-based mapping in the partitioned output operator with a hand‚Äêrolled loop to reduce object and lambda overhead.

```json
[
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/execution/buffer/PagesSerde.java",
    "search": "if (spillCipher.isPresent()) {\n            slice = Slices.wrappedBuffer(spillCipher.get().encrypt(slice.toByteBuffer()));\n            markers = ENCRYPTED.set(markers);\n        }\n        else {\n            //  Encryption disabled, slice data is likely much smaller than its backing buffer\n            //  either because of compression or dynamic sizing of the initial output slice\n            slice = Slices.copyOf(slice);\n        }",
    "replace": "if (spillCipher.isPresent()) {\n            slice = Slices.wrappedBuffer(spillCipher.get().encrypt(slice.toByteBuffer()));\n            markers = ENCRYPTED.set(markers);\n        }\n        // else: no encryption, reuse slice without copying\n"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java",
    "search": "import static com.google.common.collect.ImmutableList.toImmutableList;",
    "replace": "import static com.google.common.collect.ImmutableList.toImmutableList;\nimport java.util.ArrayList;"
  },
  {
    "filepath": "../presto/presto-main/src/main/java/com/facebook/presto/operator/PartitionedOutputOperator.java",
    "search": "List<SerializedPage> serializedPages = splitPage(pagePartition, DEFAULT_MAX_PAGE_SIZE_IN_BYTES).stream()\n                            .map(serde::serialize)\n                            .collect(toImmutableList());",
    "replace": "List<Page> splitPages = splitPage(pagePartition, DEFAULT_MAX_PAGE_SIZE_IN_BYTES);\n                            List<SerializedPage> serializedPages = new ArrayList<>(splitPages.size());\n                            for (Page split : splitPages) {\n                                serializedPages.add(serde.serialize(split));\n                            }"
  }
]
```