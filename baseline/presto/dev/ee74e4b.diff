commit ee74e4bdcdb13ef0414506dccee058d4f1e2bbc9
Author: Ying Su <yingsu@fb.com>
Date:   Tue Oct 6 01:57:05 2020 -0700

    Use getApproximateLogicalSizeInBytes() in PageProcessor
    
    BenchmarkPageProcessor shows 21x improvment in throughput and 10x reduction in
    memory allocation and GC:
    
    Before
    Benchmark                                                                    Mode  Cnt       Score      Error   Units
    BenchmarkPageProcessor.identityProjection                                   thrpt   50  125261.816 ± 5342.200   ops/s
    BenchmarkPageProcessor.identityProjection:·gc.alloc.rate                    thrpt   50    2439.004 ±  103.990  MB/sec
    BenchmarkPageProcessor.identityProjection:·gc.alloc.rate.norm               thrpt   50   40832.029 ±    0.033    B/op
    BenchmarkPageProcessor.identityProjection:·gc.churn.PS_Eden_Space           thrpt   50    2461.428 ±  364.315  MB/sec
    BenchmarkPageProcessor.identityProjection:·gc.churn.PS_Eden_Space.norm      thrpt   50   41439.660 ± 6521.978    B/op
    BenchmarkPageProcessor.identityProjection:·gc.churn.PS_Survivor_Space       thrpt   50       0.016 ±    0.016  MB/sec
    BenchmarkPageProcessor.identityProjection:·gc.churn.PS_Survivor_Space.norm  thrpt   50       0.257 ±    0.267    B/op
    BenchmarkPageProcessor.identityProjection:·gc.count                         thrpt   50      46.000             counts
    BenchmarkPageProcessor.identityProjection:·gc.time                          thrpt   50     181.000                 ms
    
    After
    Benchmark                                                                    Mode  Cnt        Score        Error   Units
    BenchmarkPageProcessor.identityProjection                                   thrpt   10  2687127.250 ± 337956.918   ops/s
    BenchmarkPageProcessor.identityProjection:·gc.alloc.rate                    thrpt   10     1118.285 ±    141.900  MB/sec
    BenchmarkPageProcessor.identityProjection:·gc.alloc.rate.norm               thrpt   10      872.001 ±      0.005    B/op
    BenchmarkPageProcessor.identityProjection:·gc.churn.PS_Eden_Space           thrpt   10     1050.013 ±   1683.604  MB/sec
    BenchmarkPageProcessor.identityProjection:·gc.churn.PS_Eden_Space.norm      thrpt   10      827.947 ±   1329.288    B/op
    BenchmarkPageProcessor.identityProjection:·gc.churn.PS_Survivor_Space       thrpt   10        0.012 ±      0.040  MB/sec
    BenchmarkPageProcessor.identityProjection:·gc.churn.PS_Survivor_Space.norm  thrpt   10        0.011 ±      0.034    B/op
    BenchmarkPageProcessor.identityProjection:·gc.count                         thrpt   10        5.000               counts
    BenchmarkPageProcessor.identityProjection:·gc.time                          thrpt   10       21.000                   ms

diff --git a/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java b/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java
index 979fc2cb80..e6608d4ed1 100644
--- a/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java
+++ b/presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java
@@ -215,7 +215,20 @@ public class PageProcessor
                 Page resultPage = result.getPage();
 
                 // if we produced a large page or if the expression is expensive, halve the batch size for the next call
-                long pageSize = resultPage.getSizeInBytes();
+                // We use the getApproximateLogicalSizeInBytes() instead of getSizeInBytes() for several reasons:
+                //
+                // 1. For DictionaryBlock, getSizeInBytes() calculates the compacted size. For example a DictionaryBlock with ids [1, 1] and dictionary with 3 elements of sizes
+                // [5, 100, 10] would have sizeInBytes = 100 + 4 * 2 = 108. However if both position 0 and 1 are being projected, the outcome block should contain the second
+                // element of the dictionary twice and the actual size of the output block should be 100 * 2 at least.
+                //
+                // 2. getSizeInBytes() is more sensitive to skew and may cause false positives on a larger number of pages. Suppose there are multiple page/block views on a base
+                // page/blocks. Page/BlockView 1 may happen to project positions with larger elements, while Page/BlockView 2 may project positions with smaller elements.
+                // Using the sizeInBytes for view 1 may cause view 2 to be sized down which is not desired. On the other hand, getApproximateLogicalSizeInBytes() returns amortized
+                // sizes and is less jittery.
+                //
+                // 3. getApproximateLogicalSizeInBytes() is over 20x faster than getSizeInBytes() for DictionaryBlock and RleBlocks, and it avoids excessive memory allocations
+                // that was known to cause reliability issues.
+                long pageSize = resultPage.getApproximateLogicalSizeInBytes();
                 if (resultPage.getPositionCount() > 1 && (pageSize > MAX_PAGE_SIZE_IN_BYTES || expressionProfiler.isExpressionExpensive())) {
                     projectBatchSize = projectBatchSize / 2;
                 }
@@ -301,7 +314,7 @@ public class PageProcessor
                 if (previouslyComputedResults[outputChannels[0]] != null && previouslyComputedResults[outputChannels[0]].getPositionCount() >= batchSize) {
                     for (int channel : outputChannels) {
                         blocks[channel] = previouslyComputedResults[channel].getRegion(0, batchSize);
-                        pageSize += blocks[channel].getSizeInBytes();
+                        pageSize += blocks[channel].getApproximateRegionLogicalSizeInBytes(0, blocks[channel].getPositionCount());
                     }
                 }
                 else {
@@ -318,7 +331,7 @@ public class PageProcessor
                         int channel = outputChannels[j];
                         previouslyComputedResults[channel] = projectionOutputs.get(j);
                         blocks[channel] = previouslyComputedResults[channel];
-                        pageSize += blocks[channel].getSizeInBytes();
+                        pageSize += blocks[channel].getApproximateRegionLogicalSizeInBytes(0, blocks[channel].getPositionCount());
                     }
                     pageProjectWork = null;
                 }
